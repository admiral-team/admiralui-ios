fastlane_require 'dotenv'
require_relative 'nexus_info'
require_relative 'release_asset'
require_relative 'build_info'
require_relative 'version'
require_relative 'checksum'
require_relative 'utils'
require_relative 'templates_generator'
require_relative 'admiraltools'

before_all do
  Dotenv.overload('.env', '.env.secret')
end

# Deploy Methods

lane :deploy_appcenter_prod do |options|
  skip_archive = options[:skip_archive] || false
  build_number = generate_random_build_number()
  previous_build_number = current_app_build_number
  telegram_token = options[:telegram_token]

  if !skip_archive
    increment_app_build(build_number: build_number)
    
    build_app(
      workspace: ENV['PROJECT_WORKSPACE_PATH'],
      configuration: "Release",
      scheme: "ExampleiOS",
      silent: true,
      clean: true,
      output_directory: "Release/AdmiralUI-Example/Prod",
      export_method: "enterprise",
      output_name: "admiralui-example.ipa",
    )

    increment_app_build(build_number: previous_build_number)
  end

  appcenter_upload(
    api_token: ENV['APPCENTER_API_TOKEN'],
    owner_name: ENV['APPCENTER_OWNER_NAME'],
    owner_type: ENV['APPCENTER_OWNER_TYPE'],
    app_name: ENV['APPCENTER_APP_NAME'],
    file: "Release/AdmiralUI-Example/Prod/admiralui-example.ipa",
    destinations: ENV['APPCENTER_DESTINATIONS_PROD'],
    destination_type: "group",
    release_notes: "",
    notify_testers: true
  )

  assets_string = release_assets_string()
  system("cd ./go_scripts && ./main createRelease #{current_lib_external_version} #{ENV['RELEASE_TOKEN']} #{ENV['TELEGRAM_PROD_CHAT_ID']} #{assets_string}")
end

lane :deploy_appcenter_dev do |options|
  skip_archive = options[:skip_archive] || false
  skip_git_comment = options[:skip_git_comment] || false
  issue_name = options[:issue_name]
  telegram_token = options[:telegram_token]
  telegram_chat_id = options[:telegram_chat_id]
  pull_request_number = options[:pull_request_number]
  build_number = generate_random_build_number()
  previous_build_number = current_app_build_number
  branch_name = issue_name

  if issue_name.nil? || issue_name == ""
    issue_name = extract_issue_name(branch_name: branch_name)
  else
    issue_name = extract_issue_name(branch_name: issue_name)
  end

  if !skip_archive
    increment_app_build(build_number: build_number)
    
    build_app(
      workspace: ENV['PROJECT_WORKSPACE_PATH'],
      configuration: "Release",
      scheme: "ExampleiOS",
      silent: true,
      clean: true,
      output_directory: "Release/AdmiralUI-Example/Dev",
      export_method: "enterprise",
      output_name: "admiralui-example.ipa",
    )

    increment_app_build(build_number: previous_build_number)
  end

  appcenter_upload(
    api_token: ENV['APPCENTER_API_TOKEN'],
    owner_name: ENV['APPCENTER_OWNER_NAME'],
    owner_type: ENV['APPCENTER_OWNER_TYPE'],
    app_name: ENV['APPCENTER_APP_NAME_DEV'],
    file: "Release/AdmiralUI-Example/Dev/admiralui-example.ipa",
    destinations: ENV['APPCENTER_DESTINATIONS_DEV'],
    destination_type: "group",
    release_notes: "",
    notify_testers: true
  )

  build_info_hash = lane_context[SharedValues::APPCENTER_BUILD_INFORMATION]
  build_info = BuildInfo.from_hash(build_info_hash)
  build_info.branch_name = branch_name
  build_info.build_url = appcenter_build_dev_url(build_id: build_info.build_id)
  build_info.internal_version = current_lib_internal_version
  build_info.external_version = current_lib_external_version
  build_info.issue = issue_name
  build_info.pull_request_number = pull_request_number

  if !skip_git_comment && !issue_name.nil?
    comment_body = formatted_build_info_json(build_info: build_info)
    system("cd ./go_scripts && ./main createComment #{comment_body} #{ENV['RELEASE_TOKEN']} #{telegram_chat_id} #{telegram_token}")
  end
end

lane :run_code_cov do |options|
  xcov(
    workspace: ENV['PROJECT_WORKSPACE_PATH'],
    scheme: "AdmiralUIKit",
    output_directory: "xcov_output",
    derived_data_path: '~/Library/Developer/Xcode/DerivedData',
  )
end

lane :run_all_snapshot_tests do |options|
  run_tests_ukit(devices: options[:devices])
  run_tests_swiftui(devices: options[:devices])
  system("cd ../Tools/SnapShotsCoverage && swift build && swift run")
end

lane :run_tests_ukit do |options|
  run_tests_app(scheme: 'AdmiralUIKit', configuration: "Debug", devices: options[:devices], clean: true)
end

lane :run_tests_swiftui do |options|
  run_tests_app(scheme: 'AdmiralSwiftUI', configuration: "Debug", devices: options[:devices], clean: true)
end

lane :run_all_ui_tests do |options|
  run_tests_app(scheme: 'ExampleiOS', configuration: "Debug", devices: options[:devices], clean: true)
end

lane :run_tests_app do |options|
  scheme = options[:scheme]
  devices = ['iPhone 8 (14.5)']

  run_tests(
    workspace: ENV['PROJECT_WORKSPACE_PATH'],
    scheme: scheme,
    buildlog_path: './fastlane/buildlog',
    derived_data_path: '~/Library/Developer/Xcode/DerivedData',
    devices: devices,
    ensure_devices_found: true,
    result_bundle: true
  )
end

lane :upload_nexus_lib do |options|
  branch = options[:branch]

  upload_nexus_framework(
    scheme: "AdmiralSwiftUI", 
    artifact_id: "admiral-swiftui",
    branch: branch
  )

  upload_nexus_framework(
    scheme: "AdmiralUIKit", 
    artifact_id: "admiral-uikit",
    branch: branch

  )

  upload_nexus_framework(
    scheme: "AdmiralTheme", 
    artifact_id: "admiral-theme",
    branch: branch
  )

  upload_nexus_framework(
    scheme: "AdmiralImages", 
    artifact_id: "admiral-images",
    branch: branch
  )

  upload_nexus_framework(
    scheme: "AdmiralSymbols", 
    artifact_id: "admiral-symbols",
    branch: branch
  )
end

# Code Genearation Methods

lane :generate_colors do
  styles = figma_get_styles(
    access_token: ENV['FIGMA_ACCESS_TOKEN'],
    file_key: ENV['FIGMA_COLORS_FILE_KEY'],
    style_types: ["FILL"],
  )

  styles.styles.each { |s| s.name = s.name.delete(' ') }

  figma_generate_styles(
    styles: styles.to_json, 
    template_file: Dir.pwd + "/../Templates/ColorPalette.liquid",
    output_file: Dir.pwd + "/../Source/AdmiralTheme/Classes/CoreFoundation/AppTheme/Colors/ColorPalette.swift"
  )
end

lane :generate_fonts do
  styles = figma_get_styles(
    access_token: ENV['FIGMA_ACCESS_TOKEN'],
    file_key: ENV['FIGMA_FONTS_FILE_KEY'],
    style_types: ["TEXT"],
  )

  figma_generate_styles(
    styles: styles.to_json, 
    template_file: Dir.pwd + "/../Templates/FontPalette.liquid",
    output_file: Dir.pwd + "/../Source/AdmiralTheme/Classes/CoreFoundation/AppTheme/Fonts/FontPalette.swift"
  )
end

lane :download_icons do
  output_dir = Dir.pwd + '/../Source/AdmiralImages/Resources/Assets'

  components_list = figma_get_image_links(
    access_token: ENV['FIGMA_ACCESS_TOKEN'],
    file_key: ENV['FIGMA_IMAGES_FILE_KEY'],
    name_filter_regex: '^(Solid|Outline)',
    page_filter_regex: 'Icons',
    use_absolute_bounds: true,
    format: 'pdf',
  )

  ouptut_icons_folder = File.join(output_dir, 'Images.xcassets')

  figma_download_images(
    image_components: components_list.to_json,
    output_folder: ouptut_icons_folder,
    output_format: 'xcassets',
    naming_style: 'camelcase',
    include_page_name: false,
    include_frame_name: true,
    xcassets_params: { 'template_rendering_intent': 'template', 'provides_namespace': true, 'preserves_vector_representation': true }
  )

  swiftgen_file_dir = Dir.pwd + '/../.swiftgen.yml'
  system "swiftgen config run --config #{swiftgen_file_dir}"
end

lane :download_symbols do
  output_dir = Dir.pwd + '/../Source/AdmiralSymbols/Resources/Assets'

  components_list = figma_get_image_links(
    access_token: ENV['FIGMA_ACCESS_TOKEN'],
    file_key: ENV['FIGMA_SYMBOLS_FILE_KEY'],
    name_filter_regex: '(Solid|Outline)',
    use_absolute_bounds: true,
    svg_include_id: true,
    format: 'svg'
  )

  ouptut_icons_folder = File.join(output_dir, 'Symbols.xcassets')

  figma_download_images(
    image_components: components_list.to_json,
    output_folder: ouptut_icons_folder,
    output_format: 'xcassets-symbols',
    naming_style: 'camelcase',
    include_page_name: false,
    include_frame_name: true,
    xcassets_params: { 'provides_namespace': true }
  )

  assets_file = Dir.pwd + '/../Source/AdmiralSymbols/Classes/Assets/Symbols.swift'
  symbolsets = find_resources(path: ouptut_icons_folder, extension: 'symbolset')

  generate_swiftui_symbols(list: symbolsets, enum_name: 'AssetSymbol', image_type_name: 'SymbolImage', file: assets_file)
end

# Supporting Methods

lane :increment_app_version do |options|
  version_number = options[:version_number]
  increment_version_number(
    version_number: version_number,
    xcodeproj: ENV['EXAMPLE_PROJECT_PATH']
  )
  increment_version_number(
    version_number: version_number,
    xcodeproj: ENV['LIBRARY_PROJECT_PATH']
  )

  increment_podspec_version(
    path: File.join(Dir.pwd, '../AdmiralSwiftUI.podspec'), 
    version: version_number
  )
  increment_podspec_version(
    path: File.join(Dir.pwd, '../AdmiralTheme.podspec'), 
    version: version_number
  )
  increment_podspec_version(
    path: File.join(Dir.pwd, '../AdmiralUIKit.podspec'), 
    version: version_number
  )
  increment_podspec_version(
    path: File.join(Dir.pwd, '../AdmiralImages.podspec'), 
    version: version_number
  )
  increment_podspec_version(
    path: File.join(Dir.pwd, '../AdmiralSymbols.podspec'), 
    version: version_number
  )
end

lane :increment_app_build do |options|
  build_number = options[:build_number]
  increment_build_number(
    build_number: build_number,
    xcodeproj: ENV['EXAMPLE_PROJECT_PATH']
  )
end

# Dependency manager validation

lane :validate_depenecy_managers do |options|
  branch_name = options[:branch_name] || git_branch()
  validate_spm_example(branch_name: branch_name)
  validate_cocoapods_example(branch_name: branch_name)
end

lane :validate_spm_example do |options|
  branch_name = options[:branch_name]

  Dir.chdir("../Examples/ExampleSPM") do
    unless branch_name.nil?
      file = Dir.pwd + "/ExampleSPM.xcodeproj/project.pbxproj"
      replace(file: file, regex: /branch = main;/, with: "branch = #{branch_name};")
    end

    system("rm -rf $(xcodebuild -showBuildSettings | grep -m 1 BUILD_DIR | grep -oE \"\/.*\" | sed 's|/Build/Products||')")
    system("rm ./ExampleSPM.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved")
    system("xcodebuild -resolvePackageDependencies")

    build_app(
      clean: true,
      scheme: "ExampleSPM",
      configuration: "Release",
      skip_codesigning: true,
      skip_archive: true,
      project: Dir.pwd + "/ExampleSPM.xcodeproj",
    )
  end
end

lane :validate_cocoapods_example do |options|branch_name = options[:branch_name]
  branch_name = options[:branch_name]

  Dir.chdir("../Examples/ExampleCocoaPods") do
    unless branch_name.nil?
      file = Dir.pwd + "/Podfile"
      replace(file: file, regex: /'main'/, with: "'#{branch_name}'")
    end

    system("pod update")

    build_app(
      clean: true,
      scheme: "ExampleCocoaPods",
      configuration: "Release",
      skip_codesigning: true,
      skip_archive: true,
      workspace: Dir.pwd + "/ExampleCocoaPods.xcworkspace"
    )
  end
end

lane :set_version do |options|
  internal = options[:internal_version]
  external = options[:external_version]
  update_app_version = options[:update_app_version]

  set_version(
    external_version: external,
    internal_version: internal
  )

  if update_app_version
    increment_app_version(version_number: current_lib_external_version)
  end
end

lane :finish_release_version do |options|
  external = options[:external_version]
  last_version = options[:version_number]
  internal = current_lib_internal_version
  set_version(
    external_version: external,
    internal_version: internal, 
  )
  if !last_version.nil? && !last_version.empty?
    increment_app_version(version_number: last_version)
  end 
end

lane :start_next_release_version do
  external = "0.0.0"
  internal = "#{Integer(current_lib_internal_version) + 1}"
  set_version(external_version: external, internal_version: internal)
  increment_app_version(version_number: external)
end

def build_package(scheme:, artifact_id:, branch:)
  root_path = "Products/xcframeworks"
  framework_path = root_path + "/#{scheme}.xcframework"
  ziped_framework_path = framework_path + ".zip"
  current_branch = (branch == "main" || branch == "master" || branch == nil) ? "" : "-#{branch}"

  create_xcframework(
    workspace: ENV['PROJECT_WORKSPACE_PATH'],
    scheme: scheme,
    destinations: ['iOS'],
    xcframework_output_directory: root_path
  )

  zip(path: framework_path, output_path: ziped_framework_path)
end

# Github

lane :unlock_secrets_keychain do |options|
  unlock_keychain(
    path: "login.keychain",
    password: options[:password]
  )
end

lane :send_build_failed_info do |options|
  build_info_hash = lane_context[SharedValues::APPCENTER_BUILD_INFORMATION]
  build_info = BuildInfo.from_hash(build_info_hash)
  build_info.branch_name = options[:issue_name]
  build_info.issue = options[:issue_name]
  telegram_chat_id = options[:telegram_chat_id]
  telegram_token = options[:telegram_token]
  action_id = options[:build_url]
  info_body = formatted_build_info_json(build_info: build_info)
  system("cd ./go_scripts && ./main build_failed #{info_body} #{telegram_chat_id} #{telegram_token} #{action_id}")
end

lane :remove_products_frameworks do |options|
  dir_path = Dir.pwd + "/../Products/xcframeworks"
  FileUtils.rm_rf("#{dir_path}/.", secure: true)
end
  
lane :build_git_packages do |options|
  branch = options[:branch]

  build_package(
    scheme: "AdmiralSwiftUI", 
    artifact_id: "admiral-swiftui",
    branch: branch
  )

  build_package(
    scheme: "AdmiralUIKit", 
    artifact_id: "admiral-uikit",
    branch: branch
  )

  build_package(
    scheme: "AdmiralTheme", 
    artifact_id: "admiral-theme",
    branch: branch
  )

  build_package(
    scheme: "AdmiralImages", 
    artifact_id: "admiral-images",
    branch: branch
  )

  build_package(
    scheme: "AdmiralSymbols", 
    artifact_id: "admiral-symbols",
    branch: branch
  )

  checksum_swiftui = get_checksum(
    scheme: "AdmiralSwiftUI"
  )

  checksum_uikit = get_checksum(
    scheme: "AdmiralUIKit"
  )

  checksum_theme = get_checksum(
    scheme: "AdmiralTheme"
  )

  checksum_images = get_checksum(
    scheme: "AdmiralImages"
  )

  checksum_symbols = get_checksum(
    scheme: "AdmiralSymbols"
  )

  set_checksum(
    admiral_swiftui_checksum: checksum_swiftui, 
    admiral_theme_checksum: checksum_theme, 
    admiral_uikit_checksum: checksum_uikit, 
    admiral_symbols_checksum: checksum_symbols,
    admiral_images_checksum: checksum_images
  )
end


def upload_nexus_framework(scheme:, artifact_id:, branch:)
  root_path = "Products/xcframeworks"
  framework_path = root_path + "/#{scheme}.xcframework"
  ziped_framework_path = framework_path + ".zip"
  current_branch = (branch == "main" || branch == "master" || branch == nil) ? "" : "-#{branch}"

  create_xcframework(
    workspace: ENV['PROJECT_WORKSPACE_PATH'],
    scheme: scheme,
    destinations: ['iOS'],
    xcframework_output_directory: root_path
  )

  zip(
    path: framework_path,
    output_path: ziped_framework_path
  )
  
  nexus_info = NexusInfo.new()
  nexus_info.repository = ENV['NEXUS_REPOSITORY_NAME']
  nexus_info.group_id = ENV['NEXUS_GROUP_ID']
  nexus_info.artifact_id = artifact_id
  nexus_info.version = current_lib_external_version
  nexus_info.ziped_framework_path = ziped_framework_path
  nexus_info.extension = "zip"
  nexus_info.nexus_url = ENV['NEXUS_URL']
  nexus_info.username = ENV['NEXUS_USERNAME']
  nexus_info.password = ENV['NEXUS_PASSWORD']

  nexus_info_json_string = formatted_nexus_info_json(nexus_info: nexus_info)
  system("cd ./go_scripts && ./main uploadNexusLib #{nexus_info_json_string}")
end

def release_asset_string(name:)
  release_asset_uikit = ReleaseAsset.new()
  release_asset_uikit.name = "#{name}.zip"
  release_asset_uikit.label = "#{name}.zip"
  release_asset_uikit.media_type = "application/zip"
  release_asset_uikit.path = "../../Products/xcframeworks/#{name}.xcframework.zip"
  release_asset_uikit_string = formatted_release_asset_json(release_asset: release_asset_uikit)
  release_asset_uikit_string
end

def release_assets_string()
  release_asset_uikit_string = release_asset_string(name: "AdmiralUIKit")
  release_asset_swiftui_string = release_asset_string(name: "AdmiralSwiftUI")
  release_asset_theme_string = release_asset_string(name: "AdmiralTheme")
  release_asset_symbols_string = release_asset_string(name: "AdmiralSymbols")
  release_asset_images_string = release_asset_string(name: "AdmiralImages")

  release_asset_array = [release_asset_uikit_string, release_asset_swiftui_string, release_asset_theme_string, release_asset_symbols_string, release_asset_images_string]
  release_asset_json_string = release_asset_array.join(",")
  "[#{release_asset_json_string}]"
end
