// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AdmiralUIKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import AdmiralCore
import AdmiralTheme
@_exported import AdmiralUIKit
import AdmiralUIResources
import CoreGraphics
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct Durations {
  public struct Default {
    public static let single: Swift.Double
    public static let half: Swift.Double
    public static let double: Swift.Double
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ChatButton : AdmiralUIKit.CustomButton, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ChatButtonCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PrimaryButton : AdmiralUIKit.CustomButton, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.PrimaryButtonCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct CountDownTimerViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleTextColor: AdmiralTheme.AColor
  public var titleTextFont: AdmiralTheme.AFont
  public var tintColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CirclePageControlScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var centerButtonBackgroundColor: AdmiralTheme.AColor
  public var progressColor: AdmiralTheme.AColor
  public var buttonImageColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseLinkControl : AdmiralUIKit.TagControl<UIKit.UIImageView, UIKit.UIImageView> {
  public enum FontStyle {
    case body
    case subhead
    public static func == (a: AdmiralUIKit.BaseLinkControl.FontStyle, b: AdmiralUIKit.BaseLinkControl.FontStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var fontStyle: AdmiralUIKit.BaseLinkControl.FontStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leadingImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trailingImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct PlatformButtonCustomScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelFont: AdmiralTheme.AFont
  public var buttonBackgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var backgroundLayerColor: AdmiralTheme.AColor
  public var textColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct InputNumberScheme : AdmiralTheme.AppThemeScheme {
  public var titleFont: AdmiralTheme.AFont
  public var numberFont: AdmiralTheme.AFont
  public var textColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var tintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SubtitleTitleListView : AdmiralUIKit.BaseListView, AdmiralUIKit.CenterListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SubtitleTitleListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ImageNameListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var backgroundNameViewColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class HeaderButtonWithArrow : UIKit.UIControl, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.HeaderButtonWithArrowScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dropDownHeaderType: AdmiralUIKit.DropDownHeaderType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var shouldAnimateHighlighting: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var animationDuration: Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public protocol ChatInputViewDelegate : AnyObject {
  func textViewSizeDidChange(_ chatInput: AdmiralUIKit.ChatInputView, size: CoreFoundation.CGSize)
  func didTapSendButton(_ chatInput: AdmiralUIKit.ChatInputView)
}
public enum ChatInputMessageAction {
  case attachFiles
  case deleteVoiceRecord
  case startRecording
  public static func == (a: AdmiralUIKit.ChatInputMessageAction, b: AdmiralUIKit.ChatInputMessageAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ChatInputView : AdmiralUIKit.TextViewInput, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var state: AdmiralUIKit.TextInputState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var actionState: AdmiralUIKit.ChatInputMessageAction {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var inputText: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isSendButtonDisabled: Swift.Bool? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ChatInputTextFieldScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var chatButtonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var chatButtonActionAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var inputTextAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak open var chatInputDelegate: AdmiralUIKit.ChatInputViewDelegate?
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func setText(_ text: Swift.String?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setState(_ state: AdmiralUIKit.TextInputState, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setActionState(_ state: AdmiralUIKit.ChatInputMessageAction, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setSeparator(hidden: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.ChatInputView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textViewDidChange(_ textView: UIKit.UITextView)
}
@_hasMissingDesignatedInitializers public class BannerSwitchPresenter : AdmiralUIKit.BannerPresenterProtocol {
  @objc deinit
  public func show(banner: UIKit.UIView, config: AdmiralUIKit.BannerNotification.Config)
}
public struct BigInformerScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelTextColors: AdmiralUIKit.InformerParameters<AdmiralTheme.AColor>
  public var descriptionLabelTextColors: AdmiralUIKit.InformerParameters<AdmiralTheme.AColor>
  public var linkLabelTextColors: AdmiralUIKit.InformerParameters<AdmiralTheme.AColor>
  public var wrapViewBackgroundColors: AdmiralUIKit.InformerParameters<AdmiralTheme.AColor>
  public var backgroundColors: AdmiralUIKit.InformerParameters<AdmiralTheme.AColor>
  public var titleLabelFont: AdmiralTheme.AFont
  public var descriptionLabelFont: AdmiralTheme.AFont
  public var linkLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct InformerParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, isEnabled: Swift.Bool, style: AdmiralUIKit.InformerStyle)
  public func parameter(isEnabled: Swift.Bool, style: AdmiralUIKit.InformerStyle) -> P?
}
public struct TextViewScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var errorColor: AdmiralTheme.AColor
  public var disabledColor: AdmiralTheme.AColor
  public var underlineColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralTheme.AColor
  public var nameFont: AdmiralTheme.AFont
  public var textFieldFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public var informerFont: AdmiralTheme.AFont
  public var nameLabelMinFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class DoubleSlider : UIKit.UIControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var lowerValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var upperValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var minimumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var maximumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.SliderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var loweThubmImageAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var upperThumbImageViewAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progressViewAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public func setValue(_ value: Swift.Float, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func setValue(upperValue: Swift.Float, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.DoubleSlider {
  @_Concurrency.MainActor(unsafe) @objc override final public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override final public func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override final public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func cancelTracking(with event: UIKit.UIEvent?)
}
public struct ToastViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleTextColor: AdmiralUIKit.ToastViewParameters<AdmiralTheme.AColor>
  public var closeTintColor: AdmiralUIKit.ToastViewParameters<AdmiralTheme.AColor>
  public var closeTitleColor: AdmiralUIKit.ToastViewParameters<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralUIKit.ToastViewParameters<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.ToastImageParameters<AdmiralTheme.AColor>
  public var titleTextFont: AdmiralTheme.AFont
  public var closeTitleFont: AdmiralTheme.AFont
  public var countDownTimerViewScheme: AdmiralUIKit.CountDownTimerViewScheme
  public var primaryLinkScheme: AdmiralUIKit.TagControlCustomScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ToastViewParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, isEnabled: Swift.Bool, type: AdmiralUIKit.ToastViewType)
  public func parameter(isEnabled: Swift.Bool, type: AdmiralUIKit.ToastViewType) -> P?
}
public struct ToastImageParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, isEnabled: Swift.Bool, type: AdmiralUIKit.ToastImageType)
  public func parameter(isEnabled: Swift.Bool, type: AdmiralUIKit.ToastImageType) -> P?
}
@objc public protocol InputRangeTextFieldDelegate {
  @objc optional func inputRangeTextFieldSliderValue(_ slider: AdmiralUIKit.InputRangeTextField) -> Swift.Float
  @objc optional func inputRangeTextFieldSliderValueDidChange(_ slider: AdmiralUIKit.InputRangeTextField) -> Swift.String?
  @objc optional func inputRangeTextFieldSliderMinBorderDidChange(_ slider: AdmiralUIKit.InputRangeTextField) -> Swift.String?
  @objc optional func inputRangeTextFieldSliderMaxBorderDidChange(_ slider: AdmiralUIKit.InputRangeTextField) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InputRangeTextField : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.InputRangeTextFieldDelegate?
  @_Concurrency.MainActor(unsafe) public var state: AdmiralUIKit.TextInputState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maximumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfSimbolsAfterComma: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var infoNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var name: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var info: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var inputTextField: UIKit.UITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var trailingView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leadingText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.InputRangeTextFieldScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setState(_ state: AdmiralUIKit.TextInputState, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setAccessibilityidentifiers(textFieldId: Swift.String? = nil, sliderThubmImageId: Swift.String? = nil, sliderProgressViewId: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.InputRangeTextField : UIKit.UITextFieldDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func textFieldDidChange(_ textField: AdmiralUIKit.TextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
public struct CheckBoxListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var checkBoxTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var checkBoxScheme: AdmiralUIKit.CheckTextControlScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var shouldAnimateHighlighting: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var animationDuration: Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func setBackgroundLayerColor(_ color: UIKit.UIColor?)
  @_Concurrency.MainActor(unsafe) open func setBackgroundColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setBorderColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setAttributeTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setCornerRadius(_ radius: CoreFoundation.CGFloat, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setBorderWidth(_ width: CoreFoundation.CGFloat, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setShadowOpacity(_ opacity: CoreFoundation.CGFloat, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setShadowRadius(_ radius: CoreFoundation.CGFloat, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setShadowOffset(_ offset: CoreFoundation.CGSize, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setShadowPath(_ path: CoreGraphics.CGPath, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setTintColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func setMaskedCorners(corners: QuartzCore.CACornerMask, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func backgroundColor(for state: UIKit.UIControl.State) -> UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) open func shadowColor(for state: UIKit.UIControl.State) -> UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) open func borderColor(for state: UIKit.UIControl.State) -> UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) open func attributeTitleColor(for state: UIKit.UIControl.State) -> UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) open func tintColor(for states: UIKit.UIControl.State) -> UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open func cornerRadius(for state: UIKit.UIControl.State) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open func borderWidth(for state: UIKit.UIControl.State) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open func shadowOpacity(for state: UIKit.UIControl.State) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open func shadowRadius(for state: UIKit.UIControl.State) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open func shadowOffset(for state: UIKit.UIControl.State) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open func shadowPath(for state: UIKit.UIControl.State) -> CoreGraphics.CGPath?
  @_Concurrency.MainActor(unsafe) open func maskedCorners(for state: UIKit.UIControl.State) -> QuartzCore.CACornerMask
  @objc deinit
}
public struct HeaderButtonWithArrowScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelFont: AdmiralTheme.AFont
  public var imageColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct InfoAgreementViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var checkBoxTextButtonViewTheme: AdmiralUIKit.CheckBoxTextButtonViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ActionBarViewScheme : AdmiralTheme.AppThemeScheme {
  public init()
  public init(theme: AdmiralTheme.AppTheme)
}
public struct AlertViewControllerScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var defaultAlertViewCustomScheme: AdmiralUIKit.DefaultAlertViewCustomScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DropDownHeader : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dropDownHeaderType: AdmiralUIKit.DropDownHeaderType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var headerStyle: AdmiralUIKit.HeaderStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.DropDownHeaderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, dropDownHeaderType: AdmiralUIKit.DropDownHeaderType = .down, headerStyle: AdmiralUIKit.HeaderStyle = .title)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TitleHeader : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textAligment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var headerStyle: AdmiralUIKit.HeaderStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TitleHeaderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, textAligment: UIKit.NSTextAlignment = .left, headerStyle: AdmiralUIKit.HeaderStyle = .title)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct BottomSheetPresentationControllerCustomTheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CheckControlScheme {
  public var normal: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var error: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CalendarHorizontalViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var collectionViewBackgroundColor: AdmiralTheme.AColor
  public var calendarHorizontalViewCellScheme: AdmiralUIKit.CalendarHorizontalViewCellScheme
  public var calendarHeaderViewScheme: AdmiralUIKit.CalendarHeaderViewScheme
  public var calendarHorizontalHeaderViewScheme: AdmiralUIKit.CalendarHorizontalHeaderViewScheme
  public var monthYearPickerViewScheme: AdmiralUIKit.MonthYearPickerViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GhostButton : AdmiralUIKit.CustomButton, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) open var scheme: AdmiralUIKit.GhostButtonCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct SecondaryButtonCustomScheme {
  public var normalTextColor: AdmiralTheme.AColor
  public var hightlightedTextColor: AdmiralTheme.AColor
  public var disabledTextColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public var borderNormalColor: AdmiralTheme.AColor
  public var borderHightlightedColor: AdmiralTheme.AColor
  public var borderDisabledColor: AdmiralTheme.AColor
  public var titleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public protocol BottomSheetHeaderDelegate : AnyObject {
  func didTapRightButtonItem(sender: UIKit.UIButton)
}
extension UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) public func setDynamicFont(font: UIKit.UIFont, textStyle: UIKit.UIFont.TextStyle?, maxFontScaleDelta: CoreFoundation.CGFloat = 3.0, adjustsFontForContentSize: Swift.Bool = true)
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public func setDynamicFont(font: UIKit.UIFont, textStyle: UIKit.UIFont.TextStyle?, maxFontScaleDelta: CoreFoundation.CGFloat = 3.0, adjustsFontForContentSize: Swift.Bool = true)
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func setDynamicFont(font: UIKit.UIFont, textStyle: UIKit.UIFont.TextStyle?, maxFontScaleDelta: CoreFoundation.CGFloat = 3.0, adjustsFontForContentSize: Swift.Bool = true)
}
public protocol AccessibilitySupport {
  var adjustsFontForContentSizeCategory: Swift.Bool { get set }
}
public enum BadgeStyle : Swift.Int {
  case natural
  case `default`
  case additional
  case success
  case error
  case attention
  case clear
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BadgeState : Swift.Int {
  case normal
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class Badge : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) open var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var style: AdmiralUIKit.BadgeStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var insets: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var minSize: CoreFoundation.CGSize? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SubtitleTitleHeader : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var headerStyle: AdmiralUIKit.HeaderStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SubtitleTitleHeaderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, subtitle: Swift.String?, headerStyle: AdmiralUIKit.HeaderStyle = .title)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ButtonDropDownScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var ghostButtonScheme: AdmiralUIKit.HeaderButtonWithArrowScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum LayoutGrid {
  public static let module: CoreFoundation.CGFloat
  public static let halfModule: CoreFoundation.CGFloat
  public static let doubleModule: CoreFoundation.CGFloat
  public static let tripleModule: CoreFoundation.CGFloat
  public static let quadrupleModule: CoreFoundation.CGFloat
}
public struct TagControlCustomScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var textColor: AdmiralUIKit.TagParameters<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralUIKit.TagParameters<AdmiralTheme.AColor>
  public var viewTintColor: AdmiralUIKit.TagParameters<AdmiralTheme.AColor>
  public var linkTitleFont: AdmiralTheme.AFont
  public var linkTitleFontAdidtional: AdmiralTheme.AFont
  public var leadingTrailingViewsAlpha: AdmiralUIKit.ControlParameter<CoreFoundation.CGFloat>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TagParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, for state: UIKit.UIControl.State, style: AdmiralUIKit.TagStyle)
  public func parameter(for state: UIKit.UIControl.State, style: AdmiralUIKit.TagStyle) -> P?
}
public struct ArrowSegmentSliderCustomTheme : AdmiralTheme.AppThemeScheme {
  public var imageTintColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public protocol TimePickerDelegate : AnyObject {
  func timePickerDateDidChange(timePicker: AdmiralUIKit.TimePicker, currentTime: Foundation.Date)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TimePicker : UIKit.UIControl, AdmiralTheme.AnyAppThemable, UIKit.UIKeyInput, UIKit.UITextInputTraits {
  @_Concurrency.MainActor(unsafe) @objc override final public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override final public func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.TimePickerCustomTheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var currentTime: Foundation.Date {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var minuteInterval: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isEditable: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak final public var delegate: AdmiralUIKit.TimePickerDelegate?
  @_Concurrency.MainActor(unsafe) @objc final public var hasText: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var keyboardType: UIKit.UIKeyboardType
  @_Concurrency.MainActor(unsafe) @objc override final public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc final public func insertText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc final public func deleteBackward()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ImageNameListView : AdmiralUIKit.BaseListView, AdmiralUIKit.LeadingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ImageNameListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.BottomSheetPresentable where Self : UIKit.UIViewController {
  public var topOffset: CoreFoundation.CGFloat {
    get
  }
  public var shortFormHeight: AdmiralUIKit.BottomSheetHeight {
    get
  }
  public var longFormHeight: AdmiralUIKit.BottomSheetHeight {
    get
  }
  public var cornerRadius: CoreFoundation.CGFloat {
    get
  }
  public var springDamping: CoreFoundation.CGFloat {
    get
  }
  public var transitionDuration: Swift.Double {
    get
  }
  public var transitionAnimationOptions: UIKit.UIView.AnimationOptions {
    get
  }
  public var scrollIndicatorInsets: UIKit.UIEdgeInsets {
    get
  }
  public var anchorModalToLongForm: Swift.Bool {
    get
  }
  public var allowsDragToDismiss: Swift.Bool {
    get
  }
  public var allowsTapToDismiss: Swift.Bool {
    get
  }
  public var allowsExtendedPanScrolling: Swift.Bool {
    get
  }
  public var isUserInteractionEnabled: Swift.Bool {
    get
  }
  public func shouldRespond(to panModalGestureRecognizer: UIKit.UIPanGestureRecognizer) -> Swift.Bool
  public func willRespond(to panModalGestureRecognizer: UIKit.UIPanGestureRecognizer)
  public func shouldTransition(to state: AdmiralUIKit.BottomSheetPresentationState) -> Swift.Bool
  public func shouldPrioritize(panModalGestureRecognizer: UIKit.UIPanGestureRecognizer) -> Swift.Bool
  public func willTransition(to state: AdmiralUIKit.BottomSheetPresentationState)
  public func panModalWillDismiss()
  public func panModalDidDismiss()
}
public enum ParagaphImageType {
  case point
  case check
  case custom(UIKit.UIImage)
}
public struct TimePickerCustomTheme : AdmiralTheme.AppThemeScheme {
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TimePickerTextParameter<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, for state: AdmiralUIKit.TimePickerStates, controlState: UIKit.UIControl.State)
  public func parameter(for state: AdmiralUIKit.TimePickerStates, controlState: UIKit.UIControl.State) -> P?
}
public struct ProgressViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ProgressViewSchemeParameters<AdmiralTheme.AColor>
  public var iconColor: AdmiralUIKit.ProgressViewSchemeParameters<AdmiralTheme.AColor>
  public var circularTrackViewScheme: AdmiralUIKit.CircularTrackViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ProgressViewSchemeParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, style: AdmiralUIKit.ProgressViewStyle)
  public func parameter(style: AdmiralUIKit.ProgressViewStyle) -> P?
}
public struct DoubleInputRangeTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var sliderScheme: AdmiralUIKit.SliderScheme
  public var textFieldScheme: AdmiralUIKit.TextFieldScheme
  public var valueFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum ChatBubbleStatusStyle : Swift.Int {
  case `default`
  case light
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ChatBubbleStatusView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var chatStatus: AdmiralUIKit.ChatStatus? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var chatDirection: AdmiralUIKit.ChatDirection? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var style: AdmiralUIKit.ChatBubbleStatusStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var timeTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ChatBubbleStatusViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct SmallInformerScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelTextColors: AdmiralUIKit.InformerParameters<AdmiralTheme.AColor>
  public var backgroundColors: AdmiralUIKit.InformerParameters<AdmiralTheme.AColor>
  public var wrapViewBackgroundColors: AdmiralUIKit.InformerParameters<AdmiralTheme.AColor>
  public var titleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public class ActionItemBarAction {
  final public let image: UIKit.UIImage
  public var imageStyle: AdmiralUIKit.ActionBarItemImageStyle?
  public var imageTintColor: UIKit.UIColor?
  public var backgroundColor: UIKit.UIColor?
  final public let style: AdmiralUIKit.ActionBarItemStyle
  final public let handler: () -> Swift.Void
  public var text: Swift.String?
  public var accesibilityId: Swift.String?
  public init(image: UIKit.UIImage, imageStyle: AdmiralUIKit.ActionBarItemImageStyle, style: AdmiralUIKit.ActionBarItemStyle = .default, text: Swift.String? = nil, accesibilityId: Swift.String? = nil, handler: @escaping () -> Swift.Void)
  public init(image: UIKit.UIImage, imageTintColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, style: AdmiralUIKit.ActionBarItemStyle = .default, text: Swift.String? = nil, accesibilityId: Swift.String? = nil, handler: @escaping () -> Swift.Void)
  @objc deinit
}
public struct CalendarViewCellColorScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColors: AdmiralUIKit.CalendarParameters<AdmiralTheme.AColor>
  public var textColors: AdmiralUIKit.CalendarParameters<AdmiralTheme.AColor>
  public var selectedBackgroundColors: AdmiralUIKit.CalendarParameters<AdmiralTheme.AColor>
  public var borderColors: AdmiralUIKit.CalendarParameters<AdmiralTheme.AColor>
  public var titleLabelFont: AdmiralTheme.AFont
  public var pointBackgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CalendarParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, state: AdmiralUIKit.CalendarCellState)
  public func parameter(for state: AdmiralUIKit.CalendarCellState) -> P?
}
public struct UploadImageItem {
  public var image: UIKit.UIImage?
  public var style: AdmiralUIKit.UploadImageViewStyle
  public var state: AdmiralUIKit.UploadImageViewState?
  public var accesibilityId: Swift.String?
  public init(image: UIKit.UIImage? = nil, style: AdmiralUIKit.UploadImageViewStyle = .default, state: AdmiralUIKit.UploadImageViewState? = .default, accesibilityId: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SwitchListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var isControlSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var didSelect: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SwitchListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var customSwitchAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class OTPTextField : AdmiralUIKit.TextFieldInput, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var state: AdmiralUIKit.TextInputState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var info: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var infoNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.OTPTextFieldScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setState(_ state: AdmiralUIKit.TextInputState, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
infix operator !! : NilCoalescingPrecedence
public func !! <Value>(value: Value?, panic: @autoclosure () -> Swift.Never) -> Value
public enum DropDownHeaderType {
  case up
  case down
  case custom(UIKit.UIImage)
}
public struct StatusHistoryTitleViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleFont: AdmiralTheme.AFont
  public var titleColor: AdmiralTheme.AColor
  public var subtitleFont: AdmiralTheme.AFont
  public var subtitleColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct PinCodeNumberCustomScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var textFont: UIKit.UIFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CurrencyViewScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var imageTintColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct InformerTab {
  public let title: Swift.String?
  public let subtitle: Swift.String?
  public var accesibilityId: Swift.String?
  public init(title: Swift.String?, subtitle: Swift.String?, accesibilityId: Swift.String? = nil)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InformerTabSegmentedControl : AdmiralUIKit.TabSegmentedControl, AdmiralUIKit.SegmentControlContainerContent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.InformerSegmentedScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(items: [AdmiralUIKit.InformerTab])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setItems(_ viewModels: [AdmiralUIKit.InformerTab])
  @_Concurrency.MainActor(unsafe) public func insertItem(_ item: AdmiralUIKit.InformerTab, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeItem(forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setEnabled(_ isEnabled: Swift.Bool, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setItem(_ item: AdmiralUIKit.InformerTab, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func viewModelForSegment(at segment: Swift.Int) -> AdmiralUIKit.InformerTab?
  @_Concurrency.MainActor(unsafe) public func removeAllItems()
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct IconTab {
  public init(title: Swift.String, image: UIKit.UIImage, accesibilityId: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class IconTabsSegmentControl : UIKit.UIControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var selectedSegmentIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfSegments: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(items: [AdmiralUIKit.IconTab])
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) public func setSelectedSegmentIndex(_ index: Swift.Int, animated: Swift.Bool)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum ActionBarViewStyle {
  case `default`
  case secondary
  public static func == (a: AdmiralUIKit.ActionBarViewStyle, b: AdmiralUIKit.ActionBarViewStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ActivityIndicator : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  public enum Style {
    case `default`
    case contrast
    public static func == (a: AdmiralUIKit.ActivityIndicator.Style, b: AdmiralUIKit.ActivityIndicator.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Size : Swift.Int {
    case small
    case medium
    case large
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open var style: AdmiralUIKit.ActivityIndicator.Style {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var size: AdmiralUIKit.ActivityIndicator.Size {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ActivityIndicatorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.ActivityIndicator {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
}
extension AdmiralUIKit.ActivityIndicator {
  @_Concurrency.MainActor(unsafe) public func startAnimating()
  @_Concurrency.MainActor(unsafe) public func stopAnimating()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseListView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.String {
  public var nilIfEmpty: Swift.String? {
    get
  }
}
public protocol ErrorViewDelegate : AnyObject {
  func didTapButton(_ errorView: AdmiralUIKit.ErrorView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ErrorView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.ErrorViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isLoading: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var ghostButtonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var delegate: AdmiralUIKit.ErrorViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ChatBubbleViewScheme : AdmiralTheme.AppThemeScheme {
  public var textFont: AdmiralTheme.AFont
  public var textColor: AdmiralUIKit.ChatBubbleViewParameters<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralUIKit.ChatBubbleViewParameters<AdmiralTheme.AColor>
  public var errorImageColor: AdmiralTheme.AColor
  public var nameTextFont: AdmiralTheme.AFont
  public var nameTextColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ChatBubbleViewParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, style: AdmiralUIKit.ChatDirection)
  public func parameter(for style: AdmiralUIKit.ChatDirection) -> P?
}
extension UIKit.UIView {
  public struct DirectionalEdgeInsets {
    public let top: CoreFoundation.CGFloat
    public let bottom: CoreFoundation.CGFloat
    public let leading: CoreFoundation.CGFloat
    public let trailing: CoreFoundation.CGFloat
    public static let zero: UIKit.UIView.DirectionalEdgeInsets
    public init(top: CoreFoundation.CGFloat = 0, bottom: CoreFoundation.CGFloat = 0, leading: CoreFoundation.CGFloat = 0, trailing: CoreFoundation.CGFloat = 0)
  }
  public struct LayoutDirection : Swift.OptionSet {
    public let rawValue: Swift.Int
    public static let top: UIKit.UIView.LayoutDirection
    public static let bottom: UIKit.UIView.LayoutDirection
    public static let leading: UIKit.UIView.LayoutDirection
    public static let trailing: UIKit.UIView.LayoutDirection
    public static let all: [UIKit.UIView.LayoutDirection]
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = UIKit.UIView.LayoutDirection
    public typealias Element = UIKit.UIView.LayoutDirection
    public typealias RawValue = Swift.Int
  }
  @_Concurrency.MainActor(unsafe) public func fillView(view: UIKit.UIView, padding: UIKit.UIView.DirectionalEdgeInsets = .zero, ignore: UIKit.UIView.LayoutDirection = [], priority: UIKit.UILayoutPriority = .required) -> [UIKit.NSLayoutConstraint]
  @_Concurrency.MainActor(unsafe) public func fillGuide(guide: UIKit.UILayoutGuide, padding: UIKit.UIView.DirectionalEdgeInsets = .zero, ignore: UIKit.UIView.LayoutDirection = [], priority: UIKit.UILayoutPriority = .required) -> [UIKit.NSLayoutConstraint]
}
extension Swift.Array where Element == UIKit.UIView {
  public func addToSuperview(_ superView: UIKit.UIView, translatesAutoresizingMaskIntoConstraints: Swift.Bool = false)
}
extension Swift.Array where Element == UIKit.NSLayoutConstraint {
  public func activate()
  public func deactivate()
}
@_Concurrency.MainActor(unsafe) public class DoubleTextField<T1, T2> : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport where T1 : AdmiralUIKit.TextField, T2 : AdmiralUIKit.TextField {
  public enum Alignment {
    case fixedFirst(first: CoreFoundation.CGFloat)
    case fixedSecond(second: CoreFoundation.CGFloat)
    case ratio(ration: CoreFoundation.CGFloat)
  }
  @_Concurrency.MainActor(unsafe) public var state: AdmiralUIKit.TextInputState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var info: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let firstTextField: T1
  @_Concurrency.MainActor(unsafe) final public let secondTextField: T2
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.DoubleTextFieldScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var alignment: AdmiralUIKit.DoubleTextField<T1, T2>.Alignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(firstTextField: T1, secondTextField: T2, alignment: AdmiralUIKit.DoubleTextField<T1, T2>.Alignment)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) public func setState(_ state: AdmiralUIKit.TextInputState, animated: Swift.Bool)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class PinCodeTextView : UIKit.UIControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) @objc override final public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var accessibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.PinCodeTextViewCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public protocol TitleButtonDropDownDelegate : AnyObject {
  func tapTitleButtonDropDownButton(_ button: UIKit.UIButton)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TitleButtonDropDown : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.TitleButtonDropDownDelegate?
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dropDownHeaderType: AdmiralUIKit.DropDownHeaderType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, buttonTitle: Swift.String?, dropDownHeaderType: AdmiralUIKit.DropDownHeaderType?)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TextView : AdmiralUIKit.TextViewInput, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var state: AdmiralUIKit.TextInputState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isSeparatorHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var name: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var info: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var infoNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trailingView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trailingViewStyle: AdmiralUIKit.TextInputTrailingViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TextFieldScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func setText(_ text: Swift.String?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setState(_ state: AdmiralUIKit.TextInputState, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setSeparator(hidden: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MessageInformer : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) open var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var descriptionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var subtitleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleLabelNumerOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var descriptionLabelNumerOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var subtitleLabelNumerOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var descriptionImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.MessageInformerScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setArrowPivotLeadingAnchorPoint(constant: CoreFoundation.CGFloat, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct TableListCellScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum CurrencyCellType {
  case arrowUp
  case arrowDown
  case empty
  public static func == (a: AdmiralUIKit.CurrencyCellType, b: AdmiralUIKit.CurrencyCellType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class CurrencyView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var currencyText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buyText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var sellText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var sellCellType: AdmiralUIKit.CurrencyCellType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buyCellType: AdmiralUIKit.CurrencyCellType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.CurrencyViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect = .zero)
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PrimaryLinkControl : AdmiralUIKit.BaseLinkControl {
  @_Concurrency.MainActor(unsafe) override open func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct TitleMoreDetailTextMessageListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var moreLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var detaileTitleLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var detaileMoreLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var infoImageViewTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var messageTitleLabelTitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var messageViewBackgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public var subtitleFont: AdmiralTheme.AFont
  public var moreFont: AdmiralTheme.AFont
  public var detaileTitleFont: AdmiralTheme.AFont
  public var detaileMoreFont: AdmiralTheme.AFont
  public var tagViewFont: AdmiralTheme.AFont
  public var messageTitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func registerCell(_ viewType: Swift.AnyClass, reuseIdentifier: Swift.String? = nil, nibName: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func registerSupplementary(_ viewType: Swift.AnyClass, reuseIdentifier: Swift.String? = nil, nibName: Swift.String? = nil)
}
public enum CheckControlState : Swift.Int {
  case normal
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CheckControl : UIKit.UIControl, AdmiralTheme.AppThemeable {
  @_Concurrency.MainActor(unsafe) public var checkState: AdmiralUIKit.CheckControlState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.CheckControlScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum InformerStyle : Swift.Int {
  case `default`
  case success
  case attention
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol BigInformerDelegate : AnyObject {
  func didTapLinkLabel(_ bigInformer: AdmiralUIKit.BigInformer)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BigInformer : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) weak open var delegate: AdmiralUIKit.BigInformerDelegate?
  @_Concurrency.MainActor(unsafe) open var titleFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var descriptionFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var descriptionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var linkText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleLabelNumerOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var descriptionLabelNumerOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var linkLabelNumerOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var style: AdmiralUIKit.InformerStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.BigInformerScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setArrowPivotLeadingAnchorPoint(constant: CoreFoundation.CGFloat, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PinCodeInput : AdmiralUIKit.CodeInputControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.PinCodeInputScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct DefaultAlertViewCustomScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var defaultTitleFont: AdmiralTheme.AFont
  public var defaultMessageFont: AdmiralTheme.AFont
  public var titleFont: AdmiralUIKit.DefaultAlertViewCustomSchemeParameters<AdmiralTheme.AFont, AdmiralUIKit.AlertTitleFontStyle>
  public var messageFont: AdmiralUIKit.DefaultAlertViewCustomSchemeParameters<AdmiralTheme.AFont, AdmiralUIKit.AlertMessageFontStyle>
  public var titleColor: AdmiralUIKit.DefaultAlertViewCustomSchemeParameters<AdmiralTheme.AColor, AdmiralUIKit.AlertColorStyle>
  public var messageColor: AdmiralUIKit.DefaultAlertViewCustomSchemeParameters<AdmiralTheme.AColor, AdmiralUIKit.AlertColorStyle>
  public var primaryButtonScheme: AdmiralUIKit.PrimaryButtonCustomScheme
  public var ghostButtonScheme: AdmiralUIKit.GhostButtonCustomScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct DefaultAlertViewCustomSchemeParameters<P, S> where S : Swift.Hashable, S : Swift.RawRepresentable, S.RawValue == Swift.Int {
}
public protocol CenterListViewComponent : UIKit.UIView {
  var isEnabled: Swift.Bool { get set }
  var isHighlighted: Swift.Bool { get set }
  var isHighlightedEnabled: Swift.Bool { get set }
}
public struct SubtitleTitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public var subtitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CurcleIconListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct MonthYearPickerViewScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TwoTitleGhostButton : UIKit.UIControl, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var leftButtonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var rightButtonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var shouldAnimateHighlighting: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var animationDuration: Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) open var scheme: AdmiralUIKit.TwoTitleGhostButtonScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) open func setCornerRadius(_ radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ImageBackgroundListView : AdmiralUIKit.BaseListView, AdmiralUIKit.LeadingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ImageBackgroundListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ActionItemBarDefaultControlScheme : AdmiralTheme.AppThemeScheme {
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ActionBarControlSchemeParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, style: AdmiralUIKit.ActionBarItemImageStyle, control: UIKit.UIControl.State)
  public func parameter(for style: AdmiralUIKit.ActionBarItemImageStyle, control: UIKit.UIControl.State) -> P?
}
public struct BottomSheetHeaderTitleViewScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var textColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct IconTabsItemScheme : AdmiralTheme.AppThemeScheme {
  public var titleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var contentViewBackGroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralTheme.AColor
  public var titleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TitleLargeSubtitleListView : AdmiralUIKit.BaseListView, AdmiralUIKit.CenterListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var additionalTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TitleLargeSubtitleScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BottomSheetPresentationDelegate : ObjectiveC.NSObject {
  public static var `default`: AdmiralUIKit.BottomSheetPresentationDelegate
  @objc override dynamic public init()
  @objc deinit
}
extension AdmiralUIKit.BottomSheetPresentationDelegate : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
}
public struct RadioButtonListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var radioButtonViewTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var radioButtonScheme: AdmiralUIKit.CheckTextControlScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CalendarFooterViewColorScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var separatorViewBackgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TitleSubtitleListView : AdmiralUIKit.BaseListView, AdmiralUIKit.CenterListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TitleSubtitleListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum ToolbarItemType : Swift.String {
  case `default`
  case error
  case success
  case attention
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ToolbarItem {
  public let title: Swift.String
  public let image: UIKit.UIImage
  public let type: AdmiralUIKit.ToolbarItemType?
  public let titleColor: UIKit.UIColor?
  public let imageTintColor: UIKit.UIColor?
  public let accesibilityId: Swift.String?
  public init(title: Swift.String, image: UIKit.UIImage, type: AdmiralUIKit.ToolbarItemType = .default, accesibilityId: Swift.String? = nil)
  public init(title: Swift.String, image: UIKit.UIImage, titleColor: UIKit.UIColor?, imageTintColor: UIKit.UIColor?, accesibilityId: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TextMessageListView : AdmiralUIKit.BaseListView, AdmiralUIKit.CenterListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TextMessageListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct OutlineSliderTabItem {
  public let title: Swift.String
  public var badgeStyle: AdmiralUIKit.BadgeStyle?
  public var accesibilityId: Swift.String?
  public init(title: Swift.String, badgeStyle: AdmiralUIKit.BadgeStyle?, accesibilityId: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OutlineSliderTabSegmentedControl : AdmiralUIKit.BaseOutlineSliderSegmentedControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.OutlineSliderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(titles: [Swift.String?])
  @_Concurrency.MainActor(unsafe) public init(items: [AdmiralUIKit.OutlineSliderTabItem])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setTitles(_ titles: [Swift.String?])
  @_Concurrency.MainActor(unsafe) public func setItems(_ items: [AdmiralUIKit.OutlineSliderTabItem])
  @_Concurrency.MainActor(unsafe) public func insertTitle(_ title: Swift.String?, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeTitle(forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setTitle(_ title: Swift.String?, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setEnabled(_ isEnabled: Swift.Bool, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func titleForSegment(at segment: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) public func removeAllTitles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class Slider : UIKit.UIControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var value: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var minimumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var maximumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public var thumbImageAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progressViewAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.SliderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public func setValue(_ value: Swift.Float, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.Slider {
  @_Concurrency.MainActor(unsafe) @objc override final public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override final public func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override final public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func cancelTracking(with event: UIKit.UIEvent?)
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class CheckTextControl<C> : UIKit.UIControl, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport where C : AdmiralUIKit.CheckControl {
  @_Concurrency.MainActor(unsafe) final public var checkState: AdmiralUIKit.CheckControlState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var numberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.CheckTextControlScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var checkControlAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(checkControl: C)
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BannerStackPresenter : AdmiralUIKit.BannerPresenterProtocol {
  @objc deinit
  public func show(banner: UIKit.UIView, config: AdmiralUIKit.BannerNotification.Config)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PinButton : AdmiralUIKit.CustomButton, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.PinButtonScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func insertBackgroundLayer()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ActionCellView<T> : UIKit.UIView, AdmiralTheme.AnyAppThemable, UIKit.UIGestureRecognizerDelegate where T : AdmiralUIKit.ListViewCell {
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let cellView: T
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ActionCellViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(cellView: T, style: AdmiralUIKit.ActionBarViewStyle = .default)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) public func appendAction(_ action: AdmiralUIKit.ActionItemBarAction)
  @_Concurrency.MainActor(unsafe) public func insertAction(_ action: AdmiralUIKit.ActionItemBarAction, index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeAction(index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum ToolbarItemStyle {
  case horizontal
  case vertical
  public static func == (a: AdmiralUIKit.ToolbarItemStyle, b: AdmiralUIKit.ToolbarItemStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ToolbarSelectionStyle {
  case highlighted
  case selected
  public static func == (a: AdmiralUIKit.ToolbarSelectionStyle, b: AdmiralUIKit.ToolbarSelectionStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ToolbarDelegate : AnyObject {
  func didSelectItem(at index: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class Toolbar : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) weak open var delegate: AdmiralUIKit.ToolbarDelegate?
  @_Concurrency.MainActor(unsafe) open var scheme: AdmiralUIKit.ToolbarColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var style: AdmiralUIKit.ToolbarItemStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectedItem: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var itemWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectionStyle: AdmiralUIKit.ToolbarSelectionStyle
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) open func setItems(items: [AdmiralUIKit.ToolbarItem])
  @_Concurrency.MainActor(unsafe) open func setCornerRadius(_ radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) open func setToolbarSpacing(spacing: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) open func setToolbarItemWidth(width: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) open func setItemIsEnabled(at index: Swift.Int, isEnabled: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ArrowListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ArrowWithButtonHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var defaultTitleFont: AdmiralTheme.AFont
  public var titleFont: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AFont>
  public var textColor: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralTheme.AColor
  public var ghostButtonScheme: AdmiralUIKit.GhostButtonCustomScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public protocol LinkViewHeaderDelegate : AnyObject {
  func tapLinkViewHeaderButton(_ button: UIKit.UIButton)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LinkViewHeader : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.LinkViewHeaderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let headerStyle: AdmiralUIKit.HeaderStyle
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct PrimaryButtonCustomScheme : AdmiralTheme.AppThemeScheme {
  public var normalTextColor: AdmiralTheme.AColor
  public var disabledTextColor: AdmiralTheme.AColor
  public var backgroundLayerColor: AdmiralTheme.AColor
  public var backgroundNormalColor: AdmiralTheme.AColor
  public var backgroundHightlightedColor: AdmiralTheme.AColor
  public var backgroundDisabledColor: AdmiralTheme.AColor
  public var titleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct SwitchListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum TextOperationViewStyle : Swift.Int {
  case success
  case error
  case `default`
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TextOperationView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var chatStatus: AdmiralUIKit.ChatStatus? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var chatDirection: AdmiralUIKit.ChatDirection {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var style: AdmiralUIKit.TextOperationViewStyle? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var titleName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var discriptionName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var timeName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var chatBubbleTime: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.TextOperationViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum ActionBarItemImageStyle : Swift.Int {
  case accent
  case primary
  case error
  case success
  case attention
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct PinCodeNumber {
  public init(state: AdmiralUIKit.PinCodeNumberViewState, accesibilityId: Swift.String? = nil)
}
public struct PinCodeNumberAction {
}
public enum PinCodeNumberViewState {
  case number(Swift.Int)
  case rightAction(AdmiralUIKit.PinCodeNumberAction?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class PinCodeNumberView : UIKit.UIControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) @objc override final public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var accessibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.PinCodeNumberCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var viewState: AdmiralUIKit.PinCodeNumberViewState? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct PinCodeKeyboardCustomScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct UnderlineSliderScheme : AdmiralTheme.AppThemeScheme {
  public struct ItemScheme {
    public var titleFont: AdmiralUIKit.ControlParameter<AdmiralTheme.AFont>
    public var titleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  }
  public var itemScheme: AdmiralUIKit.UnderlineSliderScheme.ItemScheme
  public var thumbColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var badgeScheme: AdmiralUIKit.BadgeScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TableListCell<I, L, T> : UIKit.UITableViewCell, AdmiralTheme.AnyAppThemable where I : AdmiralTheme.AppThemeCompatible, I : AdmiralTheme.AppThemeable, I : AdmiralUIKit.LeadingListViewComponent, L : AdmiralTheme.AppThemeCompatible, L : AdmiralTheme.AppThemeable, L : AdmiralUIKit.CenterListViewComponent, T : AdmiralTheme.AppThemeCompatible, T : AdmiralTheme.AppThemeable, T : AdmiralUIKit.TralingListViewComponent {
  @_Concurrency.MainActor(unsafe) open var listCell: AdmiralUIKit.ListCell<I, L, T>? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var scheme: AdmiralUIKit.TableListCellScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TitleListView : AdmiralUIKit.BaseListView, AdmiralUIKit.CenterListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TitleListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct DoubleTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var first: AdmiralUIKit.TextFieldScheme
  public var second: AdmiralUIKit.TextFieldScheme
  public var errorColor: AdmiralTheme.AColor
  public var underlineColor: AdmiralTheme.AColor
  public var disabledColor: AdmiralTheme.AColor
  public var informerFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum ActionBarItemStyle : Swift.Equatable {
  case `default`
  case secondary
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdmiralUIKit.ActionBarItemStyle, b: AdmiralUIKit.ActionBarItemStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct CheckBoxTextButtonViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var checkTextControl: AdmiralUIKit.CheckTextControlScheme
  public var primaryLinkScheme: AdmiralUIKit.TagControlCustomScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct PinCodeTextViewCustomScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ParagraphScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var textColor: AdmiralUIKit.ParagraphViewParametrs<AdmiralTheme.AColor>
  public var leadingImageColor: AdmiralTheme.AColor
  public var titleFont: AdmiralUIKit.ParagraphViewParametrs<AdmiralTheme.AFont>
  public var defaultTitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ParagraphViewParametrs<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, for state: UIKit.UIControl.State, style: AdmiralUIKit.ParagraphStyle?)
  public func parameter(for state: UIKit.UIControl.State, style: AdmiralUIKit.ParagraphStyle?) -> P?
}
public struct ActionCellViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ShimmeringViewColorScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum ToastViewType : Swift.String {
  case `default`
  case success
  case additional
  case attention
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ToastImageType : Swift.String {
  case success
  case info
  case attention
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ToastView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var linkText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var type: AdmiralUIKit.ToastViewType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var timerDuration: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var imageType: AdmiralUIKit.ToastImageType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var imageColorType: AdmiralUIKit.ToastImageType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var linkAction: (() -> ())?
  @_Concurrency.MainActor(unsafe) open var closeAction: (() -> ())? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var closeTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var closeImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cardStatusStyle: AdmiralUIKit.CardStatusStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var closeButtonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ToastViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct SecondaryTitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var textColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct MapButtonScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var selectedBacgroundColor: AdmiralTheme.AColor
  public var highlightedBackgroundColor: AdmiralTheme.AColor
  public var disabledBacgroundColor: AdmiralTheme.AColor
  public var imageTintColor: AdmiralTheme.AColor
  public var shadowColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TitleWithArrowListViewScheme : AdmiralTheme.AppThemeScheme {
  public var viewBackgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var arrowImageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum SeparatorStyle {
  case long
  case short
  case empty
  public static func == (a: AdmiralUIKit.SeparatorStyle, b: AdmiralUIKit.SeparatorStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Separator : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var separatorStyle: AdmiralUIKit.SeparatorStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SeparatorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(separatorStyle: AdmiralUIKit.SeparatorStyle = .short)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ButtonWithArrowScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelFont: AdmiralTheme.AFont
  public var imageColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BankCardTextField : AdmiralUIKit.TextFieldInput, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var state: AdmiralUIKit.TextInputState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var info: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var infoNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trailingView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.BankCardTextFieldScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setState(_ state: AdmiralUIKit.TextInputState, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public protocol ZeroScreenViewDelegate : AnyObject {
  func didTapButton(_ zeroScreenView: AdmiralUIKit.ZeroScreenView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ZeroScreenView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ZeroScreenScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var primaryButtonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.ZeroScreenViewDelegate?
  @_Concurrency.MainActor(unsafe) public init(image: UIKit.UIImage? = nil, title: Swift.String? = nil, subTitle: Swift.String? = nil, buttonTitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct CheckTextControlScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var checkControlScheme: AdmiralUIKit.CheckControlScheme
  public var textFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct StandardSegmentedItem {
  public let title: Swift.String?
  public var accesibilityId: Swift.String?
  public init(title: Swift.String?, accesibilityId: Swift.String? = nil)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StandardSegmentedControl : AdmiralUIKit.PlainSegmentedControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) override public var selectedSegmentIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.StandardSegmentedScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(items: [AdmiralUIKit.StandardSegmentedItem?])
  @_Concurrency.MainActor(unsafe) convenience public init(titles: [Swift.String?])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setItems(_ items: [AdmiralUIKit.StandardSegmentedItem?])
  @_Concurrency.MainActor(unsafe) public func setTitles(_ titles: [Swift.String?])
  @_Concurrency.MainActor(unsafe) public func insertTitle(_ title: Swift.String?, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeTitle(forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setTitle(_ title: Swift.String?, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setEnabled(_ isEnabled: Swift.Bool, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func titleForSegment(at segment: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) public func removeAllTitles()
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc public protocol DoubleInputRangeTextFieldDelegate {
  @objc optional func inputRangeTextFieldSliderValue(_ slider: AdmiralUIKit.DoubleInputRangeTextField) -> Swift.Float
  @objc optional func inputRangeTextFieldSliderValueDidChange(_ slider: AdmiralUIKit.DoubleInputRangeTextField) -> Swift.String?
  @objc optional func inputRangeTextFieldSliderMinBorderDidChange(_ slider: AdmiralUIKit.DoubleInputRangeTextField) -> Swift.String?
  @objc optional func inputRangeTextFieldSliderMaxBorderDidChange(_ slider: AdmiralUIKit.DoubleInputRangeTextField) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DoubleInputRangeTextField : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.DoubleInputRangeTextFieldDelegate?
  @_Concurrency.MainActor(unsafe) public var state: AdmiralUIKit.TextInputState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var lowerValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var upperValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maximumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfSimbolsAfterComma: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leadingText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trailingText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var infoNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var name: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minValueText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxValueText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minTextPlaceholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxTextPlaceholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var info: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minInputTextField: UIKit.UITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var maxInputTextField: UIKit.UITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var trailingView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.DoubleInputRangeTextFieldScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setText(_ minValue: Swift.String?, _ maxValue: Swift.String?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setAccessibilityidentifiers(leftTextFieldId: Swift.String? = nil, rightTextFieldId: Swift.String? = nil, doubleSliderLowerImageId: Swift.String? = nil, doubleSliderUpperImageId: Swift.String? = nil, doubleSliderProgressViewId: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func setState(_ state: AdmiralUIKit.TextInputState, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.DoubleInputRangeTextField : UIKit.UITextFieldDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func textFieldDidChange(_ textField: AdmiralUIKit.TextField)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func rightFieldDidChange(_ textField: AdmiralUIKit.TextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
public struct BottomSheetHeaderTitleSubtitleViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelFont: AdmiralTheme.AFont
  public var subtitleLabelFont: AdmiralTheme.AFont
  public var titleTextColor: AdmiralTheme.AColor
  public var subtitleTextColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct SliderScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var thumbColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var thumbBorderColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct UploadImageViewScheme : AdmiralTheme.AppThemeScheme {
  public var chatBubbleColor: AdmiralTheme.AColor
  public var progressViewScheme: AdmiralUIKit.ProgressViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum MapButtonType {
  case plus
  case minus
  case location
  case custom(image: UIKit.UIImage)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MapButton : AdmiralUIKit.CustomButton, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var type: AdmiralUIKit.MapButtonType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.MapButtonScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func insertBackgroundLayer()
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct LinkViewHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var ghostScheme: AdmiralUIKit.GhostButtonCustomScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum UploadImageViewState {
  case `default`
  case loading
  case error
  public static func == (a: AdmiralUIKit.UploadImageViewState, b: AdmiralUIKit.UploadImageViewState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UploadImageViewStyle {
  case `default`
  case resized
  public static func == (a: AdmiralUIKit.UploadImageViewStyle, b: AdmiralUIKit.UploadImageViewStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UploadImageViewCornerStyle {
  case leftSide
  case rightSide
  case bottom
  case top
  case allSides
  case bottomLeft
  case bottomRight
  case topRight
  case topLeft
  case none
  public static func == (a: AdmiralUIKit.UploadImageViewCornerStyle, b: AdmiralUIKit.UploadImageViewCornerStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class UploadImageView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var state: AdmiralUIKit.UploadImageViewState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var style: AdmiralUIKit.UploadImageViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progressCircleStyle: AdmiralUIKit.ProgressViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var trackProgressStyle: AdmiralUIKit.ProgressViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.UploadImageViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var cornerStyle: AdmiralUIKit.UploadImageViewCornerStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect = .zero)
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InputNumber : UIKit.UIControl, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maximumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var stepValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.InputNumberScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var minusButtonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var plusButtonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func setValue(_ value: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
}
public struct CurrencyHeaderViewScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ButtonWithArrowListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var buttonTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var buttonBackgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var arrowImageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var buttonFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
extension Swift.String {
  public func timeToHours(format: Swift.String, isAMPM: Swift.Bool = false) -> Swift.String?
  public func timeToMinutes(format: Swift.String) -> Swift.String?
}
extension Swift.Array {
  public func chunks(_ chunkSize: Swift.Int) -> [[Element]]
}
public struct SeparatorScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var separatorColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct SearchBarColorScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public var tintColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct MessageInformerScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelTextColors: AdmiralUIKit.MessageInformerParameter<AdmiralTheme.AColor>
  public var descriptionLabelTextColors: AdmiralUIKit.MessageInformerParameter<AdmiralTheme.AColor>
  public var subtitleLabelTextColors: AdmiralUIKit.MessageInformerParameter<AdmiralTheme.AColor>
  public var wrapViewBackgroundColors: AdmiralUIKit.MessageInformerParameter<AdmiralTheme.AColor>
  public var backgroundColors: AdmiralUIKit.MessageInformerParameter<AdmiralTheme.AColor>
  public var descriptionImageViewTintColors: AdmiralUIKit.MessageInformerParameter<AdmiralTheme.AColor>
  public var descriptionImageViewAlpha: AdmiralUIKit.MessageInformerParameter<CoreFoundation.CGFloat>
  public var titleLabelFont: AdmiralTheme.AFont
  public var descriptionLabelFont: AdmiralTheme.AFont
  public var subtitleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct MessageInformerParameter<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, isEnabled: Swift.Bool)
  public func parameter(isEnabled: Swift.Bool) -> P?
}
@objc public protocol TextViewInputDelegate {
  @objc optional func textViewInputShouldBeginEditing(_ textView: AdmiralUIKit.TextViewInput) -> Swift.Bool
  @objc optional func textViewInputShouldEndEditing(_ textView: AdmiralUIKit.TextViewInput) -> Swift.Bool
  @objc optional func textViewInputDidBeginEditing(_ textView: AdmiralUIKit.TextViewInput)
  @objc optional func textViewInputDidEndEditing(_ textView: AdmiralUIKit.TextViewInput)
  @objc optional func textViewInput(_ textView: AdmiralUIKit.TextViewInput, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc optional func textViewInputDidChange(_ textView: AdmiralUIKit.TextViewInput)
  @objc optional func textViewInputDidChangeSelection(_ textView: AdmiralUIKit.TextViewInput)
  @objc optional func textViewInput(_ textView: AdmiralUIKit.TextViewInput, shouldInteractWithURL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @objc optional func textViewInput(_ textView: AdmiralUIKit.TextViewInput, shouldInteractWithTextAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TextViewInput : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.TextViewInputDelegate?
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var inputView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isEditing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var inputTextAccessibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension AdmiralUIKit.TextViewInput : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textView(_ textView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
}
extension AdmiralUIKit.TextViewInput : UIKit.UITextInputTraits {
  @_Concurrency.MainActor(unsafe) @objc dynamic open var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var hasText: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open func insertText(_ text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func deleteBackward()
  @_Concurrency.MainActor(unsafe) @objc dynamic open var autocapitalizationType: UIKit.UITextAutocapitalizationType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var autocorrectionType: UIKit.UITextAutocorrectionType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var spellCheckingType: UIKit.UITextSpellCheckingType {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic open var smartQuotesType: UIKit.UITextSmartQuotesType {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic open var smartDashesType: UIKit.UITextSmartDashesType {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic open var smartInsertDeleteType: UIKit.UITextSmartInsertDeleteType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var keyboardType: UIKit.UIKeyboardType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var returnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var keyboardAppearance: UIKit.UIKeyboardAppearance {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var enablesReturnKeyAutomatically: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var textContentType: UIKit.UITextContentType {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var beginningOfDocument: UIKit.UITextPosition {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open func offset(from: UIKit.UITextPosition, to toPosition: UIKit.UITextPosition) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) dynamic open func position(from position: UIKit.UITextPosition, offset: Swift.Int) -> UIKit.UITextPosition?
  @objc @_Concurrency.MainActor(unsafe) dynamic open func textRange(from fromPosition: UIKit.UITextPosition, to toPosition: UIKit.UITextPosition) -> UIKit.UITextRange?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CardListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var cardImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.CardListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct CustomSwitchScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralTheme.AColor
  public var onTintColor: AdmiralTheme.AColor
  public var font: AdmiralTheme.AFont
  public var textColor: AdmiralTheme.AColor
  public var disabledTextColor: AdmiralTheme.AColor
  public var disabledTintColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct GhostButtonCustomScheme : AdmiralTheme.AppThemeScheme {
  public var normalTextColor: AdmiralTheme.AColor
  public var highlightedTextColor: AdmiralTheme.AColor
  public var disabledTextColor: AdmiralTheme.AColor
  public var titleLabelFont: AdmiralTheme.AFont
  public var activityIndicatorScheme: AdmiralUIKit.ActivityIndicatorScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ButtonWithArrowListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var didSelect: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ButtonWithArrowListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct TitleSubtitleHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var defaultTitleFont: AdmiralTheme.AFont
  public var titleFont: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AFont>
  public var subtitleFont: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AFont>
  public var titleColor: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AColor>
  public var subtitleColor: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CircularTrackView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var isAnimating: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var style: AdmiralUIKit.ProgressViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum BannerNotificationDirection {
  case up
  case down
  public static func == (a: AdmiralUIKit.BannerNotificationDirection, b: AdmiralUIKit.BannerNotificationDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class BannerNotification : AdmiralUIKit.BannerPresenterProtocol {
  final public let presenter: AdmiralUIKit.BannerPresenterProtocol
  public init(presenter: AdmiralUIKit.BannerPresenterProtocol)
  public func show(banner: UIKit.UIView, config: AdmiralUIKit.BannerNotification.Config)
  public static func defaultStackBanner() -> AdmiralUIKit.BannerNotification
  public static func defaultSwitchBanner() -> AdmiralUIKit.BannerNotification
  @objc deinit
}
extension AdmiralUIKit.BannerNotification {
  public struct Config {
    public enum Insets {
      case safeArea(offset: UIKit.UIEdgeInsets)
      case absolute(insets: UIKit.UIEdgeInsets)
    }
    public var insets: AdmiralUIKit.BannerNotification.Config.Insets
    public var maxWidth: CoreFoundation.CGFloat
    public var minHeight: CoreFoundation.CGFloat
    public var displayingTime: Foundation.TimeInterval
    public var presentingDuration: Foundation.TimeInterval
    public var dismissingDuration: Foundation.TimeInterval
    public var direction: AdmiralUIKit.BannerNotificationDirection
    public init(insets: AdmiralUIKit.BannerNotification.Config.Insets, maxWidth: CoreFoundation.CGFloat, minHeight: CoreFoundation.CGFloat, displayingTime: Foundation.TimeInterval, presentingDuration: Foundation.TimeInterval, dismissingDuration: Foundation.TimeInterval, direction: AdmiralUIKit.BannerNotificationDirection)
    public static let `default`: AdmiralUIKit.BannerNotification.Config
  }
}
public struct ToolbarColorScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var shadowColor: AdmiralTheme.AColor
  public var itemColorScheme: AdmiralUIKit.ToolbarItemColorScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct SubtitleTitleHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var defaultTitleFont: AdmiralTheme.AFont
  public var titleFont: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AFont>
  public var subtitleFont: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AFont>
  public var titleColor: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AColor>
  public var subtitleColor: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public func + (left: UIKit.UIEdgeInsets, right: UIKit.UIEdgeInsets) -> UIKit.UIEdgeInsets
public func - (left: UIKit.UIEdgeInsets, right: UIKit.UIEdgeInsets) -> UIKit.UIEdgeInsets
public struct OutlineSliderScheme : AdmiralTheme.AppThemeScheme {
  public struct ItemScheme {
    public var titleFont: AdmiralUIKit.ControlParameter<AdmiralTheme.AFont>
    public var titleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  }
  public var itemScheme: AdmiralUIKit.OutlineSliderScheme.ItemScheme
  public var badgeScheme: AdmiralUIKit.BadgeScheme
  public var badgeBorderColor: AdmiralTheme.AColor
  public var borderColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ButtonListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var buttonTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var buttonBackgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var buttonFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct StatusHistoryDateViewScheme : AdmiralTheme.AppThemeScheme {
  public var textFont: AdmiralTheme.AFont
  public var textColor: AdmiralTheme.AColor
  public var buttonTintColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct LogoTabItem {
  public let image: UIKit.UIImage?
  public var accesibilityId: Swift.String?
  public init(image: UIKit.UIImage?, accesibilityId: Swift.String? = nil)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LogoTab : AdmiralUIKit.PlainSegmentedControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) override public var selectedSegmentIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.LogoSegmentedScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(items: [AdmiralUIKit.LogoTabItem?])
  @_Concurrency.MainActor(unsafe) convenience public init(images: [UIKit.UIImage?])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setItems(_ items: [AdmiralUIKit.LogoTabItem?])
  @_Concurrency.MainActor(unsafe) public func insertImage(_ image: UIKit.UIImage?, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeImage(forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setEnabled(_ isEnabled: Swift.Bool, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func imageForSegment(at segment: Swift.Int) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct PinCodeInputScheme : AdmiralTheme.AppThemeScheme {
  public var defaultColor: AdmiralTheme.AColor
  public var activeColor: AdmiralTheme.AColor
  public var successColor: AdmiralTheme.AColor
  public var errorColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BottomSheetHeaderSmallTitleView : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) weak open var delegate: AdmiralUIKit.BottomSheetHeaderDelegate?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.BottomSheetHeaderSmallTitleScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var rightButtonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct CircularTrackViewScheme : AdmiralTheme.AppThemeScheme {
  public var circleColor: AdmiralUIKit.ProgressViewSchemeParameters<AdmiralTheme.AColor>
  public var color: AdmiralTheme.AColor
  public var strokeColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct LogoSegmentedScheme : AdmiralTheme.AppThemeScheme {
  public struct ItemScheme {
    public var alpha: AdmiralUIKit.ControlParameter<CoreFoundation.CGFloat>
    public var borderColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  }
  public var itemScheme: AdmiralUIKit.LogoSegmentedScheme.ItemScheme
  public var borderColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var thumbColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ZeroScreenScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var titleColor: AdmiralTheme.AColor
  public var titleFont: AdmiralTheme.AFont
  public var subtitleColor: AdmiralTheme.AColor
  public var subtitleFont: AdmiralTheme.AFont
  public var primaryButtonScheme: AdmiralUIKit.PrimaryButtonCustomScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public protocol ListViewCell : UIKit.UIView, AdmiralTheme.AppThemeCompatible {
  var isEnabled: Swift.Bool { get set }
  var isHighlighted: Swift.Bool { get set }
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ListCell<L, C, T> : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.ListViewCell where L : AdmiralTheme.AppThemeCompatible, L : AdmiralTheme.AppThemeable, L : AdmiralUIKit.LeadingListViewComponent, C : AdmiralTheme.AppThemeCompatible, C : AdmiralTheme.AppThemeable, C : AdmiralUIKit.CenterListViewComponent, T : AdmiralTheme.AppThemeCompatible, T : AdmiralTheme.AppThemeable, T : AdmiralUIKit.TralingListViewComponent {
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let centerView: C?
  @_Concurrency.MainActor(unsafe) final public let tralingView: T?
  @_Concurrency.MainActor(unsafe) final public let leadingView: L?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ListCellScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(leadingView: L?, centerView: C?, tralingView: T?)
  @_Concurrency.MainActor(unsafe) public init(centerView: C?, tralingView: T?)
  @_Concurrency.MainActor(unsafe) public init(centerView: C?)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public protocol CirclePageControlDelegate : AnyObject {
  func didTapCenterButton()
  func didChangePage(page: Swift.Int)
}
extension AdmiralUIKit.CirclePageControlDelegate {
  public func didTapCenterButton()
  public func didChangePage(page: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CirclePageControl : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.CirclePageControlDelegate?
  @_Concurrency.MainActor(unsafe) public var totalPages: Swift.Int
  @_Concurrency.MainActor(unsafe) public var duration: Swift.Double
  @_Concurrency.MainActor(unsafe) public var currentPage: Swift.Int
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.CirclePageControlScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) public func setPage(_ page: Swift.Int, animated: Swift.Bool)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.CirclePageControl : QuartzCore.CAAnimationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationDidStart(_ anim: QuartzCore.CAAnimation)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
}
public struct ActionItemBarDefaultViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var controlScheme: AdmiralUIKit.ActionItemBarDefaultControlScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct DimmedViewCustomScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LeadingCardListView : AdmiralUIKit.BaseListView, AdmiralUIKit.LeadingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var cardImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ImageCardListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public class AlertAction {
  public enum Style {
    case primary
    case alternative
    public static func == (a: AdmiralUIKit.AlertAction.Style, b: AdmiralUIKit.AlertAction.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var title: Swift.String?
  public var style: AdmiralUIKit.AlertAction.Style
  public init(title: Swift.String? = nil, style: AdmiralUIKit.AlertAction.Style = .primary, handler: ((AdmiralUIKit.AlertAction) -> Swift.Void)? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Shimmer {
  public enum Direction {
    case right
    case left
    case up
    case down
    public static func == (a: AdmiralUIKit.Shimmer.Direction, b: AdmiralUIKit.Shimmer.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ScrollablePageControl : UIKit.UIView, AdmiralTheme.AppThemeable {
  @_Concurrency.MainActor(unsafe) public var currentPage: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var numberOfPages: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var hidesForSinglePage: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var displayedItems: Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.PageControlViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setCurrentPage(at currentPage: Swift.Int, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TabSegmentedControl : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public var selectedSegmentIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfSegments: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func setSelectedSegmentIndex(_ index: Swift.Int, animated: Swift.Bool)
  @objc deinit
}
public struct TitleLargeSubtitleScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var additionaColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public var subtitleFont: AdmiralTheme.AFont
  public var additionalTitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum ChatStatus : Swift.String {
  case loading
  case error
  case sent
  case receive
  case read
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChatBubbleState {
  case error
  case `default`
  public static func == (a: AdmiralUIKit.ChatBubbleState, b: AdmiralUIKit.ChatBubbleState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChatDirection : Swift.String {
  case left
  case right
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ChatBubbleView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var chatStatus: AdmiralUIKit.ChatStatus? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var chatDirection: AdmiralUIKit.ChatDirection? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var state: AdmiralUIKit.ChatBubbleState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var name: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var messageText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var timeTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.ChatBubbleViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PlatformButton : AdmiralUIKit.CustomButton, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.PlatformButtonCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public protocol SegmentControlContainerContent : UIKit.UIControl {
  var selectedSegmentIndex: Swift.Int { get set }
  var numberOfSegments: Swift.Int { get }
}
public enum TextInputState : Swift.Int {
  case normal
  case error
  case disabled
  case readOnly
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TextInputTrailingViewStyle : Swift.Int {
  case small
  case large
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol TextFieldInputDelegate {
  @objc optional func textFieldInputDidChange(_ textField: AdmiralUIKit.TextFieldInput)
  @objc optional func textFieldInputShouldBeginEditing(_ textField: AdmiralUIKit.TextFieldInput) -> Swift.Bool
  @objc optional func textFieldInputDidBeginEditing(_ textField: AdmiralUIKit.TextFieldInput)
  @objc optional func textFieldInputShouldEndEditing(_ textField: AdmiralUIKit.TextFieldInput) -> Swift.Bool
  @objc optional func textFieldInputDidEndEditing(_ textField: AdmiralUIKit.TextFieldInput)
  @objc optional func textFieldInputDidEndEditing(_ textField: AdmiralUIKit.TextFieldInput, reason: UIKit.UITextField.DidEndEditingReason)
  @objc optional func textFieldInput(_ textField: AdmiralUIKit.TextFieldInput, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc optional func textFieldInputShouldClear(_ textField: AdmiralUIKit.TextFieldInput) -> Swift.Bool
  @objc optional func textFieldInputShouldReturn(_ textField: AdmiralUIKit.TextFieldInput) -> Swift.Bool
  @objc optional func textFieldInputDidChangeSelection(_ textField: AdmiralUIKit.TextFieldInput)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TextFieldInput : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.TextFieldInputDelegate?
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var inputView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isEditing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var leftView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var inputTextAccessibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension AdmiralUIKit.TextFieldInput : UIKit.UITextFieldDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func textFieldDidChange(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
}
extension AdmiralUIKit.TextFieldInput : UIKit.UITextInputTraits {
  @_Concurrency.MainActor(unsafe) @objc dynamic open var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var hasText: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open func insertText(_ text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func deleteBackward()
  @_Concurrency.MainActor(unsafe) @objc dynamic open var autocapitalizationType: UIKit.UITextAutocapitalizationType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var autocorrectionType: UIKit.UITextAutocorrectionType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var spellCheckingType: UIKit.UITextSpellCheckingType {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic open var smartQuotesType: UIKit.UITextSmartQuotesType {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic open var smartDashesType: UIKit.UITextSmartDashesType {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic open var smartInsertDeleteType: UIKit.UITextSmartInsertDeleteType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var keyboardType: UIKit.UIKeyboardType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var returnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var keyboardAppearance: UIKit.UIKeyboardAppearance {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var enablesReturnKeyAutomatically: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic open var textContentType: UIKit.UITextContentType {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var beginningOfDocument: UIKit.UITextPosition {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var selectedTextRange: UIKit.UITextRange? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open func offset(from: UIKit.UITextPosition, to toPosition: UIKit.UITextPosition) -> Swift.Int
  @objc @_Concurrency.MainActor(unsafe) dynamic open func position(from position: UIKit.UITextPosition, offset: Swift.Int) -> UIKit.UITextPosition?
  @objc @_Concurrency.MainActor(unsafe) dynamic open func textRange(from fromPosition: UIKit.UITextPosition, to toPosition: UIKit.UITextPosition) -> UIKit.UITextRange?
}
public struct CalendarHeaderViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public var titleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum StatusHistory : Swift.String {
  case done
  case hold
  case review
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol StatusHistoryViewDelegate : AnyObject {
  func statusHistoryViewTapClose(view: AdmiralUIKit.StatusHistoryView)
}
public enum StatusHistoryViewType : Swift.String {
  case standard
  case small
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StatusHistorySumType : Swift.String {
  case increase
  case decrease
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StatusHistoryView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.StatusHistoryViewDelegate?
  @_Concurrency.MainActor(unsafe) public var type: AdmiralUIKit.StatusHistoryViewType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var date: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var images: [UIKit.UIImage] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var sum: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var crossOutSum: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var statusHistorySumType: AdmiralUIKit.StatusHistorySumType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var statusText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var statusImage: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var status: AdmiralUIKit.StatusHistory {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.StatusHistoryViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(type: AdmiralUIKit.StatusHistoryViewType)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BottomSheetHeaderTitleView : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) weak open var delegate: AdmiralUIKit.BottomSheetHeaderDelegate?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.BottomSheetHeaderTitleViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleTextAligment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isRightButtonItemHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ImageBackgroundListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var backgroundImageViewColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum CalendarViewType : Swift.String {
  case horizontal
  case vertical
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CalendarView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) weak public var calendarDelegate: AdmiralUIKit.CalendarDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var calendarDataSource: AdmiralUIKit.CalendarDataSource? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var locale: Foundation.Locale? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var notActiveAfterDate: Foundation.Date? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedStartDate: Foundation.Date? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var pointDates: [Foundation.Date] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedEndDate: Foundation.Date? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isMutlipleSelectionAllowed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.CalendarViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(type: AdmiralUIKit.CalendarViewType)
  @_Concurrency.MainActor(unsafe) public func reloadData()
  @_Concurrency.MainActor(unsafe) public func setHorizontalCalendarAccessibilitiesIds(accessibilityId: Swift.String, headerLeftButtonId: Swift.String, headerRightButtonId: Swift.String, headerChoiseButtonId: Swift.String, headerButtonWithArrowId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setVerticalCalendarAccessibilitiesIds(accessibilityId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PageControl : UIKit.UIControl, AdmiralTheme.AppThemeable {
  @_Concurrency.MainActor(unsafe) public var currentPage: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfPages: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.PageControlViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) public func setSelectedSegmentIndex(_ index: Swift.Int, animated: Swift.Bool)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct InputNumberTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var titleFont: AdmiralTheme.AFont
  public var textField: AdmiralUIKit.TextFieldScheme
  public var titleLabelColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var textFieldBackground: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var buttonBackgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TitleSubtitleButtonListView : AdmiralUIKit.BaseListView, AdmiralUIKit.CenterListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tagSubtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tagText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var didSelect: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TitleSubtitleButtonListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ShimmeringView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) @objc override final public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public var contentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerTime: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerHighlightLength: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerDirection: AdmiralUIKit.Shimmer.Direction {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerPauseDuration: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerAnimationOpacity: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerOpacity: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerBeginTime: CoreFoundation.CFTimeInterval {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerBeginFadeDuration: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerEndFadeDuration: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shimmerFadeTime: CoreFoundation.CFTimeInterval? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.ShimmeringViewColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) final public func start()
  @_Concurrency.MainActor(unsafe) final public func finish()
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DatePercentListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var date: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var percent: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.DatePercentListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ToolbarItemColorScheme : AdmiralTheme.AppThemeScheme {
  public var titleColor: AdmiralUIKit.ToolbarItemParameters<AdmiralTheme.AColor>
  public var imageColor: AdmiralUIKit.ToolbarItemParameters<AdmiralTheme.AColor>
  public var titleLabelFontVertical: UIKit.UIFont
  public var titleLabelFontHorizontal: UIKit.UIFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ToolbarItemParameters<P> {
  public mutating func set(parameter: P?, for state: UIKit.UIControl.State, type: AdmiralUIKit.ToolbarItemType)
  public func parameter(for state: UIKit.UIControl.State, type: AdmiralUIKit.ToolbarItemType) -> P?
}
public enum BottomSheetHeight : Swift.Equatable {
  case maxHeight
  case maxHeightWithTopInset(CoreFoundation.CGFloat)
  case contentHeight(CoreFoundation.CGFloat)
  case contentHeightIgnoringSafeArea(CoreFoundation.CGFloat)
  case intrinsicHeight
  public static func == (a: AdmiralUIKit.BottomSheetHeight, b: AdmiralUIKit.BottomSheetHeight) -> Swift.Bool
}
public struct TitleHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var defaultTitleFont: AdmiralTheme.AFont
  public var titleFont: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AFont>
  public var textColor: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TitleHeaderViewParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, for state: UIKit.UIControl.State, style: AdmiralUIKit.HeaderStyle?)
  public func parameter(for state: UIKit.UIControl.State, style: AdmiralUIKit.HeaderStyle?) -> P?
}
public struct ImageWithSubtitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct OTPTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var errorColor: AdmiralTheme.AColor
  public var disabledColor: AdmiralTheme.AColor
  public var underlineColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralTheme.AColor
  public var textFieldFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public var informerFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct PageControlViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ErrorViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleColor: AdmiralTheme.AColor
  public var titleFont: AdmiralTheme.AFont
  public var backgroundColor: AdmiralTheme.AColor
  public var ghostButtonScheme: AdmiralUIKit.GhostButtonCustomScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RadioButtonListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var controlState: AdmiralUIKit.CheckControlState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.RadioButtonListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var radioButtonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var didSelect: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct BadgeScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var textColor: AdmiralUIKit.BadgeParameters<AdmiralTheme.AColor>
  public var borderColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralUIKit.BadgeParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct BadgeParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, for state: AdmiralUIKit.BadgeState, style: AdmiralUIKit.BadgeStyle)
  public func parameter(for state: AdmiralUIKit.BadgeState, style: AdmiralUIKit.BadgeStyle) -> P?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomSwitch : UIKit.UISwitch, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.CustomSwitchScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class CurrencyHeaderView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var currencyText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buyText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var sellText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isTextSpacingEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.CurrencyHeaderViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect = .zero)
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ChatBubbleStatusViewScheme : AdmiralTheme.AppThemeScheme {
  public var textFont: AdmiralTheme.AFont
  public var textColor: AdmiralUIKit.ChatBubbleStatusViewParameters<AdmiralTheme.AColor>
  public var imageColor: AdmiralUIKit.ChatBubbleStatusViewParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ChatBubbleStatusViewParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, status: AdmiralUIKit.ChatStatus, direction: AdmiralUIKit.ChatDirection, style: AdmiralUIKit.ChatBubbleStatusStyle)
  public func parameter(for status: AdmiralUIKit.ChatStatus, direction: AdmiralUIKit.ChatDirection, style: AdmiralUIKit.ChatBubbleStatusStyle) -> P?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NumberBadge : AdmiralUIKit.Badge {
  @_Concurrency.MainActor(unsafe) public var value: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxValue: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TitleMoreDetailTextMessageListView : AdmiralUIKit.BaseListView, AdmiralUIKit.CenterListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var more: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detaile: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detaileMore: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tagText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var messageText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TitleMoreDetailTextMessageListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public protocol TralingListViewComponent : UIKit.UIView {
  var isEnabled: Swift.Bool { get set }
  var isHighlighted: Swift.Bool { get set }
  var isHighlightedEnabled: Swift.Bool { get set }
}
public struct IconListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralUIKit.ControlParameter<CoreFoundation.CGFloat>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SecondaryTitleListView : AdmiralUIKit.BaseListView, AdmiralUIKit.CenterListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SecondaryTitleListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ImageListView : AdmiralUIKit.BaseListView, AdmiralUIKit.LeadingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ImageListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum CalendarCellState : Swift.UInt {
  case normal
  case tailSelected
  case selected
  case currentDate
  case disabled
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public protocol BannerPresenterProtocol {
  func show(banner: UIKit.UIView, config: AdmiralUIKit.BannerNotification.Config)
}
public struct SeveralPinButtonScheme : AdmiralTheme.AppThemeScheme {
  public let borderColor: AdmiralTheme.AColor
  public let borderColorPressed: AdmiralTheme.AColor
  public let borderColorDisabled: AdmiralTheme.AColor
  public let backgroundColor: AdmiralTheme.AColor
  public let textColor: AdmiralTheme.AColor
  public let shadowColor: AdmiralTheme.AColor
  public let disabledColor: AdmiralTheme.AColor
  public let font: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct UploadDocumentViewScheme : AdmiralTheme.AppThemeScheme {
  public var sizeTextFont: AdmiralTheme.AFont
  public var timeTextFont: AdmiralTheme.AFont
  public var messageTextFont: AdmiralTheme.AFont
  public var messageTextColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var backgroundColor: AdmiralUIKit.UploadDocumentParameters<AdmiralTheme.AColor>
  public var nameTextColor: AdmiralUIKit.UploadDocumentParameters<AdmiralTheme.AColor>
  public var timeTextColor: AdmiralUIKit.UploadDocumentParameters<AdmiralTheme.AColor>
  public var sizeColor: AdmiralUIKit.UploadDocumentParameters<AdmiralTheme.AColor>
  public var circleColor: AdmiralUIKit.UploadDocumentParameters<AdmiralTheme.AColor>
  public var chevronColor: AdmiralUIKit.UploadDocumentParameters<AdmiralTheme.AColor>
  public var progressViewScheme: AdmiralUIKit.ProgressViewScheme
  public var chatBubbleStatusViewScheme: AdmiralUIKit.ChatBubbleStatusViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct UploadDocumentParameters<P> {
}
public struct TitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var textColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct StatusHistoryViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var statusHistoryDateViewScheme: AdmiralUIKit.StatusHistoryDateViewScheme
  public var statusHistoryBaseImagesViewScheme: AdmiralUIKit.StatusHistoryBaseImagesViewScheme
  public var statusHistorySummaViewScheme: AdmiralUIKit.StatusHistorySumViewScheme
  public var statusHistoryTitleViewScheme: AdmiralUIKit.StatusHistoryTitleViewScheme
  public var statusHistoryStatusViewScheme: AdmiralUIKit.StatusHistoryStatusViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TwoTitleGhostButtonScheme : AdmiralTheme.AppThemeScheme {
  public var leftTitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var rightTitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralTheme.AColor
  public var leftLabelFont: AdmiralTheme.AFont
  public var rightLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CalendarVerticalViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var collectionViewBackgroundColor: AdmiralTheme.AColor
  public var calendarViewCellColorScheme: AdmiralUIKit.CalendarViewCellColorScheme
  public var calendarFooterViewColorScheme: AdmiralUIKit.CalendarFooterViewColorScheme
  public var calendarHeaderViewScheme: AdmiralUIKit.CalendarHeaderViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct DropDownHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var defaultTitleFont: AdmiralTheme.AFont
  public var titleFont: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AFont>
  public var textColor: AdmiralUIKit.TitleHeaderViewParameters<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BottomSheetHeaderSubtitleTitleView : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) weak open var delegate: AdmiralUIKit.BottomSheetHeaderDelegate?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.BottomSheetHeaderSubtitleTitleViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var subtitleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CheckBox : AdmiralUIKit.CheckControl {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct TextOperationViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.TextOperationViewSchemeParameters<AdmiralTheme.AColor>
  public var titleColor: AdmiralUIKit.TextOperationViewSchemeParameters<AdmiralTheme.AColor>
  public var errorImageColor: AdmiralTheme.AColor
  public var desciptionColor: AdmiralTheme.AColor
  public var timeColor: AdmiralTheme.AColor
  public var titleFont: AdmiralTheme.AFont
  public var desciptionFont: AdmiralTheme.AFont
  public var timeFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TextOperationViewSchemeParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, style: AdmiralUIKit.TextOperationViewStyle)
  public func parameter(style: AdmiralUIKit.TextOperationViewStyle) -> P?
}
public protocol BottomSheetPresenter : AnyObject {
  var isBottomSheetPresneted: Swift.Bool { get }
  func presentBottomSheet(_ viewControllerToPresent: UIKit.UIViewController & AdmiralUIKit.BottomSheetPresentable, sourceView: UIKit.UIView?, sourceRect: CoreFoundation.CGRect, completion: (() -> Swift.Void)?)
}
public struct UploadImageGridViewScheme : AdmiralTheme.AppThemeScheme {
  public var chatBubbleColor: AdmiralTheme.AColor
  public var errorImageColor: AdmiralTheme.AColor
  public var uploadImageViewScheme: AdmiralUIKit.UploadImageViewScheme
  public var chatBubbleStatusScheme: AdmiralUIKit.ChatBubbleStatusViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class IconTabsItem : UIKit.UIControl, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) @objc override final public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.IconTabsItemScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AlertViewController : UIKit.UIViewController, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var message: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageSizeType: AdmiralUIKit.AlertViewImageType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var messageLabelTextAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var messageLabelNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleTextColor: AdmiralUIKit.AlertColorStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var messageTextColor: AdmiralUIKit.AlertColorStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var messageFont: AdmiralUIKit.AlertMessageFontStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleFont: AdmiralUIKit.AlertTitleFontStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var preferredWidth: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var preferredHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var actions: [AdmiralUIKit.AlertAction] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.AlertViewControllerScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func addAction(_ action: AdmiralUIKit.AlertAction)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum TagStyle : Swift.Int {
  case none
  case `default`
  case success
  case additional
  case error
  case attention
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TagControl<T, V> : UIKit.UIControl, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport where T : UIKit.UIView, V : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var shouldAnimateHighlighting: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var animationDuration: Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) open var leadingView: T? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var trailingView: V? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var height: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TagControlCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var style: AdmiralUIKit.TagStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textStyle: UIKit.UIFont.TextStyle?
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) open func setTitle(_ title: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func updateScheme()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct StatusHistoryStatusViewScheme : AdmiralTheme.AppThemeScheme {
  public var textFont: AdmiralTheme.AFont
  public var textColor: AdmiralUIKit.StatusHistoryStatusViewParameters<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.StatusHistoryStatusViewParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct StatusHistoryStatusViewParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, for status: AdmiralUIKit.StatusHistory)
  public func parameter(for status: AdmiralUIKit.StatusHistory) -> P?
}
public struct TitleSubtitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public var subtitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct StatusHistoryBaseImagesViewScheme : AdmiralTheme.AppThemeScheme {
  public var imageViewBackgroundColor: AdmiralTheme.AColor
  public var imageViewBorderColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ListCellScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct BankCardTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var errorColor: AdmiralTheme.AColor
  public var disabledColor: AdmiralTheme.AColor
  public var underlineColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralTheme.AColor
  public var textFieldFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public var informerFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public typealias ControlParameter<P> = AdmiralCore.ParameterBox<UIKit.UIControl.State, P>
extension UIKit.UIControl.State : AdmiralCore.DefaultRepresentable {
  public static var defaultValue: UIKit.UIControl.State {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TwoTitleButton : UIKit.UIControl, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var leftButtonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var rightButtonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var shouldAnimateHighlighting: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var animationDuration: Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) open var scheme: AdmiralUIKit.TwoTitleButtonScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) open func setCornerRadius(_ radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public protocol BaseUnderlineSegmentedControlProtocol {
  var isScrollEnabled: Swift.Bool { get set }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseUnderlineSegmentedControl : UIKit.UIControl, AdmiralUIKit.BaseUnderlineSegmentedControlProtocol {
  @_Concurrency.MainActor(unsafe) public var selectedSegmentIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isScrollEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfSegments: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var interItemSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentInset: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isStaticTabs: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func setSelectedSegmentIndex(_ index: Swift.Int, animated: Swift.Bool)
  @objc deinit
}
extension AdmiralUIKit.BaseUnderlineSegmentedControl : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
@objc public protocol CodeInputControlDelegate {
  @objc optional func codeInputControlShouldReturn(control: AdmiralUIKit.CodeInputControl)
  @objc optional func codeInputControlDidFinish(_ control: AdmiralUIKit.CodeInputControl, text: Swift.String)
  @objc optional func codeInputControl(_ control: AdmiralUIKit.CodeInputControl, textDidChange text: Swift.String)
  @objc optional func codeInputControl(_ control: AdmiralUIKit.CodeInputControl, shouldChange newString: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CodeInputControl : UIKit.UIControl {
  public enum Style : Swift.Int {
    case `default`
    case contrast
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Status : Swift.Int {
    case normal
    case success
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open var style: AdmiralUIKit.CodeInputControl.Style {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var itemsCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak open var delegate: AdmiralUIKit.CodeInputControlDelegate?
  @_Concurrency.MainActor(unsafe) open var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var status: AdmiralUIKit.CodeInputControl.Status {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isOnFocus: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var filled: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var ignoreUserInput: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open var keyboardType: UIKit.UIKeyboardType
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension AdmiralUIKit.CodeInputControl : UIKit.UIKeyInput {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var hasText: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public func insertText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func deleteBackward()
}
public enum SmallInformerArrowDirection {
  case up
  case down
  case upRight
  case downRight
  public static func == (a: AdmiralUIKit.SmallInformerArrowDirection, b: AdmiralUIKit.SmallInformerArrowDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CornerRadius : CoreFoundation.CGFloat {
  case zero
  case module
  case doubleModule
  case tripleModule
  case quadrupleModule
  public init?(rawValue: CoreFoundation.CGFloat)
  public typealias RawValue = CoreFoundation.CGFloat
  public var rawValue: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SmallInformer : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) open var titleFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleLabelNumerOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var informerCornerRadius: AdmiralUIKit.CornerRadius {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var style: AdmiralUIKit.InformerStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SmallInformerScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setArrowPivotLeadingAnchorPoint(constant: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) open func setArrowDirection(direction: AdmiralUIKit.SmallInformerArrowDirection)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum TimePickerStates : Swift.Int {
  case defaultState
  case scrollEditing
  case scrollLeftEditing
  case scrollRightEditing
  case allEdititngScrollRightEditing
  case allEditingScrollLeftEditing
  case allEditingScroll
  case allEditingTextField
  case leftEditingTextFieldScroll
  case leftEditingTextFieldTextEdit
  case rightEditingTextFieldTextScroll
  case rightEditingTextFieldTextEdit
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct TwoTitleButtonScheme : AdmiralTheme.AppThemeScheme {
  public var leftTitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var rightTitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var backBackgroundColor: AdmiralTheme.AColor
  public var leftLabelFont: AdmiralTheme.AFont
  public var rightLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ChatInputTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralUIKit.ChatInputTextFieldParameters<AdmiralTheme.AColor>
  public var textColor: AdmiralUIKit.ChatInputTextFieldParameters<AdmiralTheme.AColor>
  public var placeholderColor: AdmiralUIKit.ChatInputTextFieldParameters<AdmiralTheme.AColor>
  public var textFieldBackgroundColor: AdmiralUIKit.ChatInputTextFieldParameters<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralTheme.AColor
  public var textFieldFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ChatInputTextFieldParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, state: AdmiralUIKit.TextInputState)
  public func parameter(for state: AdmiralUIKit.TextInputState) -> P?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FeedbackInputControl : UIKit.UIControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) open var itemsCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var scheme: AdmiralUIKit.FeedBackInputScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cursorPosition: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum UploadDocumentState {
  case loading
  case description
  case download
  public static func == (a: AdmiralUIKit.UploadDocumentState, b: AdmiralUIKit.UploadDocumentState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class UploadDocumentView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var state: AdmiralUIKit.UploadDocumentState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var direction: AdmiralUIKit.ChatDirection {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var chatStatus: AdmiralUIKit.ChatStatus? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var fileName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var fileSize: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var chatTime: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progressCircleStyle: AdmiralUIKit.ProgressViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var trackProgressStyle: AdmiralUIKit.ProgressViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.UploadDocumentViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum ParagraphStyle : Swift.String {
  case primary
  case secondary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class Paragraph : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var paragraphType: AdmiralUIKit.ParagaphImageType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textAligment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leadingImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var traillingImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var paragraphStyle: AdmiralUIKit.ParagraphStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ParagraphScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct PinButtonScheme : AdmiralTheme.AppThemeScheme {
  public var selectedBackgroundColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public var disabledBackgroundColor: AdmiralTheme.AColor
  public let frontColor: AdmiralTheme.AColor
  public let shadowColor: AdmiralTheme.AColor
  public var buttonImageColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ImageCardListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralUIKit.ControlParameter<CoreFoundation.CGFloat>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public protocol LeadingListViewComponent : UIKit.UIView {
  var isEnabled: Swift.Bool { get set }
  var isHighlighted: Swift.Bool { get set }
  var isHighlightedEnabled: Swift.Bool { get set }
}
public enum UploadImageGridState {
  case `default`
  case error
  public static func == (a: AdmiralUIKit.UploadImageGridState, b: AdmiralUIKit.UploadImageGridState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class UploadImageGridView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var state: AdmiralUIKit.UploadImageGridState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var models: [AdmiralUIKit.UploadImageItem] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var chatStatus: AdmiralUIKit.ChatStatus? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var direction: AdmiralUIKit.ChatDirection {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var chatTime: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.UploadImageGridViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(models: [AdmiralUIKit.UploadImageItem] = [], chatStatus: AdmiralUIKit.ChatStatus = .none, direction: AdmiralUIKit.ChatDirection = .right, chatTime: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseOutlineSliderSegmentedControl : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public var selectedSegmentIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isScrollEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfSegments: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var interItemSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentInset: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func setSelectedSegmentIndex(_ index: Swift.Int, animated: Swift.Bool)
  @objc deinit
}
extension AdmiralUIKit.BaseOutlineSliderSegmentedControl : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SecondaryButton : AdmiralUIKit.CustomButton, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SecondaryButtonCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct DatePercentListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public var subtitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ListCellEmpty : AdmiralUIKit.BaseListView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.CenterListViewComponent, AdmiralUIKit.TralingListViewComponent, AdmiralUIKit.LeadingListViewComponent {
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct CardViewScheme : AdmiralTheme.AppThemeScheme {
  public var topLabelTextColor: AdmiralTheme.AColor
  public var nameLabelTextColor: AdmiralTheme.AColor
  public var amountLabelTextColor: AdmiralTheme.AColor
  public var statusLabelTextColors: AdmiralUIKit.CardViewSchemeParameter<AdmiralTheme.AColor>
  public var statusImageViewColors: AdmiralUIKit.CardViewSchemeParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralTheme.AColor
  public var statusBackGroundViewColors: AdmiralUIKit.CardViewSchemeParameter<AdmiralTheme.AColor>
  public var subtitleLabelTextColor: AdmiralTheme.AColor
  public var topLabelFont: UIKit.UIFont
  public var nameLabelFont: UIKit.UIFont
  public var amountLabelFont: UIKit.UIFont
  public var statusLabelFont: UIKit.UIFont
  public var subtitleLabelFont: UIKit.UIFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CardViewSchemeParameter<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, style: AdmiralUIKit.CardStatusStyle)
  public func parameter(style: AdmiralUIKit.CardStatusStyle) -> P?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CheckBoxListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var controlState: AdmiralUIKit.CheckControlState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.CheckBoxListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var checkBoxAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var didSelect: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SubtitleWithImageListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SubtitleWithImageListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public protocol ArrowWithButtonHeaderDelegate : AnyObject {
  func tapArrowWithButtonHeaderButton(_ button: UIKit.UIButton)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ArrowWithButtonHeader : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.ArrowWithButtonHeaderDelegate?
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var headerStyle: AdmiralUIKit.HeaderStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dropDownHeaderType: AdmiralUIKit.DropDownHeaderType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ArrowWithButtonHeaderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, buttonTitle: Swift.String?, dropDownHeaderType: AdmiralUIKit.DropDownHeaderType?, headerStyle: AdmiralUIKit.HeaderStyle = .title)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ImageListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralUIKit.ControlParameter<CoreFoundation.CGFloat>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class IconListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.IconListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct TextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var errorColor: AdmiralTheme.AColor
  public var disabledColor: AdmiralTheme.AColor
  public var underlineColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralTheme.AColor
  public var textFieldFont: AdmiralTheme.AFont
  public var informerFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum SeveralPinButtonSize {
  case small
  case medium
  case large
  public static func == (a: AdmiralUIKit.SeveralPinButtonSize, b: AdmiralUIKit.SeveralPinButtonSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SeveralPinButton : AdmiralUIKit.CustomButton, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var style: AdmiralUIKit.SeveralPinButtonSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SeveralPinButtonScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct StatusHistorySumViewScheme : AdmiralTheme.AppThemeScheme {
  public var sumTextColor: AdmiralUIKit.StatusHistorySummaViewParameters<AdmiralTheme.AColor>
  public var sumTextFont: AdmiralUIKit.StatusHistorySummaViewParameters<UIKit.UIFont>
  public var crossOutTextColor: AdmiralUIKit.StatusHistorySummaViewParameters<AdmiralTheme.AColor>
  public var crossOutTextFont: AdmiralUIKit.StatusHistorySummaViewParameters<UIKit.UIFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct StatusHistorySummaViewParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, for state: AdmiralUIKit.StatusHistorySumType, type: AdmiralUIKit.StatusHistoryViewType)
  public func parameter(for state: AdmiralUIKit.StatusHistorySumType, type: AdmiralUIKit.StatusHistoryViewType) -> P?
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SegmentControlContainer<S, T> : UIKit.UIControl where S : AdmiralUIKit.SegmentControlContainerContent, T : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var selectedSegmentIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfSegments: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var bottomView: T? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentControl: S
  @_Concurrency.MainActor(unsafe) public init(bottomView: T, segmentControl: S)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public struct CardListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralUIKit.ControlParameter<CoreFoundation.CGFloat>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct InputRangeTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var sliderScheme: AdmiralUIKit.SliderScheme
  public var textFieldScheme: AdmiralUIKit.TextFieldScheme
  public var valueFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CalendarHorizontalHeaderViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var buttonWithArrowScheme: AdmiralUIKit.ButtonWithArrowScheme
  public var ghostButtonCustomScheme: AdmiralUIKit.GhostButtonCustomScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum InputNumberStyle {
  case `default`
  case input
  public static func == (a: AdmiralUIKit.InputNumberStyle, b: AdmiralUIKit.InputNumberStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CheckBoxTextButtonViewDelegate : AnyObject {
  func checkBoxShouldSelected(_ checkBox: AdmiralUIKit.CheckBox) -> Swift.Bool
}
public struct BottomSheetHeaderSmallTitleScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelFont: AdmiralTheme.AFont
  public var rightButtonFont: AdmiralTheme.AFont
  public var titleTextColor: AdmiralTheme.AColor
  public var rightButtonTextColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TextInputDecorationViewScheme : AdmiralTheme.AppThemeScheme {
  public var nameFont: AdmiralTheme.AFont
  public var nameEnableFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public var informerFont: AdmiralTheme.AFont
  public var nameLabelMinFont: AdmiralTheme.AFont
  public var leadingTextFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BottomSheetHeaderTitleSubtitleView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) weak open var delegate: AdmiralUIKit.BottomSheetHeaderDelegate?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.BottomSheetHeaderTitleSubtitleViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var subtitleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CurcleIconListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.CurcleIconListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct BottomSheetHeaderSubtitleTitleViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelFont: AdmiralTheme.AFont
  public var subtitleLabelFont: AdmiralTheme.AFont
  public var titleTextColor: AdmiralTheme.AColor
  public var subtitleTextColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public protocol AlertView : AnyObject {
  var title: Swift.String? { get set }
  var message: Swift.String? { get set }
  var image: UIKit.UIImage? { get set }
  var actions: [AdmiralUIKit.AlertAction] { get }
  func addAction(_ action: AdmiralUIKit.AlertAction)
}
public enum AlertViewImageType {
  case illustration
  case icon
  public static func == (a: AdmiralUIKit.AlertViewImageType, b: AdmiralUIKit.AlertViewImageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AlertTitleFontStyle : Swift.Int {
  case title1
  case title2
  case subtitle1
  case subtitle2
  case headLine
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AlertMessageFontStyle : Swift.Int {
  case body1
  case body2
  case subhead4
  case subhead3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AlertColorStyle : Swift.Int {
  case additional
  case mask
  case primary
  case secondary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class DefaultAlertView : UIKit.UIView, AdmiralUIKit.AlertView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var message: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var type: AdmiralUIKit.AlertViewImageType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var scheme: AdmiralUIKit.DefaultAlertViewCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var actions: [AdmiralUIKit.AlertAction] {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var messageLabelTextAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var messageLabelNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var titleTextColor: AdmiralUIKit.AlertColorStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var messageTextColor: AdmiralUIKit.AlertColorStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var messageFont: AdmiralUIKit.AlertMessageFontStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var titleFont: AdmiralUIKit.AlertTitleFontStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public func addAction(_ action: AdmiralUIKit.AlertAction)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct CalendarHorizontalViewCellScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var calendarViewCellColorScheme: AdmiralUIKit.CalendarViewCellColorScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public protocol BottomSheetPresentable : AnyObject {
  var panScrollable: UIKit.UIScrollView? { get }
  var topOffset: CoreFoundation.CGFloat { get }
  var shortFormHeight: AdmiralUIKit.BottomSheetHeight { get }
  var longFormHeight: AdmiralUIKit.BottomSheetHeight { get }
  var cornerRadius: CoreFoundation.CGFloat { get }
  var springDamping: CoreFoundation.CGFloat { get }
  var transitionDuration: Swift.Double { get }
  var transitionAnimationOptions: UIKit.UIView.AnimationOptions { get }
  var scrollIndicatorInsets: UIKit.UIEdgeInsets { get }
  var allowsDragToDismiss: Swift.Bool { get }
  var allowsTapToDismiss: Swift.Bool { get }
  var anchorModalToLongForm: Swift.Bool { get }
  var allowsExtendedPanScrolling: Swift.Bool { get }
  var isUserInteractionEnabled: Swift.Bool { get }
  func shouldRespond(to panModalGestureRecognizer: UIKit.UIPanGestureRecognizer) -> Swift.Bool
  func willRespond(to panModalGestureRecognizer: UIKit.UIPanGestureRecognizer)
  func shouldPrioritize(panModalGestureRecognizer: UIKit.UIPanGestureRecognizer) -> Swift.Bool
  func shouldTransition(to state: AdmiralUIKit.BottomSheetPresentationState) -> Swift.Bool
  func willTransition(to state: AdmiralUIKit.BottomSheetPresentationState)
  func panModalWillDismiss()
  func panModalDidDismiss()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ArrowListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ArrowListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct TextMessageListViewScheme : AdmiralTheme.AppThemeScheme {
  public var messageTitleLabelTitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var messageViewBackgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var viewBackgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
extension Swift.String {
  public func toInt() -> Swift.Int?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ButtonListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var didSelect: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ButtonListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TitleWithArrowListView : AdmiralUIKit.BaseListView, AdmiralUIKit.CenterListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TitleWithArrowListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PlainSegmentedControl : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public var selectedSegmentIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfSegments: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setSelectedSegmentIndex(_ index: Swift.Int, animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TextField : AdmiralUIKit.TextFieldInput, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var state: AdmiralUIKit.TextInputState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isSeparatorHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var name: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var info: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var infoNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trailingView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leadingView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leftLabelWidth: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leadingText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trailingViewStyle: AdmiralUIKit.TextInputTrailingViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isMonoSpaceDigitFontEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TextFieldScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func setText(_ text: Swift.String?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setState(_ state: AdmiralUIKit.TextInputState, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setSeparator(hidden: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.BottomSheetPresentable where Self : UIKit.UIViewController {
  public typealias AnimationBlockType = () -> Swift.Void
  public typealias AnimationCompletionType = (Swift.Bool) -> Swift.Void
  public typealias LayoutType = UIKit.UIViewController & AdmiralUIKit.BottomSheetPresentable
  public func panModalTransition(to state: AdmiralUIKit.BottomSheetPresentationState)
  public func panModalSetNeedsLayoutUpdate()
  public func panModalPerformUpdates(_ updates: () -> Swift.Void)
  public func panModalAnimate(_ animationBlock: @escaping Self.AnimationBlockType, _ completion: Self.AnimationCompletionType? = nil)
}
public struct StandardSegmentedScheme : AdmiralTheme.AppThemeScheme {
  public struct ItemScheme {
    public var titleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
    public var titleFont: AdmiralUIKit.ControlParameter<AdmiralTheme.AFont>
  }
  public var itemScheme: AdmiralUIKit.StandardSegmentedScheme.ItemScheme
  public var borderColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var thumbColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@objc public protocol SearchBarDelegate {
  @objc optional func searchBarShouldBeginEditing(_ searchBar: AdmiralUIKit.SearchBar) -> Swift.Bool
  @objc optional func searchBarTextDidBeginEditing(_ searchBar: AdmiralUIKit.SearchBar)
  @objc optional func searchBarShouldEndEditing(_ searchBar: AdmiralUIKit.SearchBar) -> Swift.Bool
  @objc optional func searchBarTextDidEndEditing(_ searchBar: AdmiralUIKit.SearchBar)
  @objc optional func searchBar(_ searchBar: AdmiralUIKit.SearchBar, textDidChange searchText: Swift.String)
  @objc optional func searchBar(_ searchBar: AdmiralUIKit.SearchBar, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc optional func searchBarSearchButtonClicked(_ searchBar: AdmiralUIKit.SearchBar)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SearchBar : UIKit.UIView, UIKit.UITextFieldDelegate, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.SearchBarDelegate?
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var returnKeyType: UIKit.UIReturnKeyType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var searchImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.SearchBarColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum HeaderStyle : Swift.String {
  case title
  case body
  case headline
  case headlineSecondary
  case link
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CalendarViewScheme : AdmiralTheme.AppThemeScheme {
  public var calendarVerticalViewScheme: AdmiralUIKit.CalendarVerticalViewScheme
  public var calendarHorizontalViewScheme: AdmiralUIKit.CalendarHorizontalViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TitleButtonDropDownScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var titleFont: AdmiralTheme.AFont
  public var textColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var ghostButtonScheme: AdmiralUIKit.HeaderButtonWithArrowScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public protocol ButtonDropDownDelegate : AnyObject {
  func tapButtonDropDownButton(_ button: UIKit.UIButton)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ButtonDropDown : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.TitleButtonDropDownDelegate?
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dropDownHeaderType: AdmiralUIKit.DropDownHeaderType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ButtonDropDownScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(buttonTitle: Swift.String?, dropDownHeaderType: AdmiralUIKit.DropDownHeaderType?)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct ActionBarViewSecondaryScheme : AdmiralTheme.AppThemeScheme {
  public struct ActionBarControl {
    public var imageViewAlpha: AdmiralUIKit.ControlParameter<CoreFoundation.CGFloat>
    public var backgroundColor: AdmiralUIKit.ActionBarControlSchemeTwoParameters<AdmiralTheme.AColor>
  }
  public var actionBarControl: AdmiralUIKit.ActionBarViewSecondaryScheme.ActionBarControl
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var imageTintColor: AdmiralTheme.AColor
  public var alpha: CoreFoundation.CGFloat
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ActionBarControlSchemeTwoParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, style: AdmiralUIKit.ActionBarItemImageStyle, control: UIKit.UIControl.State)
  public func parameter(for style: AdmiralUIKit.ActionBarItemImageStyle, control: UIKit.UIControl.State) -> P?
}
public struct Version : Swift.Codable {
  public let internal_version: Swift.String
  public let external_version: Swift.String
  public var versionName: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class LibraryInfo {
  public static var version: AdmiralUIKit.Version? {
    get
  }
  @objc deinit
}
public struct UnderlineSegmentedControlItem {
  public let title: Swift.String?
  public var badgeStyle: AdmiralUIKit.BadgeStyle?
  public let accesibilityId: Swift.String?
  public init(title: Swift.String?, badgeStyle: AdmiralUIKit.BadgeStyle? = nil, accesibilityId: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UnderlineSegmentedControl : AdmiralUIKit.BaseUnderlineSegmentedControl, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) override public var selectedSegmentIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.UnderlineSliderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(items: [AdmiralUIKit.UnderlineSegmentedControlItem?])
  @_Concurrency.MainActor(unsafe) public init(items: [Swift.String?])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setTitles(_ titles: [AdmiralUIKit.UnderlineSegmentedControlItem?])
  @_Concurrency.MainActor(unsafe) public func insertTitle(_ title: Swift.String?, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func insertItem(_ item: AdmiralUIKit.UnderlineSegmentedControlItem?, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeTitle(forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setTitle(_ title: Swift.String?, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setEnabled(_ isEnabled: Swift.Bool, forSegmentAt segment: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func titleForSegment(at segment: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) public func removeAllTitles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TitleSubtitleHeader : UIKit.UIView, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var headerStyle: AdmiralUIKit.HeaderStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.TitleSubtitleHeaderScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, subtitle: Swift.String?, headerStyle: AdmiralUIKit.HeaderStyle = .title)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InputNumberTextField : UIKit.UIControl, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var textFieldState: AdmiralUIKit.TextInputState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var name: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textFieldPlaceholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var stepValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maximumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var inputTextField: UIKit.UITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var minusButtonAccessibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var plusButtonAccessibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textFieldAccessibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.InputNumberTextFieldScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setState(_ state: AdmiralUIKit.TextInputState, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.InputNumberTextField : UIKit.UITextFieldDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func textFieldDidChange(_ textField: AdmiralUIKit.TextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
@objc public protocol CalendarDelegate {
  @objc optional func didSelectDates(dates: [Foundation.Date], itemAt indexPath: Foundation.IndexPath)
  @objc optional func didDeselectDates(dates: [Foundation.Date], forItemAt indexPath: Foundation.IndexPath)
  @objc optional func shouldSelectDate(date: Foundation.Date, itemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func shouldDeselectDate(date: Foundation.Date, forItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func didChangeMonthDate(date: Foundation.Date)
}
public protocol CalendarDataSource : AnyObject {
  var startDate: Foundation.Date { get }
  var endDate: Foundation.Date { get }
}
extension AdmiralUIKit.CalendarDataSource {
  public var startDate: Foundation.Date {
    get
  }
  public var endDate: Foundation.Date {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ImageWithSubtitleListView : AdmiralUIKit.BaseListView, AdmiralUIKit.TralingListViewComponent, AdmiralTheme.AnyAppThemable, AdmiralUIKit.AccessibilitySupport {
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.ImageWithSubtitleListViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var adjustsFontForContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public struct TitleSubtitleButtonListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleTagLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var buttonTitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public var subtitleTagFont: AdmiralTheme.AFont
  public var subtitleFont: AdmiralTheme.AFont
  public var tagViewFont: AdmiralTheme.AFont
  public var ghostButtonFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct FeedBackInputScheme : AdmiralTheme.AppThemeScheme {
  public var defaultColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var selectedColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ChatButtonCustomScheme : AdmiralTheme.AppThemeScheme {
  public var normalTextColor: AdmiralTheme.AColor
  public var disabledTextColor: AdmiralTheme.AColor
  public var backgroundLayerColor: AdmiralTheme.AColor
  public var backgroundNormalColor: AdmiralTheme.AColor
  public var backgroundHightlightedColor: AdmiralTheme.AColor
  public var backgroundDisabledColor: AdmiralTheme.AColor
  public var titleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct SubtitleWithImageListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleLabelTextColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  public var subtitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct InformerSegmentedScheme : AdmiralTheme.AppThemeScheme {
  public struct ItemScheme {
    public var titleFont: AdmiralTheme.AFont
    public var subtitleFont: AdmiralTheme.AFont
    public var titleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
    public var subtitleColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
    public var borderColor: AdmiralUIKit.ControlParameter<AdmiralTheme.AColor>
  }
  public var itemScheme: AdmiralUIKit.InformerSegmentedScheme.ItemScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
extension QuartzCore.CAPropertyAnimation {
  public enum Key : Swift.String {
    case strokeStart
    case strokeEnd
    case strokeColor
    case rotationZ
    case scale
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  convenience public init(key: QuartzCore.CAPropertyAnimation.Key)
}
public struct ActivityIndicatorScheme : AdmiralTheme.AppThemeScheme {
  public var defaultColor: AdmiralTheme.AColor
  public var contrastColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public protocol PinCodeKeyboardDelegate : AnyObject {
  func pincodeViewDidTapItem(_ view: AdmiralUIKit.PinCodeKeyboard, text: Swift.String)
  func pincodeViewDidTapLeftAccessoryItem(_ view: AdmiralUIKit.PinCodeKeyboard)
  func pincodeViewDidTapRightAccessoryItem(_ view: AdmiralUIKit.PinCodeKeyboard)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PinCodeKeyboard : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) public var rightButtonImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leftButtontTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rightButtonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textViewAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.PinCodeKeyboardDelegate?
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.PinCodeKeyboardCustomScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RadioControl : AdmiralUIKit.CheckControl {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public enum CardStatusStyle : Swift.Int {
  case noStatus
  case `default`
  case attention
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CardView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) open var topLabelText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var nameLabelText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var amountLabelText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var statusLabelText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var subtitleLabelText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var topLabelFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var nameLabelFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var amountLabelFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var statusLabelFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var subtitleLabelFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var backgroundImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cardPaymentSystemSecondImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cardPaymenSystemFirstImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var statusImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.CardViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cardStatusStyle: AdmiralUIKit.CardStatusStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func apply(theme: AdmiralTheme.AppTheme)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public enum ProgressViewStyle : Swift.Int {
  case `default`
  case accent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ProgressView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) final public var style: AdmiralUIKit.ProgressViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var trackProgressStyle: AdmiralUIKit.ProgressViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isAnimating: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
public protocol InfoAgreementViewDelegate : AnyObject {
  func checkBoxShouldSelected(_ checkBox: AdmiralUIKit.CheckBox) -> Swift.Bool
}
@objc @_Concurrency.MainActor(unsafe) public class InfoAgreementView : UIKit.UIView, AdmiralTheme.AnyAppThemable {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AdmiralUIKit.InfoAgreementViewDelegate?
  @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var checkboxText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var checkboxButtonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var actionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var alternativeText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var actionButtonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var alternativeButtonAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var checkBoxTextAccesibilityId: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scheme: AdmiralUIKit.InfoAgreementViewScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AdmiralTheme.AppTheme)
  @_Concurrency.MainActor(unsafe) public func add(view: UIKit.UIView, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func remove(view: UIKit.UIView)
  public typealias AssociatedTheme = AdmiralTheme.AppTheme
  @objc deinit
}
extension AdmiralUIKit.InfoAgreementView : AdmiralUIKit.CheckBoxTextButtonViewDelegate {
  @_Concurrency.MainActor(unsafe) public func checkBoxShouldSelected(_ checkBox: AdmiralUIKit.CheckBox) -> Swift.Bool
}
public enum BottomSheetPresentationState {
  case shortForm
  case longForm
  public static func == (a: AdmiralUIKit.BottomSheetPresentationState, b: AdmiralUIKit.BottomSheetPresentationState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AdmiralUIKit.BaseLinkControl.FontStyle : Swift.Equatable {}
extension AdmiralUIKit.BaseLinkControl.FontStyle : Swift.Hashable {}
extension AdmiralUIKit.ChatInputMessageAction : Swift.Equatable {}
extension AdmiralUIKit.ChatInputMessageAction : Swift.Hashable {}
extension AdmiralUIKit.BadgeStyle : Swift.Equatable {}
extension AdmiralUIKit.BadgeStyle : Swift.Hashable {}
extension AdmiralUIKit.BadgeStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.BadgeState : Swift.Equatable {}
extension AdmiralUIKit.BadgeState : Swift.Hashable {}
extension AdmiralUIKit.BadgeState : Swift.RawRepresentable {}
extension AdmiralUIKit.ChatBubbleStatusStyle : Swift.Equatable {}
extension AdmiralUIKit.ChatBubbleStatusStyle : Swift.Hashable {}
extension AdmiralUIKit.ChatBubbleStatusStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.ActionBarViewStyle : Swift.Equatable {}
extension AdmiralUIKit.ActionBarViewStyle : Swift.Hashable {}
extension AdmiralUIKit.ActivityIndicator.Style : Swift.Equatable {}
extension AdmiralUIKit.ActivityIndicator.Style : Swift.Hashable {}
extension AdmiralUIKit.ActivityIndicator.Size : Swift.Equatable {}
extension AdmiralUIKit.ActivityIndicator.Size : Swift.Hashable {}
extension AdmiralUIKit.ActivityIndicator.Size : Swift.RawRepresentable {}
extension AdmiralUIKit.CurrencyCellType : Swift.Equatable {}
extension AdmiralUIKit.CurrencyCellType : Swift.Hashable {}
extension AdmiralUIKit.CheckControlState : Swift.Equatable {}
extension AdmiralUIKit.CheckControlState : Swift.Hashable {}
extension AdmiralUIKit.CheckControlState : Swift.RawRepresentable {}
extension AdmiralUIKit.InformerStyle : Swift.Equatable {}
extension AdmiralUIKit.InformerStyle : Swift.Hashable {}
extension AdmiralUIKit.InformerStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.ToolbarItemType : Swift.Equatable {}
extension AdmiralUIKit.ToolbarItemType : Swift.Hashable {}
extension AdmiralUIKit.ToolbarItemType : Swift.RawRepresentable {}
extension AdmiralUIKit.ToolbarItemStyle : Swift.Equatable {}
extension AdmiralUIKit.ToolbarItemStyle : Swift.Hashable {}
extension AdmiralUIKit.ToolbarSelectionStyle : Swift.Equatable {}
extension AdmiralUIKit.ToolbarSelectionStyle : Swift.Hashable {}
extension AdmiralUIKit.TextOperationViewStyle : Swift.Equatable {}
extension AdmiralUIKit.TextOperationViewStyle : Swift.Hashable {}
extension AdmiralUIKit.TextOperationViewStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.ActionBarItemImageStyle : Swift.Equatable {}
extension AdmiralUIKit.ActionBarItemImageStyle : Swift.Hashable {}
extension AdmiralUIKit.ActionBarItemImageStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.ActionBarItemStyle : Swift.Hashable {}
extension AdmiralUIKit.ToastViewType : Swift.Equatable {}
extension AdmiralUIKit.ToastViewType : Swift.Hashable {}
extension AdmiralUIKit.ToastViewType : Swift.RawRepresentable {}
extension AdmiralUIKit.ToastImageType : Swift.Equatable {}
extension AdmiralUIKit.ToastImageType : Swift.Hashable {}
extension AdmiralUIKit.ToastImageType : Swift.RawRepresentable {}
extension AdmiralUIKit.SeparatorStyle : Swift.Equatable {}
extension AdmiralUIKit.SeparatorStyle : Swift.Hashable {}
extension AdmiralUIKit.UploadImageViewState : Swift.Equatable {}
extension AdmiralUIKit.UploadImageViewState : Swift.Hashable {}
extension AdmiralUIKit.UploadImageViewStyle : Swift.Equatable {}
extension AdmiralUIKit.UploadImageViewStyle : Swift.Hashable {}
extension AdmiralUIKit.UploadImageViewCornerStyle : Swift.Equatable {}
extension AdmiralUIKit.UploadImageViewCornerStyle : Swift.Hashable {}
extension AdmiralUIKit.BannerNotificationDirection : Swift.Equatable {}
extension AdmiralUIKit.BannerNotificationDirection : Swift.Hashable {}
extension AdmiralUIKit.AlertAction.Style : Swift.Equatable {}
extension AdmiralUIKit.AlertAction.Style : Swift.Hashable {}
extension AdmiralUIKit.Shimmer.Direction : Swift.Equatable {}
extension AdmiralUIKit.Shimmer.Direction : Swift.Hashable {}
extension AdmiralUIKit.ChatStatus : Swift.Equatable {}
extension AdmiralUIKit.ChatStatus : Swift.Hashable {}
extension AdmiralUIKit.ChatStatus : Swift.RawRepresentable {}
extension AdmiralUIKit.ChatBubbleState : Swift.Equatable {}
extension AdmiralUIKit.ChatBubbleState : Swift.Hashable {}
extension AdmiralUIKit.ChatDirection : Swift.Equatable {}
extension AdmiralUIKit.ChatDirection : Swift.Hashable {}
extension AdmiralUIKit.ChatDirection : Swift.RawRepresentable {}
extension AdmiralUIKit.TextInputState : Swift.Equatable {}
extension AdmiralUIKit.TextInputState : Swift.Hashable {}
extension AdmiralUIKit.TextInputState : Swift.RawRepresentable {}
extension AdmiralUIKit.TextInputTrailingViewStyle : Swift.Equatable {}
extension AdmiralUIKit.TextInputTrailingViewStyle : Swift.Hashable {}
extension AdmiralUIKit.TextInputTrailingViewStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.StatusHistory : Swift.Equatable {}
extension AdmiralUIKit.StatusHistory : Swift.Hashable {}
extension AdmiralUIKit.StatusHistory : Swift.RawRepresentable {}
extension AdmiralUIKit.StatusHistoryViewType : Swift.Equatable {}
extension AdmiralUIKit.StatusHistoryViewType : Swift.Hashable {}
extension AdmiralUIKit.StatusHistoryViewType : Swift.RawRepresentable {}
extension AdmiralUIKit.StatusHistorySumType : Swift.Equatable {}
extension AdmiralUIKit.StatusHistorySumType : Swift.Hashable {}
extension AdmiralUIKit.StatusHistorySumType : Swift.RawRepresentable {}
extension AdmiralUIKit.CalendarViewType : Swift.Equatable {}
extension AdmiralUIKit.CalendarViewType : Swift.Hashable {}
extension AdmiralUIKit.CalendarViewType : Swift.RawRepresentable {}
extension AdmiralUIKit.CalendarCellState : Swift.Equatable {}
extension AdmiralUIKit.CalendarCellState : Swift.Hashable {}
extension AdmiralUIKit.CalendarCellState : Swift.RawRepresentable {}
extension AdmiralUIKit.TagStyle : Swift.Equatable {}
extension AdmiralUIKit.TagStyle : Swift.Hashable {}
extension AdmiralUIKit.TagStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.CodeInputControl.Style : Swift.Equatable {}
extension AdmiralUIKit.CodeInputControl.Style : Swift.Hashable {}
extension AdmiralUIKit.CodeInputControl.Style : Swift.RawRepresentable {}
extension AdmiralUIKit.CodeInputControl.Status : Swift.Equatable {}
extension AdmiralUIKit.CodeInputControl.Status : Swift.Hashable {}
extension AdmiralUIKit.CodeInputControl.Status : Swift.RawRepresentable {}
extension AdmiralUIKit.SmallInformerArrowDirection : Swift.Equatable {}
extension AdmiralUIKit.SmallInformerArrowDirection : Swift.Hashable {}
extension AdmiralUIKit.CornerRadius : Swift.Equatable {}
extension AdmiralUIKit.CornerRadius : Swift.Hashable {}
extension AdmiralUIKit.CornerRadius : Swift.RawRepresentable {}
extension AdmiralUIKit.TimePickerStates : Swift.Equatable {}
extension AdmiralUIKit.TimePickerStates : Swift.Hashable {}
extension AdmiralUIKit.TimePickerStates : Swift.RawRepresentable {}
extension AdmiralUIKit.UploadDocumentState : Swift.Equatable {}
extension AdmiralUIKit.UploadDocumentState : Swift.Hashable {}
extension AdmiralUIKit.ParagraphStyle : Swift.Equatable {}
extension AdmiralUIKit.ParagraphStyle : Swift.Hashable {}
extension AdmiralUIKit.ParagraphStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.UploadImageGridState : Swift.Equatable {}
extension AdmiralUIKit.UploadImageGridState : Swift.Hashable {}
extension AdmiralUIKit.SeveralPinButtonSize : Swift.Equatable {}
extension AdmiralUIKit.SeveralPinButtonSize : Swift.Hashable {}
extension AdmiralUIKit.InputNumberStyle : Swift.Equatable {}
extension AdmiralUIKit.InputNumberStyle : Swift.Hashable {}
extension AdmiralUIKit.AlertViewImageType : Swift.Equatable {}
extension AdmiralUIKit.AlertViewImageType : Swift.Hashable {}
extension AdmiralUIKit.AlertTitleFontStyle : Swift.Equatable {}
extension AdmiralUIKit.AlertTitleFontStyle : Swift.Hashable {}
extension AdmiralUIKit.AlertTitleFontStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.AlertMessageFontStyle : Swift.Equatable {}
extension AdmiralUIKit.AlertMessageFontStyle : Swift.Hashable {}
extension AdmiralUIKit.AlertMessageFontStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.AlertColorStyle : Swift.Equatable {}
extension AdmiralUIKit.AlertColorStyle : Swift.Hashable {}
extension AdmiralUIKit.AlertColorStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.HeaderStyle : Swift.Equatable {}
extension AdmiralUIKit.HeaderStyle : Swift.Hashable {}
extension AdmiralUIKit.HeaderStyle : Swift.RawRepresentable {}
extension QuartzCore.CAPropertyAnimation.Key : Swift.Equatable {}
extension QuartzCore.CAPropertyAnimation.Key : Swift.Hashable {}
extension QuartzCore.CAPropertyAnimation.Key : Swift.RawRepresentable {}
extension AdmiralUIKit.CardStatusStyle : Swift.Equatable {}
extension AdmiralUIKit.CardStatusStyle : Swift.Hashable {}
extension AdmiralUIKit.CardStatusStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.ProgressViewStyle : Swift.Equatable {}
extension AdmiralUIKit.ProgressViewStyle : Swift.Hashable {}
extension AdmiralUIKit.ProgressViewStyle : Swift.RawRepresentable {}
extension AdmiralUIKit.BottomSheetPresentationState : Swift.Equatable {}
extension AdmiralUIKit.BottomSheetPresentationState : Swift.Hashable {}
