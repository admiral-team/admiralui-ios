#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef ADMIRALUIKIT_SWIFT_H
#define ADMIRALUIKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AdmiralUIKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

/// A view that shows that a task is in progress.
SWIFT_CLASS("_TtC12AdmiralUIKit17ActivityIndicator")
@interface ActivityIndicator : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@interface ActivityIndicator (SWIFT_EXTENSION(AdmiralUIKit))
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Lays out subviews.
- (void)layoutSubviews;
@end

@class NSString;
@class NSBundle;

/// AlertViewController - an custom object that displays an alert message to the user..
/// You can create a AlertViewController with the zero frame rectangle by specifying the following parameters in init:
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - The title of the alert.
///   </li>
///   <li>
///     message: String? - Descriptive text that provides more details about the reason for the alert.
///   </li>
///   <li>
///     image: UIImage? - The image of the alert view.
///   </li>
///   <li>
///     imageSizeType: AlertViewImageType - Type image size alert view.
///   </li>
///   <li>
///     actions: String - The actions that the user can take in response to the alert or action sheet..
///   </li>
///   <li>
///     messageLabelTextAlignment: String - Message label text alignment of alert view.
///   </li>
///   <li>
///     messageFont: String - Message label font style of alert view.
///   </li>
///   <li>
///     titleFont: String - Title label font style of alert view.
///   </li>
///   <li>
///     messageTextColor: String - Message label text color of alert view.
///   </li>
///   <li>
///     titleTextColor: String - Title label text color of alert view.
///   </li>
/// </ul>
/// <h2>Example to create AlertViewController</h2>
/// <h1>Code</h1>
/// \code
///     let vc = AlertViewController()
///     vc.title = "Заголовок в одну или две строки"
///     vc.message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
///     vc.image = Asset.PopUp.popUpImage.image
///
///     vc.modalPresentationStyle = .custom
///     vc.modalTransitionStyle = .crossDissolve
///     let action = AlertAction(title: "Хорошо", style: .primary) { (_) in
///        vc.dismiss(animated: true, completion: nil)
///     }
///     vc.addAction(action)
///
/// \endcodeAn custom object that displays an alert message to the user.
SWIFT_CLASS("_TtC12AdmiralUIKit19AlertViewController")
@interface AlertViewController : UIViewController
/// The title of the alert.
@property (nonatomic, copy) NSString * _Nullable title;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A base class for list view.
SWIFT_CLASS("_TtC12AdmiralUIKit12BaseListView")
@interface BaseListView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A view object with arrow image view.
SWIFT_CLASS("_TtC12AdmiralUIKit13ArrowListView")
@interface ArrowListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// ArrowWithButtonHeader - A header with header title, arrow and button.
/// You can create a TitleArrowWithButtonHeader by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - Title text block
///   </li>
///   <li>
///     buttonTitle: String - Title button
///   </li>
///   <li>
///     buttonAction: () -> () - The callback action by tapping the button
///   </li>
///   <li>
///     renderingMode: Image.TemplateRenderingMode - Rendering mode for image
///   </li>
///   <li>
///     dropDownHeaderType: DropDownHeaderType? - A type of header. DropDownHeaderType can be: up, down, custom
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of header text block. HeaderStyle can be: title, body, headline, headlineSecondary
///   </li>
/// </ul>
/// <h2>Example to create vertical TitleArrowWithButtonHeader:</h2>
/// <h1>Code</h1>
/// \code
///    TitleArrowWithButtonHeader(
///        title: "Title",
///        buttonTitle: "Button",
///        dropDownHeaderType: .up)
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit21ArrowWithButtonHeader")
@interface ArrowWithButtonHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Badge is a component that usually complements other components and shows quantitative scores.
/// For example, a Tabs component can show the number of items in a bookmark. Or show the number of notifications in the notification panel.
SWIFT_CLASS("_TtC12AdmiralUIKit5Badge")
@interface Badge : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit14TextFieldInput")
@interface TextFieldInput : UIView
/// The custom input view to display when the text field becomes the first responder.
@property (nonatomic, strong) UIView * _Nullable inputView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that displays an editable text area for enter sms code.
SWIFT_CLASS("_TtC12AdmiralUIKit17BankCardTextField")
@interface BankCardTextField : TextFieldInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A horizontal control made of multiple segments, each segment functioning as a discrete button.
SWIFT_CLASS("_TtC12AdmiralUIKit33BaseOutlineSliderSegmentedControl")
@interface BaseOutlineSliderSegmentedControl : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;
@class UICollectionViewLayout;

@interface BaseOutlineSliderSegmentedControl (SWIFT_EXTENSION(AdmiralUIKit)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


/// A horizontal control made of multiple segments, each segment functioning as a discrete button.
SWIFT_CLASS("_TtC12AdmiralUIKit29BaseUnderlineSegmentedControl")
@interface BaseUnderlineSegmentedControl : UIControl
/// Current state of UIControl.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


@interface BaseUnderlineSegmentedControl (SWIFT_EXTENSION(AdmiralUIKit)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


/// Informer is a component that used to show some information.
SWIFT_CLASS("_TtC12AdmiralUIKit11BigInformer")
@interface BigInformer : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit31BottomSheetHeaderSmallTitleView")
@interface BottomSheetHeaderSmallTitleView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit34BottomSheetHeaderSubtitleTitleView")
@interface BottomSheetHeaderSubtitleTitleView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit34BottomSheetHeaderTitleSubtitleView")
@interface BottomSheetHeaderTitleSubtitleView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit26BottomSheetHeaderTitleView")
@interface BottomSheetHeaderTitleView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit31BottomSheetPresentationDelegate")
@interface BottomSheetPresentationDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerAnimatedTransitioning;
@class UIPresentationController;

@interface BottomSheetPresentationDelegate (SWIFT_EXTENSION(AdmiralUIKit)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end


/// A header with header title.
SWIFT_CLASS("_TtC12AdmiralUIKit14ButtonDropDown")
@interface ButtonDropDown : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with arrow image view.
SWIFT_CLASS("_TtC12AdmiralUIKit14ButtonListView")
@interface ButtonListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with arrow image view.
SWIFT_CLASS("_TtC12AdmiralUIKit23ButtonWithArrowListView")
@interface ButtonWithArrowListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


@class NSDate;

/// CalendarViews delegate
SWIFT_PROTOCOL("_TtP12AdmiralUIKit16CalendarDelegate_")
@protocol CalendarDelegate
@optional
/// Tells the delegate that the date at the specified index path was selected.
/// \param date The date of the cell that was selected.
///
/// \param indexPath The index path of the cell that was selected.
///
- (void)didSelectDatesWithDates:(NSArray<NSDate *> * _Nonnull)dates itemAt:(NSIndexPath * _Nonnull)indexPath;
/// Tells the delegate that the date at the specified index path was selected.
/// \param date The date of the cell that was selected.
///
/// \param indexPath The index path of the cell that was selected.
///
- (void)didDeselectDatesWithDates:(NSArray<NSDate *> * _Nonnull)dates forItemAt:(NSIndexPath * _Nonnull)indexPath;
/// Tells the delegate that the date at the specified index path will be selected.
/// \param calendar The current Сalendar instance.
///
/// \param date The date of the cell that was selected.
///
/// \param indexPath The index path of the cell that was selected.
///
- (BOOL)shouldSelectDateWithDate:(NSDate * _Nonnull)date itemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the date at the specified index path will be deselected.
/// \param calendar The current Сalendar instance.
///
/// \param date The date of the cell that was selected.
///
/// \param indexPath The index path of the cell that was selected.
///
- (BOOL)shouldDeselectDateWithDate:(NSDate * _Nonnull)date forItemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the month on horizontal calendar did change.
/// \param date The current date on calendar.
///
- (void)didChangeMonthDateWithDate:(NSDate * _Nonnull)date;
@end


/// Calendar view let users select a date, or a range of dates.
/// This component is presented in two versions: Vertical Mode and Horizontal Mode. Additionally, you can configure parameters
/// such as the locale, start date, end date, selected start date, selected end date, the date month that will appear when the calendar appears, and disabled dates after a certain date.
/// The vertical calendar can be scrolled vertically, presented in the form of a table and divided into sections. Each section is a specific month.
/// A horizontal calendar is a display of the month. Switching between months and years is carried out using the left and right buttons. You can also switch between months using picker view.
/// You can create a CalendarView by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     type: Type calendar.
///   </li>
/// </ul>
/// <h2>Example for the vertical calendar view with disabled dates after a current date:</h2>
/// <h1>Code</h1>
/// \code
/// let calendarView = CalendarView(type: .vertical)
/// calendarView.calendarDataSource = self
/// calendarView.calendarDelegate = self
/// calendarView.notActiveAfterDate = Date()
/// calendarView.reloadData()
///
/// \endcodeTo set the start and end date of the calendar, you will need to subscribe
/// to the calendarDataSource and implement startDate and endDate.
/// To receive events about a change in the date range, you must subscribe to the calendarDelegate.
/// <h2>Example for the horizontal calendar view with disabled dates after a current date:</h2>
/// <h1>Code</h1>
/// \code
/// let calendarView = CalendarView(type: .horizontal)
/// calendarView.calendarDataSource = self
/// calendarView.calendarDelegate = self
/// calendarView.notActiveAfterDate = Date()
/// calendarView.reloadData()
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit12CalendarView")
@interface CalendarView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with card image view.
SWIFT_CLASS("_TtC12AdmiralUIKit12CardListView")
@interface CardListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit8CardView")
@interface CardView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// ChatBubbleStatusView - A view for chat message with time.
/// You can create a ChatBubbleStatusView by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     time: String - Time text message
///   </li>
///   <li>
///     status: ChatStatus - A status ChatBubbleView. Can be in the following states: loading, error, sent, receive, read
///   </li>
///   <li>
///     direction: ChatDirection - A direction for text mesage. Can be: left, right
///   </li>
///   <li>
///     time: String - Time text message.
///   </li>
///   <li>
///     style: ChatBubbleStatusStyle - The style ChatBubbleStatusView
///   </li>
/// </ul>
/// <h2>Example to create ChatBubbleStatusView:</h2>
/// <h1>Code</h1>
/// \code
/// let chatStatusBubbleView = ChatBubbleStatusView()
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit20ChatBubbleStatusView")
@interface ChatBubbleStatusView : UIView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit14ChatBubbleView")
@interface ChatBubbleView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The base button class with extended properties for UIControl.State.
SWIFT_CLASS("_TtC12AdmiralUIKit12CustomButton")
@interface CustomButton : UIButton
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit10ChatButton")
@interface ChatButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit13TextViewInput")
@interface TextViewInput : UIView
/// The custom input view to display when the text field becomes the first responder.
@property (nonatomic, strong) UIView * _Nullable inputView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A  multiline text region.
SWIFT_CLASS("_TtC12AdmiralUIKit13ChatInputView")
@interface ChatInputView : TextViewInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;

@interface ChatInputView (SWIFT_EXTENSION(AdmiralUIKit))
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
@end


/// CheckControl - Base class for checkbox and radiobutton.
/// The CheckControl has some internal properties for customizing the element:
/// Internal Properties:
/// <ul>
///   <li>
///     checkState: CheckControlState - State control.
///   </li>
///   <li>
///     isSelected: Bool - A Boolean value indicating whether the control is in the selected state.
///   </li>
///   <li>
///     isEnabled: Bool - A Boolean value indicating whether the control is in the enabled state.
///   </li>
///   <li>
///     isHighlighted: Bool - A Boolean value indicating whether the control is in the highlighted state.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12AdmiralUIKit12CheckControl")
@interface CheckControl : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// A Boolean value indicating whether the control is in the highlighted state.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// CheckBox is element a graphical user interface element allowing the user to control a parameter with two states - enabled and disabled.
/// The Checkboxes has some internal properties for customizing the element:
/// Internal Properties:
/// <ul>
///   <li>
///     checkState: CheckControlState - State control.
///   </li>
///   <li>
///     isSelected: Bool - A Boolean value indicating whether the control is in the selected state.
///   </li>
///   <li>
///     isEnabled: Bool - A Boolean value indicating whether the control is in the enabled state.
///   </li>
///   <li>
///     isHighlighted: Bool - A Boolean value indicating whether the control is in the highlighted state.
///   </li>
/// </ul>
/// Example for create CheckBox:
/// Code
/// \code
/// let checkBox = CheckBox()
/// checkBox.isSelected = true
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit8CheckBox")
@interface CheckBox : CheckControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// A view object with check box view.
SWIFT_CLASS("_TtC12AdmiralUIKit16CheckBoxListView")
@interface CheckBoxListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// CirclePageControl - control to show pages progress in a circle
/// The central element with the icon works as a button, when clicked, the user goes to a new page. Outer circle - shows the number of completed and upcoming pages (steps) as a percentage.
/// The minimum number of steps is 2, the maximum is 8. It is often used in the center of the page.
/// The CirclePageControl has some internal properties for customizing the element:
/// Initializer parameters:
/// <ul>
///   <li>
///     delegate: CirclePageControlDelegate? - CirclePageControl delegate. Deligate must implementation two function:
///     func didTapCenterButton()
///     func didChangePage(page: Int)
///   </li>
///   <li>
///     totalPages: Int - The number of pages of page control
///   </li>
///   <li>
///     duration: TimeInterval - The duration of page change
///   </li>
///   <li>
///     currentPage: Int - The current page of page control
///     Example create CirclePageControl:
///   </li>
/// </ul>
/// Code
/// \code
/// let pageControl = CirclePageControl()
///
/// pageControl.delegate = self
/// pageControl.duration = 0.3
/// pageControl.currentPage = 0
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit17CirclePageControl")
@interface CirclePageControl : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

@class CAAnimation;

@interface CirclePageControl (SWIFT_EXTENSION(AdmiralUIKit)) <CAAnimationDelegate>
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end


/// CircularTrackView - the component that used for showing view with center loading indicator.
/// You can create a CircularTrackView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     style: ProgressViewStyle - The style of progress spinner.
///   </li>
///   <li>
///     isAnimating - The flag that controls animation.
///   </li>
/// </ul>
/// <h2>Example to create ProgressView</h2>
/// <h1>Code</h1>
/// \code
/// let trackView = CircularTrackView()
/// trackView.style = .accent
/// trackView.isAnimating = true
///
/// \endcodeA view with center loading indicator.
SWIFT_CLASS("_TtC12AdmiralUIKit17CircularTrackView")
@interface CircularTrackView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end



/// Abstract class of input control.
SWIFT_CLASS("_TtC12AdmiralUIKit16CodeInputControl")
@interface CodeInputControl : UIControl
/// The type of keyboard to display for a given text-based view.
@property (nonatomic) UIKeyboardType keyboardType;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end



@interface CodeInputControl (SWIFT_EXTENSION(AdmiralUIKit)) <UIKeyInput>
@property (nonatomic, readonly) BOOL hasText;
- (void)insertText:(NSString * _Nonnull)text;
- (void)deleteBackward;
@end


/// A set of optional methods that you use to manage the editing and validation of text in a code input object.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit24CodeInputControlDelegate_")
@protocol CodeInputControlDelegate
@optional
/// Asks the delegate whether to process the pressing of the Return button for the control.
- (void)codeInputControlShouldReturnWithControl:(CodeInputControl * _Nonnull)control;
/// Tells the delegate when editing control input.
- (void)codeInputControlDidFinish:(CodeInputControl * _Nonnull)control text:(NSString * _Nonnull)text;
/// Called when the text has changed.
- (void)codeInputControl:(CodeInputControl * _Nonnull)control textDidChange:(NSString * _Nonnull)text;
/// Asks the delegate whether to change the specified text.
- (BOOL)codeInputControl:(CodeInputControl * _Nonnull)control shouldChange:(NSString * _Nonnull)newString SWIFT_WARN_UNUSED_RESULT;
@end


/// A view object with curcle view.
SWIFT_CLASS("_TtC12AdmiralUIKit18CurcleIconListView")
@interface CurcleIconListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// CurrencyHeaderView - The view for display header currency.
/// You can create a CurrencyHeaderView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     currencyText: String - text for currency
///   </li>
///   <li>
///     buyText: String - text for buy view
///   </li>
///   <li>
///     sellText: String - text for sell view
///   </li>
///   <li>
///     isTextSpacingEnabled: Bool - additional spacing for CurrencyHeaderView
///   </li>
/// </ul>
/// <h2>Example to create CurrencyHeaderView</h2>
/// <h1>Code</h1>
/// \code
/// let header = CurrencyHeaderView(
///    currencyText: "USDT",
///    buyText: "SELL",
///    sellText: BUY,
///    isTextSpacingEnabled: true
/// )
///
/// \endcodeThe view for display header currency.
SWIFT_CLASS("_TtC12AdmiralUIKit18CurrencyHeaderView")
@interface CurrencyHeaderView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// CurrencyView - The view for display currency.
/// You can create a CurrencyView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     currencyText: String - The text that the currency label displays.
///   </li>
///   <li>
///     buyText: String - The text that the buy label displays.
///   </li>
///   <li>
///     sellText: String - The text that the sell label displays.
///   </li>
///   <li>
///     image: UIImage? - The image that the image view displays.
///   </li>
///   <li>
///     buyCellType: CurrencyCellType - A value that configures style of buy price.
///   </li>
///   <li>
///     sellCellType: CurrencyCellType - A value that configures style of sell price.
///   </li>
///   <li>
///     CurrencyCellType - The style of currency cell. Can be: arrowUp (cell with ArrowDown Image), arrowDown (cell without image. There is an indent from the right edge), empty (cell without image. The position of the cell is at the right edge), none
///   </li>
/// </ul>
/// <h2>Example to create CurrencyView</h2>
/// <h1>Code</h1>
/// let currency = CurrencyView()
/// currency.image = Asset.System.Outline.arrowDownOutline.image
/// currency.sellCellType = .arrowUp
/// currency.sellText = “Продать”
/// currency.buyText = “Покупка”
/// currency.buyCellType = .arrowUp
/// currency.currencyText = “Валюта”
/// \code
///
/// The view for display currency.
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit12CurrencyView")
@interface CurrencyView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end




/// A control that offers a binary choice, such as On/Off.
SWIFT_CLASS("_TtC12AdmiralUIKit12CustomSwitch")
@interface CustomSwitch : UISwitch
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// A view object with date and percent label.
SWIFT_CLASS("_TtC12AdmiralUIKit19DatePercentListView")
@interface DatePercentListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// The class that showing a warning message to the user with diffrent options.
SWIFT_CLASS("_TtC12AdmiralUIKit16DefaultAlertView")
@interface DefaultAlertView : UIView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit25DoubleInputRangeTextField")
@interface DoubleInputRangeTextField : UIView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end

@class TextField;
@class UITextField;

@interface DoubleInputRangeTextField (SWIFT_EXTENSION(AdmiralUIKit)) <UITextFieldDelegate>
- (void)textFieldDidChange:(TextField * _Nonnull)textField;
- (void)rightFieldDidChange:(TextField * _Nonnull)textField;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end


/// Text field delegate like standard UITextFieldDelegate of UIKit framework.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit33DoubleInputRangeTextFieldDelegate_")
@protocol DoubleInputRangeTextFieldDelegate
@optional
/// Called when the value of slider has changed. Return slider float value.
- (float)inputRangeTextFieldSliderValue:(DoubleInputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the value of slider has changed. Return text for textfield.
- (NSString * _Nullable)inputRangeTextFieldSliderValueDidChange:(DoubleInputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the minimum value of slider has changed. Return text for minimum value label.
- (NSString * _Nullable)inputRangeTextFieldSliderMinBorderDidChange:(DoubleInputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the maximum value of slider has changed. Return text for maximum value label.
- (NSString * _Nullable)inputRangeTextFieldSliderMaxBorderDidChange:(DoubleInputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
@end


/// A control for selecting a single value from a continuous range of values.
SWIFT_CLASS("_TtC12AdmiralUIKit12DoubleSlider")
@interface DoubleSlider : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@class UITouch;
@class UIEvent;

@interface DoubleSlider (SWIFT_EXTENSION(AdmiralUIKit))
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
@end


/// DropDownHeader - A header with header title, arrow and button.
/// You can create a DropDownHeader by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - Title text block
///   </li>
///   <li>
///     dropDownHeaderType: DropDownHeaderType? - A type of header. DropDownHeaderType can be: up, down, custom
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of title and size view. HeaderStyle can be: title, body, headline, headlineSecondary.
///   </li>
/// </ul>
/// <h2>Example to create DropDownHeader with title and dropDownHeaderType:</h2>
/// <h1>Code</h1>
/// DropDownHeader(title: “Title”, dropDownHeaderType: .down, headerStyle: .title)
SWIFT_CLASS("_TtC12AdmiralUIKit14DropDownHeader")
@interface DropDownHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// ErrorView - the component is used to attract the user’s attention as a message.
/// You can create a ErrorView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     text: String - Information text
///   </li>
///   <li>
///     buttonTitle: String - Title for the button
///   </li>
///   <li>
///     isLoading: Bool - The loading flag of GhostButton. Activates when flag sets to true and dissapier when flag sets to false.
///   </li>
/// </ul>
/// <h2>Example to create ErrorView</h2>
/// <h1>Code</h1>
/// \code
/// let errorView = ErrorView()
/// errorView.text = "button"
/// errrorView.action = {}
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9ErrorView")
@interface ErrorView : UIView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// FeedbackInputControl - A control for presenting star rating with touch and swipe actions.
/// Feedback control is ideal choice for receive feedback from user.
/// <h2>Example to create FeedbackInputControl</h2>
/// <h1>Code</h1>
/// \code
/// let feedbackControl = FeedbackInputControl()
/// feedbackControl.itemsCount = 5
/// feedbackControl.cursorPosition = 3
///
/// \endcodeA control for presenting star rating with touch and swipe actions.
SWIFT_CLASS("_TtC12AdmiralUIKit20FeedbackInputControl")
@interface FeedbackInputControl : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Called when a touch event enters the control’s bounds.
/// <ul>
///   <li>
///     touch: The touch object containing updated information.
///   </li>
///   <li>
///     event: The event object containing the touch event.
///   </li>
/// </ul>
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Called when a touch event for the control updates.
/// \param touch The touch object containing updated information.
///
/// \param event The event object containing the touch event.
///
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end



/// Transparent button. It is used in cases where the main button is not enough, often paired with it when you need to designate several actions, one of which is the main one.
/// You can create a GhostButton with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     isLoading: Bool - Loading flag. Activates an  ActivityIndicator when flag sets to true and dissapier when flag sets to false.
///   </li>
/// </ul>
/// <h2>Example to create GhostButton</h2>
/// <h1>Code</h1>
/// \code
/// let ghostButton = GhostButton()
/// uploadDocumentView.isLoading = false
/// uploadDocumentView.trackProgressStyle = .default
///
/// \endcodeThe view that presents backgound image with loader for uploading and downloading process.
SWIFT_CLASS("_TtC12AdmiralUIKit11GhostButton")
@interface GhostButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// Custom ghost button with left and right titles
SWIFT_CLASS("_TtC12AdmiralUIKit21HeaderButtonWithArrow")
@interface HeaderButtonWithArrow : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A view object with icon view.
SWIFT_CLASS("_TtC12AdmiralUIKit12IconListView")
@interface IconListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit12IconTabsItem")
@interface IconTabsItem : UIControl
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


/// A horizontal control made of multiple segments with icons
SWIFT_CLASS("_TtC12AdmiralUIKit22IconTabsSegmentControl")
@interface IconTabsSegmentControl : UIControl
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// A view object with background view and image view.
SWIFT_CLASS("_TtC12AdmiralUIKit23ImageBackgroundListView")
@interface ImageBackgroundListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with image view.
SWIFT_CLASS("_TtC12AdmiralUIKit13ImageListView")
@interface ImageListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with background view and image view.
SWIFT_CLASS("_TtC12AdmiralUIKit17ImageNameListView")
@interface ImageNameListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with subtitle label and image view.
SWIFT_CLASS("_TtC12AdmiralUIKit25ImageWithSubtitleListView")
@interface ImageWithSubtitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// Complex user interface element which contains checkbox, title label and transparent button with text.
SWIFT_CLASS("_TtC12AdmiralUIKit17InfoAgreementView")
@interface InfoAgreementView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/// A horizontal control made of multiple segments, each segment functioning as a discrete button.
SWIFT_CLASS("_TtC12AdmiralUIKit19TabSegmentedControl")
@interface TabSegmentedControl : UIControl
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// A horizontal control that consists of multiple segments, each segment functioning as a discrete text button.
SWIFT_CLASS("_TtC12AdmiralUIKit27InformerTabSegmentedControl")
@interface InformerTabSegmentedControl : TabSegmentedControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that displays an editable text area with incrementing or decrementing a value.
SWIFT_CLASS("_TtC12AdmiralUIKit11InputNumber")
@interface InputNumber : UIControl
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// InputNumberTextField - A object that displays an editable text area with incrementing or decrementing a value.
/// You can create a InputNumberTextField by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     titleText - leading text
///   </li>
///   <li>
///     value - the numeric value of the stepper
///   </li>
///   <li>
///     minimumValue - the lowest possible numeric value for the stepper
///   </li>
///   <li>
///     maximumValue - the highest possible numeric value for the stepper
///   </li>
///   <li>
///     stepValue - the step, or increment, value for the stepper. The default value for this property is 1.
///   </li>
/// </ul>
/// <h2>Example to create InputNumberTextField:</h2>
/// <h1>Code</h1>
/// \code
/// let inputTextField = InputNumberTextField()
/// inputTextField.maximumValue = 0
/// inputTextField.maximumValue = 9000000
/// inputTextField.value = 0
/// inputTextField.titleText = "Optional label"
/// inputTextField.textFieldPlaceholder = "0"
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit20InputNumberTextField")
@interface InputNumberTextField : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface InputNumberTextField (SWIFT_EXTENSION(AdmiralUIKit)) <UITextFieldDelegate>
- (void)textFieldDidChange:(TextField * _Nonnull)textField;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end



SWIFT_CLASS("_TtC12AdmiralUIKit19InputRangeTextField")
@interface InputRangeTextField : UIView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface InputRangeTextField (SWIFT_EXTENSION(AdmiralUIKit)) <UITextFieldDelegate>
- (void)textFieldDidChange:(TextField * _Nonnull)textField;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end


/// Text field delegate like standard UITextFieldDelegate of UIKit framework.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit27InputRangeTextFieldDelegate_")
@protocol InputRangeTextFieldDelegate
@optional
/// Called when the value of slider has changed. Return slider float value.
- (float)inputRangeTextFieldSliderValue:(InputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the value of slider has changed. Return text for textfield.
- (NSString * _Nullable)inputRangeTextFieldSliderValueDidChange:(InputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the minimum value of slider has changed. Return text for minimum value label.
- (NSString * _Nullable)inputRangeTextFieldSliderMinBorderDidChange:(InputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the maximum value of slider has changed. Return text for maximum value label.
- (NSString * _Nullable)inputRangeTextFieldSliderMaxBorderDidChange:(InputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
@end


/// A view object with card image view.
SWIFT_CLASS("_TtC12AdmiralUIKit19LeadingCardListView")
@interface LeadingCardListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A header with header title.
SWIFT_CLASS("_TtC12AdmiralUIKit14LinkViewHeader")
@interface LinkViewHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object for sign empty list view.
SWIFT_CLASS("_TtC12AdmiralUIKit13ListCellEmpty")
@interface ListCellEmpty : BaseListView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A horizontal control made of multiple segments, each segment functioning as a discrete button.
SWIFT_CLASS("_TtC12AdmiralUIKit21PlainSegmentedControl")
@interface PlainSegmentedControl : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Lays out subviews.
- (void)layoutSubviews;
@end


/// A horizontal control that consists of multiple segments, each segment functioning as a discrete image button.
SWIFT_CLASS("_TtC12AdmiralUIKit7LogoTab")
@interface LogoTab : PlainSegmentedControl
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The style for creating the Map Button. The presented style is used to create buttons on the map
/// You can create a MapButton by specifying the following parameters in the initializer
/// <ul>
///   <li>
///     type - MapButtonType?. The image style of MapButton.
///   </li>
/// </ul>
/// <h2>Example to create button with MapButton:</h2>
/// <h1>Code</h1>
/// \code
/// let button = MapButton()
/// button.type = .plus
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9MapButton")
@interface MapButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// MessageInformer is a component that used to show some information.
SWIFT_CLASS("_TtC12AdmiralUIKit15MessageInformer")
@interface MessageInformer : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This is badge component in which you can set the value using a number, and you can also set the maximum number.
SWIFT_CLASS("_TtC12AdmiralUIKit11NumberBadge")
@interface NumberBadge : Badge
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that displays an editable text area for enter sms code.
SWIFT_CLASS("_TtC12AdmiralUIKit12OTPTextField")
@interface OTPTextField : TextFieldInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A horizontal control with scroll that consists of multiple segments, each segment functioning as a discrete text button.
SWIFT_CLASS("_TtC12AdmiralUIKit32OutlineSliderTabSegmentedControl")
@interface OutlineSliderTabSegmentedControl : BaseOutlineSliderSegmentedControl
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit11PageControl")
@interface PageControl : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// Paragraph - A group of text components exists in several variants.
/// You can create a ParagraphView by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - The text that the label displays
///   </li>
///   <li>
///     paragraphType: ParagaphImageType? - A type of paragraph Image. Can be: point, check, custom (your image)
///   </li>
///   <li>
///     leadingImage: UImage? - Leading image.
///   </li>
///   <li>
///     trailingImage: UImage? - Trailing image.
///   </li>
///   <li>
///     paragraphStyle: ParagraphStyle - A style of Paragraph fount and text color. Can be primary or secondary.
///   </li>
///   <li>
///     textAligment: TextAlignment - Alignment text
///   </li>
/// </ul>
/// <h2>Example to create Paragraph with different parameters:</h2>
/// <h1>Code</h1>
/// \code
/// let pointParagraph = Paragraph()
/// pointParagraph.title = titleSmallText
/// pointParagraph.paragraphStyle = style
/// pointParagraph.paragraphType = .point
/// views.append(ParagraphCellView(paragraph: pointParagraph, titleText: titleText))
///
/// let checkParagraph = Paragraph()
/// checkParagraph.title = titleSmallText
/// checkParagraph.paragraphStyle = style
/// checkParagraph.paragraphType = .check
/// views.append(ParagraphCellView(paragraph: checkParagraph))
///
/// let leftParagraph = Paragraph()
/// leftParagraph.title = titleLargeText
/// leftParagraph.paragraphStyle = style
/// views.append(ParagraphCellView(paragraph: leftParagraph, heightParagraph: LayoutGrid.doubleModule * 5))
///
/// let rightParagraph = Paragraph()
/// rightParagraph.title = titleLargeText
/// rightParagraph.paragraphStyle = style
/// rightParagraph.traillingImage = Asset.Card.info.image
/// views.append(ParagraphCellView(paragraph: rightParagraph, heightParagraph: LayoutGrid.doubleModule * 5))
///
/// let centrLargeParagraph = Paragraph()
/// centrLargeParagraph.title = titleLargeText
/// centrLargeParagraph.textAligment = .center
/// centrLargeParagraph.paragraphStyle = style
/// views.append(ParagraphCellView(paragraph: centrLargeParagraph, heightParagraph: LayoutGrid.doubleModule * 5))
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9Paragraph")
@interface Paragraph : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The style for creating the Pin Button. Pin Button - tеhe component displays the position of the object on the map, exists in two states: Default and Selected. It is also possible to change the company logo inside the component or install an icon.
/// You can create a PinButtonStyle by specifying the following parameters in the initializer
/// <ul>
///   <li>
///     image - value of UIImage. The image is used to set the icon of the element
///   </li>
///   <li>
///     isSelected - Bool. Observable property for displaying the selected checkbox
///   </li>
/// </ul>
/// <h2>Example to create :</h2>
/// <h1>Code</h1>
/// \code
/// let button = PinButton()
/// button.isSelected = true
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9PinButton")
@interface PinButton : CustomButton
/// The selection mark of PinButton.
@property (nonatomic, getter=isSelected) BOOL selected;
/// The content size of PinButton.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end



/// Control to input secure text pin code etc.
SWIFT_CLASS("_TtC12AdmiralUIKit12PinCodeInput")
@interface PinCodeInput : CodeInputControl
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A horizontal control made of multiple segments with icons
SWIFT_CLASS("_TtC12AdmiralUIKit15PinCodeKeyboard")
@interface PinCodeKeyboard : UIView
/// Initializes and returns a newly allocated view object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit17PinCodeNumberView")
@interface PinCodeNumberView : UIControl
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit15PinCodeTextView")
@interface PinCodeTextView : UIControl
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



/// Main button. Used for the most important actions. It is advisable to use one such button on the screen.
/// You can create a button with an activity indicator instead of text. In this case, the text that you pass to the Button will not be shown, but the activity indicator will be shown instead:
/// You can add accessibilityIdentifier (a string that identifies the element) in PlatformButton
/// <h1>Code PlatformButton width image</h1>
/// \code
/// let button = PlatformButton()
///     button.setTitle(name, for: .normal)
///     button.setImage(image, for: .normal)
///     button.setImage(image, for: .highlighted)
///     button.semanticContentAttribute = .forceLeftToRight
///     button.imageEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: LayoutGrid.doubleModule)
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit14PlatformButton")
@interface PlatformButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// Main button. Used for the most important actions. It is advisable to use one such button on the screen.
SWIFT_CLASS("_TtC12AdmiralUIKit13PrimaryButton")
@interface PrimaryButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// ProgressView - the component that used for showing view with center loading indicator.
/// You can create a ProgressView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     style: ProgressViewStyle - The style of progress spinner.
///   </li>
///   <li>
///     centerView: UIView - Central view of progress view.
///   </li>
///   <li>
///     trackProgressStyle: ProgressViewStyle - Loading circle style.
///   </li>
///   <li>
///     isAnimating: Bool - The flag that controls animation of trackView.
///   </li>
/// </ul>
/// <h2>Example to create ProgressView</h2>
/// <h1>Code</h1>
/// \code
/// let trackView = ProgressView()
/// trackView.style = .accent
/// trackView.centerView = UIImageView()
/// trackView.trackProgressStyle = .accent
/// trackView.isAnimating = true
///
/// \endcodeA view with center loading indicator.
SWIFT_CLASS("_TtC12AdmiralUIKit12ProgressView")
@interface ProgressView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


/// A view object with radio button.
SWIFT_CLASS("_TtC12AdmiralUIKit19RadioButtonListView")
@interface RadioButtonListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// RadioControl is an interface element that allows the user to select one option (item) from a predefined set (group).
/// The RadioControl has some internal properties for customizing the element:
/// Internal Properties:
/// <ul>
///   <li>
///     checkState: CheckControlState - State control.
///   </li>
///   <li>
///     isSelected: Bool - A Boolean value indicating whether the control is in the selected state.
///   </li>
///   <li>
///     isEnabled: Bool - A Boolean value indicating whether the control is in the enabled state.
///   </li>
///   <li>
///     isHighlighted: Bool - A Boolean value indicating whether the control is in the highlighted state.
///   </li>
/// </ul>
/// Example for create RadioControl
/// Code
/// \code
/// let checkBox = RadioControl()
/// checkBox.isSelected = true
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit12RadioControl")
@interface RadioControl : CheckControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// ScrollablePageControl - A horizontal page control logically corresponds to the Circle option, while there is an additional option to switch pages using a swipe of the whole page. Additionally, when using this option, it is necessary to provide for the use of the “Next” button.
/// The ScrollablePageControl has some internal properties for customizing the element:
/// Internal Properties:
/// <ul>
///   <li>
///     currentPage: Int - Returns the current selected page of pafge control
///   </li>
///   <li>
///     numberOfPages: Int - The total number of pages of page control
///   </li>
///   <li>
///     hidesForSinglePage: Bool - The boolean valued indicates if page control isHidden if numberOfPages == 0
///   </li>
///   <li>
///     displayedItems: Int - The number of page control items that are currently displayed
///   </li>
/// </ul>
/// Example to create ScrollablePageControl:
/// Code
/// \code
/// let pageControl = ScrollablePageControl()
/// pageControl.numberOfPages = 5
/// pageControl.setCurrentPage(at: 0)
///
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit21ScrollablePageControl")
@interface ScrollablePageControl : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// A specialized view for receiving search-related information from the user.
SWIFT_CLASS("_TtC12AdmiralUIKit9SearchBar")
@interface SearchBar : UIView <UITextFieldDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end


/// A collection of optional methods that you implement to make a search bar control functional.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit17SearchBarDelegate_")
@protocol SearchBarDelegate
@optional
/// Asks the delegate if editing should begin in the specified search bar.
- (BOOL)searchBarShouldBeginEditing:(SearchBar * _Nonnull)searchBar SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the user begins editing the search text.
- (void)searchBarTextDidBeginEditing:(SearchBar * _Nonnull)searchBar;
/// Asks the delegate if editing should stop in the specified search bar.
- (BOOL)searchBarShouldEndEditing:(SearchBar * _Nonnull)searchBar SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the user finished editing the search text.
- (void)searchBarTextDidEndEditing:(SearchBar * _Nonnull)searchBar;
/// Tells the delegate that the user changed the search text.
- (void)searchBar:(SearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
/// Ask the delegate if text in a specified range should be replaced with given text.
- (BOOL)searchBar:(SearchBar * _Nonnull)searchBar shouldChangeTextIn:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)searchBarSearchButtonClicked:(SearchBar * _Nonnull)searchBar;
@end


/// Secondary button. Used for additional actions. It can be used as a stand-alone button or paired with a transparent button.
SWIFT_CLASS("_TtC12AdmiralUIKit15SecondaryButton")
@interface SecondaryButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// A view object with title.
SWIFT_CLASS("_TtC12AdmiralUIKit22SecondaryTitleListView")
@interface SecondaryTitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// Separator - separator element with height equal 16 points, exist in three different variants.
/// <ul>
///   <li>
///     long - separator whole width
///   </li>
///   <li>
///     short - separator width padding 8 points
///   </li>
///   <li>
///     empty - empty line width height
///   </li>
/// </ul>
/// You can create a Separator by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     separatorStyle: SeparatorStyle - style of separator
///   </li>
/// </ul>
/// <h2>Example to create Separator:</h2>
/// Separator(separatorStyle: .short)
SWIFT_CLASS("_TtC12AdmiralUIKit9Separator")
@interface Separator : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The style for creating the Several Pin Button. Several Pin Button - the component displays the position of several objects on the map at one point, exists in three sizes: Small, Medium and Big - use the appropriate one depending on the number of characters.
/// You can create a SeveralPinButtonStyle by specifying the following parameters in the initializer
/// <ul>
///   <li>
///     style - the size. The image is used to set the icon of the element
///   </li>
/// </ul>
/// <h2>Example to create :</h2>
/// <h1>Code</h1>
/// \code
/// let button = SeveralPinButton()
/// button.style = .medium
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit16SeveralPinButton")
@interface SeveralPinButton : CustomButton
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// Shimmering View
SWIFT_CLASS("_TtC12AdmiralUIKit14ShimmeringView")
@interface ShimmeringView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


/// A control for selecting a single value from a continuous range of values.
SWIFT_CLASS("_TtC12AdmiralUIKit6Slider")
@interface Slider : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@interface Slider (SWIFT_EXTENSION(AdmiralUIKit))
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
@end


/// Informer is a component that used to show some information.
SWIFT_CLASS("_TtC12AdmiralUIKit13SmallInformer")
@interface SmallInformer : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A horizontal control that consists of multiple segments, each segment functioning as a discrete text button.
SWIFT_CLASS("_TtC12AdmiralUIKit24StandardSegmentedControl")
@interface StandardSegmentedControl : PlainSegmentedControl
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Status history view.
SWIFT_CLASS("_TtC12AdmiralUIKit17StatusHistoryView")
@interface StatusHistoryView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/// SubtitleTitleHeader - A header with header title and subtitle.
/// You can create a StandardTab by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - Title text block
///   </li>
///   <li>
///     subtitle: String? - Subtitle text block
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of title and subtitle text block. HeaderStyle can be: itle, body, headline, headlineSecondary, dropDown, paragraph, paragraphSecondary, link, separator, separatorShort, separatorEmpty
///   </li>
/// </ul>
/// <h2>Example to create vertical ToolBar:</h2>
/// <h1>Code</h1>
/// \code
///    SubtitleTitleHeader(title: "Title", subtitle: "Subtitle")
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit19SubtitleTitleHeader")
@interface SubtitleTitleHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with subtitle and title.
SWIFT_CLASS("_TtC12AdmiralUIKit21SubtitleTitleListView")
@interface SubtitleTitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with subtitle label and image view.
SWIFT_CLASS("_TtC12AdmiralUIKit25SubtitleWithImageListView")
@interface SubtitleWithImageListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with switch view.
SWIFT_CLASS("_TtC12AdmiralUIKit14SwitchListView")
@interface SwitchListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC12AdmiralUIKit9TextField")
@interface TextField : TextFieldInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface TextFieldInput (SWIFT_EXTENSION(AdmiralUIKit)) <UITextFieldDelegate>
- (void)textFieldDidChange:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidChangeSelection:(UITextField * _Nonnull)textField;
@end

@class UITextPosition;
@class UITextRange;

@interface TextFieldInput (SWIFT_EXTENSION(AdmiralUIKit)) <UITextInputTraits>
/// Identifies whether the text object should disable text copying and in some cases hide the text being entered.
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
/// A Boolean value that indicates whether the text-entry objects has any text.
@property (nonatomic, readonly) BOOL hasText;
/// Insert a character into the displayed text.
- (void)insertText:(NSString * _Nonnull)text;
/// Delete a character from the displayed text.
- (void)deleteBackward;
/// The auto-capitalization style for the text object.
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
/// The autocorrection style for the text object.
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
/// The spell-checking style for the text object.
@property (nonatomic) UITextSpellCheckingType spellCheckingType;
/// The configuration state for smart quotes.
@property (nonatomic) UITextSmartQuotesType smartQuotesType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The configuration state for smart dashes.
@property (nonatomic) UITextSmartDashesType smartDashesType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The configuration state for the smart insertion and deletion of space characters.
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The keyboard style associated with the text object.
@property (nonatomic) UIKeyboardType keyboardType;
/// The visible title of the Return key.
@property (nonatomic) UIReturnKeyType returnKeyType;
/// The appearance style of the keyboard that is associated with the text object.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// A Boolean value indicating whether the Return key is automatically enabled when the user is entering text.
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
/// The semantic meaning expected by a text input area.
@property (nonatomic) UITextContentType _Nonnull textContentType;
/// The text position for the beginning of a document.
@property (nonatomic, readonly, strong) UITextPosition * _Nonnull beginningOfDocument;
/// The range of selected text in a document.
@property (nonatomic, strong) UITextRange * _Nullable selectedTextRange;
/// Return the number of UTF-16 characters between one text position and another text position.
/// \param from A custom object that represents a location within a document.
///
/// \param toPosition A custom object that represents another location within document.
///
- (NSInteger)offsetFrom:(UITextPosition * _Nonnull)from to:(UITextPosition * _Nonnull)toPosition SWIFT_WARN_UNUSED_RESULT;
/// Returns the text position at a given offset from another text position.
/// \param position A custom UITextPosition object that represents a location in a document.
///
/// \param offset A custom object that represents another location within document.
///
- (UITextPosition * _Nullable)positionFrom:(UITextPosition * _Nonnull)position offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
/// Return the range between two text positions.
/// \param fromPosition An object that represents a location in a document.
///
/// \param toPosition An object that represents another location in a document.
///
- (UITextRange * _Nullable)textRangeFrom:(UITextPosition * _Nonnull)fromPosition to:(UITextPosition * _Nonnull)toPosition SWIFT_WARN_UNUSED_RESULT;
@end


/// Text field delegate like standard UITextFieldDelegate of UIKit framework.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit22TextFieldInputDelegate_")
@protocol TextFieldInputDelegate
@optional
/// Called when the text has changed.
- (void)textFieldInputDidChange:(TextFieldInput * _Nonnull)textField;
/// Asks the delegate whether to begin editing in the specified text field.
- (BOOL)textFieldInputShouldBeginEditing:(TextFieldInput * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when editing begins in the specified text field.
- (void)textFieldInputDidBeginEditing:(TextFieldInput * _Nonnull)textField;
/// Asks the delegate whether to stop editing in the specified text field.
- (BOOL)textFieldInputShouldEndEditing:(TextFieldInput * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when editing stops for the specified text field.
- (void)textFieldInputDidEndEditing:(TextFieldInput * _Nonnull)textField;
/// Tells the delegate when editing stops for the specified text field, and the reason it stopped.
- (void)textFieldInputDidEndEditing:(TextFieldInput * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason;
/// Asks the delegate whether to change the specified text.
- (BOOL)textFieldInput:(TextFieldInput * _Nonnull)textField shouldChangeCharactersIn:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether to remove the text field’s current contents.
- (BOOL)textFieldInputShouldClear:(TextFieldInput * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether to process the pressing of the Return button for the text field.
- (BOOL)textFieldInputShouldReturn:(TextFieldInput * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the text selection changes in the specified text field.
- (void)textFieldInputDidChangeSelection:(TextFieldInput * _Nonnull)textField;
@end


/// A view object with text message view.
SWIFT_CLASS("_TtC12AdmiralUIKit19TextMessageListView")
@interface TextMessageListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


/// A component that presents a rounded view with title, description and chatBubbleStatusView.
SWIFT_CLASS("_TtC12AdmiralUIKit17TextOperationView")
@interface TextOperationView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A  multiline text region.
SWIFT_CLASS("_TtC12AdmiralUIKit8TextView")
@interface TextView : TextViewInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class NSURL;
@class NSTextAttachment;

@interface TextViewInput (SWIFT_EXTENSION(AdmiralUIKit)) <UITextViewDelegate>
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
@end


@interface TextViewInput (SWIFT_EXTENSION(AdmiralUIKit)) <UITextInputTraits>
/// Identifies whether the text object should disable text copying and in some cases hide the text being entered.
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
/// A Boolean value that indicates whether the text-entry objects has any text.
@property (nonatomic, readonly) BOOL hasText;
/// Insert a character into the displayed text.
- (void)insertText:(NSString * _Nonnull)text;
/// Delete a character from the displayed text.
- (void)deleteBackward;
/// The auto-capitalization style for the text object.
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
/// The autocorrection style for the text object.
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
/// The spell-checking style for the text object.
@property (nonatomic) UITextSpellCheckingType spellCheckingType;
/// The configuration state for smart quotes.
@property (nonatomic) UITextSmartQuotesType smartQuotesType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The configuration state for smart dashes.
@property (nonatomic) UITextSmartDashesType smartDashesType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The configuration state for the smart insertion and deletion of space characters.
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The keyboard style associated with the text object.
@property (nonatomic) UIKeyboardType keyboardType;
/// The visible title of the Return key.
@property (nonatomic) UIReturnKeyType returnKeyType;
/// The appearance style of the keyboard that is associated with the text object.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// A Boolean value indicating whether the Return key is automatically enabled when the user is entering text.
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
/// The semantic meaning expected by a text input area.
@property (nonatomic) UITextContentType _Nonnull textContentType;
/// The text position for the beginning of a document.
@property (nonatomic, readonly, strong) UITextPosition * _Nonnull beginningOfDocument;
/// Return the number of UTF-16 characters between one text position and another text position.
/// \param from A custom object that represents a location within a document.
///
/// \param toPosition A custom object that represents another location within document.
///
- (NSInteger)offsetFrom:(UITextPosition * _Nonnull)from to:(UITextPosition * _Nonnull)toPosition SWIFT_WARN_UNUSED_RESULT;
/// Returns the text position at a given offset from another text position.
/// \param position A custom UITextPosition object that represents a location in a document.
///
/// \param offset A custom object that represents another location within document.
///
- (UITextPosition * _Nullable)positionFrom:(UITextPosition * _Nonnull)position offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
/// Return the range between two text positions.
/// \param fromPosition An object that represents a location in a document.
///
/// \param toPosition An object that represents another location in a document.
///
- (UITextRange * _Nullable)textRangeFrom:(UITextPosition * _Nonnull)fromPosition to:(UITextPosition * _Nonnull)toPosition SWIFT_WARN_UNUSED_RESULT;
@end


/// Text view delegate like standard UITextFieldView of UIKit framework.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit21TextViewInputDelegate_")
@protocol TextViewInputDelegate
@optional
/// Asks the delegate whether to begin editing in the specified text view.
- (BOOL)textViewInputShouldBeginEditing:(TextViewInput * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether to stop editing in the specified text view.
- (BOOL)textViewInputShouldEndEditing:(TextViewInput * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when editing of the specified text view begins.
- (void)textViewInputDidBeginEditing:(TextViewInput * _Nonnull)textView;
/// Tells the delegate when editing of the specified text view ends.
- (void)textViewInputDidEndEditing:(TextViewInput * _Nonnull)textView;
/// Asks the delegate whether to replace the specified text in the text view.
- (BOOL)textViewInput:(TextViewInput * _Nonnull)textView shouldChangeTextIn:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the user changes the text or attributes in the specified text view.
- (void)textViewInputDidChange:(TextViewInput * _Nonnull)textView;
/// Tells the delegate when the text selection changes in the specified text view.
- (void)textViewInputDidChangeSelection:(TextViewInput * _Nonnull)textView;
/// Asks the delegate whether the specified text view allows the specified type of user interaction with the specified URL in the specified range of text.
- (BOOL)textViewInput:(TextViewInput * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)shouldInteractWithURL in:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether the specified text view allows the specified type of user interaction with the provided text attachment in the specified range of text.
- (BOOL)textViewInput:(TextViewInput * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)shouldInteractWithTextAttachment in:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit10TimePicker")
@interface TimePicker : UIControl <UIKeyInput>
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// IntrinsicContentSize of control
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, readonly) BOOL hasText;
@property (nonatomic) UIKeyboardType keyboardType;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)insertText:(NSString * _Nonnull)text;
- (void)deleteBackward;
@end



/// A header with header title.
SWIFT_CLASS("_TtC12AdmiralUIKit19TitleButtonDropDown")
@interface TitleButtonDropDown : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// TitleHeader - A header with header title, arrow and button.
/// You can create a TitleHeader by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - The text that the label displays
///   </li>
///   <li>
///     textAligment: NSTextAlignment - Alignment title text block
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of title and size view. HeaderStyle can be: title, body, headline, headlineSecondary.
///   </li>
/// </ul>
/// <h2>Example to create TitleHeader with title and textAligment:</h2>
/// TitleHeader(title: “Title”, textAligment: .left, headerStyle: .title)
SWIFT_CLASS("_TtC12AdmiralUIKit11TitleHeader")
@interface TitleHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with title and subtitle.
SWIFT_CLASS("_TtC12AdmiralUIKit26TitleLargeSubtitleListView")
@interface TitleLargeSubtitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with title.
SWIFT_CLASS("_TtC12AdmiralUIKit13TitleListView")
@interface TitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A view object with title, more label, detaile label and message view..
SWIFT_CLASS("_TtC12AdmiralUIKit34TitleMoreDetailTextMessageListView")
@interface TitleMoreDetailTextMessageListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with title, subtitle and button.
SWIFT_CLASS("_TtC12AdmiralUIKit27TitleSubtitleButtonListView")
@interface TitleSubtitleButtonListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// TitleSubtitleHeader - A header with header title and subtitle.
/// You can create a StandardTab by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - Title text block
///   </li>
///   <li>
///     subtitle: String? - Subtitle text block
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of title and subtitle text block. HeaderStyle can be: itle, body, headline, headlineSecondary, dropDown, paragraph, paragraphSecondary, link, separator, separatorShort, separatorEmpty
///   </li>
/// </ul>
/// <h2>Example to create vertical ToolBar:</h2>
/// <h1>Code</h1>
/// \code
///    TitleSubtitleHeader(title: "Title", subtitle: "Subtitle")
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit19TitleSubtitleHeader")
@interface TitleSubtitleHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with title and subtitle.
SWIFT_CLASS("_TtC12AdmiralUIKit21TitleSubtitleListView")
@interface TitleSubtitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with title.
SWIFT_CLASS("_TtC12AdmiralUIKit22TitleWithArrowListView")
@interface TitleWithArrowListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// ToastView - An input field with an informer. It is necessary if additional information may be required to fill in the field correctly.
/// You can create a ToastView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     title: Title of the toast.
///   </li>
///   <li>
///     linkText: Title of link button.
///   </li>
///   <li>
///     linkAction: Callback of the link button. If callback equal nil link button is hidden.
///   </li>
///   <li>
///     image: Image of the toast. If image equal nil image is hidden.
///   </li>
///   <li>
///     imageType: Type image.
///   </li>
///   <li>
///     imageColorType: Type color image.
///   </li>
///   <li>
///     closeAction: Callback of the close button. If callback equal nil close button is hidden.
///   </li>
///   <li>
///     type: Type color background toast.
///   </li>
/// </ul>
/// <h2>Example to create ToastView</h2>
/// <h1>Code</h1>
/// \code
/// let toastView = ToastView()
/// toastView.title = "Text"
/// toastView.linkText = "LinkText"
/// toastView.type = .default
/// toastView.imageType = .success
/// toastView.linkAction = {}
/// toastView.closeAction ={}
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9ToastView")
@interface ToastView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Toolbar
SWIFT_CLASS("_TtC12AdmiralUIKit7Toolbar")
@interface Toolbar : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// Custom button with left and right titles
SWIFT_CLASS("_TtC12AdmiralUIKit14TwoTitleButton")
@interface TwoTitleButton : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// Custom ghost button with left and right titles
SWIFT_CLASS("_TtC12AdmiralUIKit19TwoTitleGhostButton")
@interface TwoTitleGhostButton : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end











/// A horizontal control with scroll that consists of multiple segments, each segment functioning as a discrete text button.
SWIFT_CLASS("_TtC12AdmiralUIKit25UnderlineSegmentedControl")
@interface UnderlineSegmentedControl : BaseUnderlineSegmentedControl
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end


/// UploadDocumentView - the component that presents a view with loader for uploading and downloading tasks.
/// You can create a UploadDocumentView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     state: UploadDocumentState - The current state of UploadDocumentView.
///   </li>
///   <li>
///     direction: ChatDirection - The direction of chatBubbleStatusView.
///   </li>
///   <li>
///     fileName: String? - The text of file name label.
///   </li>
///   <li>
///     fileSize: String? - The text of file file size label.
///   </li>
///   <li>
///     chatStatus: ChatStatus? - The status of chatBubbleStatusView.
///   </li>
///   <li>
///     trackProgressStyle: ProgressViewStyle - Loading circle style.
///   </li>
///   <li>
///     isAnimating: Bool - The flag that controls animation of trackView.
///   </li>
///   <li>
///     chatTime: String? - The time of chatBubbleStatusView.
///   </li>
///   <li>
///     progressCircleStyle: ProgressViewStyle? - The style of ProgressView.
///   </li>
///   <li>
///     trackProgressStyle: ProgressViewStyle - The style of CircularProgressView.
///   </li>
/// </ul>
/// <h2>Example to create UploadDocumentView</h2>
/// <h1>Code</h1>
/// \code
/// let uploadDocumentView = UploadDocumentView()
/// uploadDocumentView.state = .loading
/// uploadDocumentView.fileName = "File.pdf"
/// uploadDocumentView.fileSize = "282 MB"
/// uploadDocumentView.trackProgressStyle = .default
/// uploadDocumentView.direction = .left
/// uploadDocumentView.chatTime = "12:53"
///
/// \endcodeA view with center loading indicator.
SWIFT_CLASS("_TtC12AdmiralUIKit18UploadDocumentView")
@interface UploadDocumentView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// UploadImageGridView - the component that presents a container view with some models.
/// You can create a UploadImageGridView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     direction: ChatDirection - The direction of chatBubbleStatusView.
///   </li>
///   <li>
///     chatStatus: ChatStatus? - The status of chatBubbleStatusView.
///   </li>
///   <li>
///     chatTime: String? - The time of chatBubbleStatusView.
///   </li>
///   <li>
///     state: UploadImageGridState - The state of UploadImageGridView.
///   </li>
///   <li>
///     models: [UploadImageModel] - The initial models.
///   </li>
/// </ul>
/// <h2>Example to create UploadDocumentView</h2>
/// <h1>Code</h1>
/// \code
/// let uploadImageGridView = UploadImageGridView()
/// uploadDocumentView.direction = .left
/// uploadDocumentView.chatStatus = .receive
/// uploadDocumentView.chatTime = "12:53"
///
/// \endcodeA view with center loading indicator.
SWIFT_CLASS("_TtC12AdmiralUIKit19UploadImageGridView")
@interface UploadImageGridView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/// UploadImageView - the component that presents backgound image with loader for uploading and downloading tasks.
/// You can create a UploadImageView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     state: UploadDocumentState - The current state of UploadDocumentView.
///   </li>
///   <li>
///     isAnimating: Bool - The flag that controls animation of trackView.
///   </li>
///   <li>
///     progressCircleStyle: ProgressViewStyle? - The style of ProgressView.
///   </li>
///   <li>
///     trackProgressStyle: ProgressViewStyle - The style of CircularProgressView.
///   </li>
/// </ul>
/// <h2>Example to create UploadImageView</h2>
/// <h1>Code</h1>
/// \code
/// let uploadImageView = UploadImageView()
/// uploadDocumentView.state = .loading
/// uploadDocumentView.trackProgressStyle = .default
///
/// \endcodeThe view that presents backgound image with loader for uploading and downloading process.
SWIFT_CLASS("_TtC12AdmiralUIKit15UploadImageView")
@interface UploadImageView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



/// ZeroScreenView - the component is used to attract the user’s attention as a message. A view with title, subtitle and image.
/// You can create a ZeroScreenView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     delegate: ZeroScreenViewDelegate? - The delegate of ZeroScreenView (tap button).
///   </li>
///   <li>
///     image: Image - The image displayed in the image view.
///   </li>
///   <li>
///     title: String - The text that the title label displays.
///   </li>
///   <li>
///     subTitle: String - The text that the subtitle label displays.
///   </li>
///   <li>
///     buttonTitle: String - The text that the button displays.
///   </li>
/// </ul>
/// <h2>Example to create ZeroScreenView</h2>
/// <h1>Code</h1>
/// \code
/// ZeroScreenView(
///                image: Asset.Onboarding.one.image,
///                title: Constants.title,
///                subTitle: Constants.subTitle,
///                buttonTitle: Constants.buttonTitle)
///
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit14ZeroScreenView")
@interface ZeroScreenView : UIView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef ADMIRALUIKIT_SWIFT_H
#define ADMIRALUIKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AdmiralUIKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

/// A view that shows that a task is in progress.
SWIFT_CLASS("_TtC12AdmiralUIKit17ActivityIndicator")
@interface ActivityIndicator : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@interface ActivityIndicator (SWIFT_EXTENSION(AdmiralUIKit))
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Lays out subviews.
- (void)layoutSubviews;
@end

@class NSString;
@class NSBundle;

/// AlertViewController - an custom object that displays an alert message to the user..
/// You can create a AlertViewController with the zero frame rectangle by specifying the following parameters in init:
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - The title of the alert.
///   </li>
///   <li>
///     message: String? - Descriptive text that provides more details about the reason for the alert.
///   </li>
///   <li>
///     image: UIImage? - The image of the alert view.
///   </li>
///   <li>
///     imageSizeType: AlertViewImageType - Type image size alert view.
///   </li>
///   <li>
///     actions: String - The actions that the user can take in response to the alert or action sheet..
///   </li>
///   <li>
///     messageLabelTextAlignment: String - Message label text alignment of alert view.
///   </li>
///   <li>
///     messageFont: String - Message label font style of alert view.
///   </li>
///   <li>
///     titleFont: String - Title label font style of alert view.
///   </li>
///   <li>
///     messageTextColor: String - Message label text color of alert view.
///   </li>
///   <li>
///     titleTextColor: String - Title label text color of alert view.
///   </li>
/// </ul>
/// <h2>Example to create AlertViewController</h2>
/// <h1>Code</h1>
/// \code
///     let vc = AlertViewController()
///     vc.title = "Заголовок в одну или две строки"
///     vc.message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
///     vc.image = Asset.PopUp.popUpImage.image
///
///     vc.modalPresentationStyle = .custom
///     vc.modalTransitionStyle = .crossDissolve
///     let action = AlertAction(title: "Хорошо", style: .primary) { (_) in
///        vc.dismiss(animated: true, completion: nil)
///     }
///     vc.addAction(action)
///
/// \endcodeAn custom object that displays an alert message to the user.
SWIFT_CLASS("_TtC12AdmiralUIKit19AlertViewController")
@interface AlertViewController : UIViewController
/// The title of the alert.
@property (nonatomic, copy) NSString * _Nullable title;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A base class for list view.
SWIFT_CLASS("_TtC12AdmiralUIKit12BaseListView")
@interface BaseListView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A view object with arrow image view.
SWIFT_CLASS("_TtC12AdmiralUIKit13ArrowListView")
@interface ArrowListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// ArrowWithButtonHeader - A header with header title, arrow and button.
/// You can create a TitleArrowWithButtonHeader by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - Title text block
///   </li>
///   <li>
///     buttonTitle: String - Title button
///   </li>
///   <li>
///     buttonAction: () -> () - The callback action by tapping the button
///   </li>
///   <li>
///     renderingMode: Image.TemplateRenderingMode - Rendering mode for image
///   </li>
///   <li>
///     dropDownHeaderType: DropDownHeaderType? - A type of header. DropDownHeaderType can be: up, down, custom
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of header text block. HeaderStyle can be: title, body, headline, headlineSecondary
///   </li>
/// </ul>
/// <h2>Example to create vertical TitleArrowWithButtonHeader:</h2>
/// <h1>Code</h1>
/// \code
///    TitleArrowWithButtonHeader(
///        title: "Title",
///        buttonTitle: "Button",
///        dropDownHeaderType: .up)
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit21ArrowWithButtonHeader")
@interface ArrowWithButtonHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Badge is a component that usually complements other components and shows quantitative scores.
/// For example, a Tabs component can show the number of items in a bookmark. Or show the number of notifications in the notification panel.
SWIFT_CLASS("_TtC12AdmiralUIKit5Badge")
@interface Badge : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit14TextFieldInput")
@interface TextFieldInput : UIView
/// The custom input view to display when the text field becomes the first responder.
@property (nonatomic, strong) UIView * _Nullable inputView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that displays an editable text area for enter sms code.
SWIFT_CLASS("_TtC12AdmiralUIKit17BankCardTextField")
@interface BankCardTextField : TextFieldInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A horizontal control made of multiple segments, each segment functioning as a discrete button.
SWIFT_CLASS("_TtC12AdmiralUIKit33BaseOutlineSliderSegmentedControl")
@interface BaseOutlineSliderSegmentedControl : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;
@class UICollectionViewLayout;

@interface BaseOutlineSliderSegmentedControl (SWIFT_EXTENSION(AdmiralUIKit)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


/// A horizontal control made of multiple segments, each segment functioning as a discrete button.
SWIFT_CLASS("_TtC12AdmiralUIKit29BaseUnderlineSegmentedControl")
@interface BaseUnderlineSegmentedControl : UIControl
/// Current state of UIControl.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


@interface BaseUnderlineSegmentedControl (SWIFT_EXTENSION(AdmiralUIKit)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


/// Informer is a component that used to show some information.
SWIFT_CLASS("_TtC12AdmiralUIKit11BigInformer")
@interface BigInformer : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit31BottomSheetHeaderSmallTitleView")
@interface BottomSheetHeaderSmallTitleView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit34BottomSheetHeaderSubtitleTitleView")
@interface BottomSheetHeaderSubtitleTitleView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit34BottomSheetHeaderTitleSubtitleView")
@interface BottomSheetHeaderTitleSubtitleView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit26BottomSheetHeaderTitleView")
@interface BottomSheetHeaderTitleView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit31BottomSheetPresentationDelegate")
@interface BottomSheetPresentationDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerAnimatedTransitioning;
@class UIPresentationController;

@interface BottomSheetPresentationDelegate (SWIFT_EXTENSION(AdmiralUIKit)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end


/// A header with header title.
SWIFT_CLASS("_TtC12AdmiralUIKit14ButtonDropDown")
@interface ButtonDropDown : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with arrow image view.
SWIFT_CLASS("_TtC12AdmiralUIKit14ButtonListView")
@interface ButtonListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with arrow image view.
SWIFT_CLASS("_TtC12AdmiralUIKit23ButtonWithArrowListView")
@interface ButtonWithArrowListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


@class NSDate;

/// CalendarViews delegate
SWIFT_PROTOCOL("_TtP12AdmiralUIKit16CalendarDelegate_")
@protocol CalendarDelegate
@optional
/// Tells the delegate that the date at the specified index path was selected.
/// \param date The date of the cell that was selected.
///
/// \param indexPath The index path of the cell that was selected.
///
- (void)didSelectDatesWithDates:(NSArray<NSDate *> * _Nonnull)dates itemAt:(NSIndexPath * _Nonnull)indexPath;
/// Tells the delegate that the date at the specified index path was selected.
/// \param date The date of the cell that was selected.
///
/// \param indexPath The index path of the cell that was selected.
///
- (void)didDeselectDatesWithDates:(NSArray<NSDate *> * _Nonnull)dates forItemAt:(NSIndexPath * _Nonnull)indexPath;
/// Tells the delegate that the date at the specified index path will be selected.
/// \param calendar The current Сalendar instance.
///
/// \param date The date of the cell that was selected.
///
/// \param indexPath The index path of the cell that was selected.
///
- (BOOL)shouldSelectDateWithDate:(NSDate * _Nonnull)date itemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the date at the specified index path will be deselected.
/// \param calendar The current Сalendar instance.
///
/// \param date The date of the cell that was selected.
///
/// \param indexPath The index path of the cell that was selected.
///
- (BOOL)shouldDeselectDateWithDate:(NSDate * _Nonnull)date forItemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the month on horizontal calendar did change.
/// \param date The current date on calendar.
///
- (void)didChangeMonthDateWithDate:(NSDate * _Nonnull)date;
@end


/// Calendar view let users select a date, or a range of dates.
/// This component is presented in two versions: Vertical Mode and Horizontal Mode. Additionally, you can configure parameters
/// such as the locale, start date, end date, selected start date, selected end date, the date month that will appear when the calendar appears, and disabled dates after a certain date.
/// The vertical calendar can be scrolled vertically, presented in the form of a table and divided into sections. Each section is a specific month.
/// A horizontal calendar is a display of the month. Switching between months and years is carried out using the left and right buttons. You can also switch between months using picker view.
/// You can create a CalendarView by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     type: Type calendar.
///   </li>
/// </ul>
/// <h2>Example for the vertical calendar view with disabled dates after a current date:</h2>
/// <h1>Code</h1>
/// \code
/// let calendarView = CalendarView(type: .vertical)
/// calendarView.calendarDataSource = self
/// calendarView.calendarDelegate = self
/// calendarView.notActiveAfterDate = Date()
/// calendarView.reloadData()
///
/// \endcodeTo set the start and end date of the calendar, you will need to subscribe
/// to the calendarDataSource and implement startDate and endDate.
/// To receive events about a change in the date range, you must subscribe to the calendarDelegate.
/// <h2>Example for the horizontal calendar view with disabled dates after a current date:</h2>
/// <h1>Code</h1>
/// \code
/// let calendarView = CalendarView(type: .horizontal)
/// calendarView.calendarDataSource = self
/// calendarView.calendarDelegate = self
/// calendarView.notActiveAfterDate = Date()
/// calendarView.reloadData()
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit12CalendarView")
@interface CalendarView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with card image view.
SWIFT_CLASS("_TtC12AdmiralUIKit12CardListView")
@interface CardListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit8CardView")
@interface CardView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// ChatBubbleStatusView - A view for chat message with time.
/// You can create a ChatBubbleStatusView by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     time: String - Time text message
///   </li>
///   <li>
///     status: ChatStatus - A status ChatBubbleView. Can be in the following states: loading, error, sent, receive, read
///   </li>
///   <li>
///     direction: ChatDirection - A direction for text mesage. Can be: left, right
///   </li>
///   <li>
///     time: String - Time text message.
///   </li>
///   <li>
///     style: ChatBubbleStatusStyle - The style ChatBubbleStatusView
///   </li>
/// </ul>
/// <h2>Example to create ChatBubbleStatusView:</h2>
/// <h1>Code</h1>
/// \code
/// let chatStatusBubbleView = ChatBubbleStatusView()
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit20ChatBubbleStatusView")
@interface ChatBubbleStatusView : UIView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit14ChatBubbleView")
@interface ChatBubbleView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The base button class with extended properties for UIControl.State.
SWIFT_CLASS("_TtC12AdmiralUIKit12CustomButton")
@interface CustomButton : UIButton
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit10ChatButton")
@interface ChatButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit13TextViewInput")
@interface TextViewInput : UIView
/// The custom input view to display when the text field becomes the first responder.
@property (nonatomic, strong) UIView * _Nullable inputView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A  multiline text region.
SWIFT_CLASS("_TtC12AdmiralUIKit13ChatInputView")
@interface ChatInputView : TextViewInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;

@interface ChatInputView (SWIFT_EXTENSION(AdmiralUIKit))
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
@end


/// CheckControl - Base class for checkbox and radiobutton.
/// The CheckControl has some internal properties for customizing the element:
/// Internal Properties:
/// <ul>
///   <li>
///     checkState: CheckControlState - State control.
///   </li>
///   <li>
///     isSelected: Bool - A Boolean value indicating whether the control is in the selected state.
///   </li>
///   <li>
///     isEnabled: Bool - A Boolean value indicating whether the control is in the enabled state.
///   </li>
///   <li>
///     isHighlighted: Bool - A Boolean value indicating whether the control is in the highlighted state.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12AdmiralUIKit12CheckControl")
@interface CheckControl : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// A Boolean value indicating whether the control is in the highlighted state.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// CheckBox is element a graphical user interface element allowing the user to control a parameter with two states - enabled and disabled.
/// The Checkboxes has some internal properties for customizing the element:
/// Internal Properties:
/// <ul>
///   <li>
///     checkState: CheckControlState - State control.
///   </li>
///   <li>
///     isSelected: Bool - A Boolean value indicating whether the control is in the selected state.
///   </li>
///   <li>
///     isEnabled: Bool - A Boolean value indicating whether the control is in the enabled state.
///   </li>
///   <li>
///     isHighlighted: Bool - A Boolean value indicating whether the control is in the highlighted state.
///   </li>
/// </ul>
/// Example for create CheckBox:
/// Code
/// \code
/// let checkBox = CheckBox()
/// checkBox.isSelected = true
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit8CheckBox")
@interface CheckBox : CheckControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// A view object with check box view.
SWIFT_CLASS("_TtC12AdmiralUIKit16CheckBoxListView")
@interface CheckBoxListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// CirclePageControl - control to show pages progress in a circle
/// The central element with the icon works as a button, when clicked, the user goes to a new page. Outer circle - shows the number of completed and upcoming pages (steps) as a percentage.
/// The minimum number of steps is 2, the maximum is 8. It is often used in the center of the page.
/// The CirclePageControl has some internal properties for customizing the element:
/// Initializer parameters:
/// <ul>
///   <li>
///     delegate: CirclePageControlDelegate? - CirclePageControl delegate. Deligate must implementation two function:
///     func didTapCenterButton()
///     func didChangePage(page: Int)
///   </li>
///   <li>
///     totalPages: Int - The number of pages of page control
///   </li>
///   <li>
///     duration: TimeInterval - The duration of page change
///   </li>
///   <li>
///     currentPage: Int - The current page of page control
///     Example create CirclePageControl:
///   </li>
/// </ul>
/// Code
/// \code
/// let pageControl = CirclePageControl()
///
/// pageControl.delegate = self
/// pageControl.duration = 0.3
/// pageControl.currentPage = 0
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit17CirclePageControl")
@interface CirclePageControl : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

@class CAAnimation;

@interface CirclePageControl (SWIFT_EXTENSION(AdmiralUIKit)) <CAAnimationDelegate>
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end


/// CircularTrackView - the component that used for showing view with center loading indicator.
/// You can create a CircularTrackView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     style: ProgressViewStyle - The style of progress spinner.
///   </li>
///   <li>
///     isAnimating - The flag that controls animation.
///   </li>
/// </ul>
/// <h2>Example to create ProgressView</h2>
/// <h1>Code</h1>
/// \code
/// let trackView = CircularTrackView()
/// trackView.style = .accent
/// trackView.isAnimating = true
///
/// \endcodeA view with center loading indicator.
SWIFT_CLASS("_TtC12AdmiralUIKit17CircularTrackView")
@interface CircularTrackView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end



/// Abstract class of input control.
SWIFT_CLASS("_TtC12AdmiralUIKit16CodeInputControl")
@interface CodeInputControl : UIControl
/// The type of keyboard to display for a given text-based view.
@property (nonatomic) UIKeyboardType keyboardType;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end



@interface CodeInputControl (SWIFT_EXTENSION(AdmiralUIKit)) <UIKeyInput>
@property (nonatomic, readonly) BOOL hasText;
- (void)insertText:(NSString * _Nonnull)text;
- (void)deleteBackward;
@end


/// A set of optional methods that you use to manage the editing and validation of text in a code input object.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit24CodeInputControlDelegate_")
@protocol CodeInputControlDelegate
@optional
/// Asks the delegate whether to process the pressing of the Return button for the control.
- (void)codeInputControlShouldReturnWithControl:(CodeInputControl * _Nonnull)control;
/// Tells the delegate when editing control input.
- (void)codeInputControlDidFinish:(CodeInputControl * _Nonnull)control text:(NSString * _Nonnull)text;
/// Called when the text has changed.
- (void)codeInputControl:(CodeInputControl * _Nonnull)control textDidChange:(NSString * _Nonnull)text;
/// Asks the delegate whether to change the specified text.
- (BOOL)codeInputControl:(CodeInputControl * _Nonnull)control shouldChange:(NSString * _Nonnull)newString SWIFT_WARN_UNUSED_RESULT;
@end


/// A view object with curcle view.
SWIFT_CLASS("_TtC12AdmiralUIKit18CurcleIconListView")
@interface CurcleIconListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// CurrencyHeaderView - The view for display header currency.
/// You can create a CurrencyHeaderView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     currencyText: String - text for currency
///   </li>
///   <li>
///     buyText: String - text for buy view
///   </li>
///   <li>
///     sellText: String - text for sell view
///   </li>
///   <li>
///     isTextSpacingEnabled: Bool - additional spacing for CurrencyHeaderView
///   </li>
/// </ul>
/// <h2>Example to create CurrencyHeaderView</h2>
/// <h1>Code</h1>
/// \code
/// let header = CurrencyHeaderView(
///    currencyText: "USDT",
///    buyText: "SELL",
///    sellText: BUY,
///    isTextSpacingEnabled: true
/// )
///
/// \endcodeThe view for display header currency.
SWIFT_CLASS("_TtC12AdmiralUIKit18CurrencyHeaderView")
@interface CurrencyHeaderView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// CurrencyView - The view for display currency.
/// You can create a CurrencyView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     currencyText: String - The text that the currency label displays.
///   </li>
///   <li>
///     buyText: String - The text that the buy label displays.
///   </li>
///   <li>
///     sellText: String - The text that the sell label displays.
///   </li>
///   <li>
///     image: UIImage? - The image that the image view displays.
///   </li>
///   <li>
///     buyCellType: CurrencyCellType - A value that configures style of buy price.
///   </li>
///   <li>
///     sellCellType: CurrencyCellType - A value that configures style of sell price.
///   </li>
///   <li>
///     CurrencyCellType - The style of currency cell. Can be: arrowUp (cell with ArrowDown Image), arrowDown (cell without image. There is an indent from the right edge), empty (cell without image. The position of the cell is at the right edge), none
///   </li>
/// </ul>
/// <h2>Example to create CurrencyView</h2>
/// <h1>Code</h1>
/// let currency = CurrencyView()
/// currency.image = Asset.System.Outline.arrowDownOutline.image
/// currency.sellCellType = .arrowUp
/// currency.sellText = “Продать”
/// currency.buyText = “Покупка”
/// currency.buyCellType = .arrowUp
/// currency.currencyText = “Валюта”
/// \code
///
/// The view for display currency.
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit12CurrencyView")
@interface CurrencyView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end




/// A control that offers a binary choice, such as On/Off.
SWIFT_CLASS("_TtC12AdmiralUIKit12CustomSwitch")
@interface CustomSwitch : UISwitch
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// A view object with date and percent label.
SWIFT_CLASS("_TtC12AdmiralUIKit19DatePercentListView")
@interface DatePercentListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// The class that showing a warning message to the user with diffrent options.
SWIFT_CLASS("_TtC12AdmiralUIKit16DefaultAlertView")
@interface DefaultAlertView : UIView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit25DoubleInputRangeTextField")
@interface DoubleInputRangeTextField : UIView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end

@class TextField;
@class UITextField;

@interface DoubleInputRangeTextField (SWIFT_EXTENSION(AdmiralUIKit)) <UITextFieldDelegate>
- (void)textFieldDidChange:(TextField * _Nonnull)textField;
- (void)rightFieldDidChange:(TextField * _Nonnull)textField;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end


/// Text field delegate like standard UITextFieldDelegate of UIKit framework.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit33DoubleInputRangeTextFieldDelegate_")
@protocol DoubleInputRangeTextFieldDelegate
@optional
/// Called when the value of slider has changed. Return slider float value.
- (float)inputRangeTextFieldSliderValue:(DoubleInputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the value of slider has changed. Return text for textfield.
- (NSString * _Nullable)inputRangeTextFieldSliderValueDidChange:(DoubleInputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the minimum value of slider has changed. Return text for minimum value label.
- (NSString * _Nullable)inputRangeTextFieldSliderMinBorderDidChange:(DoubleInputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the maximum value of slider has changed. Return text for maximum value label.
- (NSString * _Nullable)inputRangeTextFieldSliderMaxBorderDidChange:(DoubleInputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
@end


/// A control for selecting a single value from a continuous range of values.
SWIFT_CLASS("_TtC12AdmiralUIKit12DoubleSlider")
@interface DoubleSlider : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@class UITouch;
@class UIEvent;

@interface DoubleSlider (SWIFT_EXTENSION(AdmiralUIKit))
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
@end


/// DropDownHeader - A header with header title, arrow and button.
/// You can create a DropDownHeader by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - Title text block
///   </li>
///   <li>
///     dropDownHeaderType: DropDownHeaderType? - A type of header. DropDownHeaderType can be: up, down, custom
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of title and size view. HeaderStyle can be: title, body, headline, headlineSecondary.
///   </li>
/// </ul>
/// <h2>Example to create DropDownHeader with title and dropDownHeaderType:</h2>
/// <h1>Code</h1>
/// DropDownHeader(title: “Title”, dropDownHeaderType: .down, headerStyle: .title)
SWIFT_CLASS("_TtC12AdmiralUIKit14DropDownHeader")
@interface DropDownHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// ErrorView - the component is used to attract the user’s attention as a message.
/// You can create a ErrorView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     text: String - Information text
///   </li>
///   <li>
///     buttonTitle: String - Title for the button
///   </li>
///   <li>
///     isLoading: Bool - The loading flag of GhostButton. Activates when flag sets to true and dissapier when flag sets to false.
///   </li>
/// </ul>
/// <h2>Example to create ErrorView</h2>
/// <h1>Code</h1>
/// \code
/// let errorView = ErrorView()
/// errorView.text = "button"
/// errrorView.action = {}
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9ErrorView")
@interface ErrorView : UIView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// FeedbackInputControl - A control for presenting star rating with touch and swipe actions.
/// Feedback control is ideal choice for receive feedback from user.
/// <h2>Example to create FeedbackInputControl</h2>
/// <h1>Code</h1>
/// \code
/// let feedbackControl = FeedbackInputControl()
/// feedbackControl.itemsCount = 5
/// feedbackControl.cursorPosition = 3
///
/// \endcodeA control for presenting star rating with touch and swipe actions.
SWIFT_CLASS("_TtC12AdmiralUIKit20FeedbackInputControl")
@interface FeedbackInputControl : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Called when a touch event enters the control’s bounds.
/// <ul>
///   <li>
///     touch: The touch object containing updated information.
///   </li>
///   <li>
///     event: The event object containing the touch event.
///   </li>
/// </ul>
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Called when a touch event for the control updates.
/// \param touch The touch object containing updated information.
///
/// \param event The event object containing the touch event.
///
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end



/// Transparent button. It is used in cases where the main button is not enough, often paired with it when you need to designate several actions, one of which is the main one.
/// You can create a GhostButton with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     isLoading: Bool - Loading flag. Activates an  ActivityIndicator when flag sets to true and dissapier when flag sets to false.
///   </li>
/// </ul>
/// <h2>Example to create GhostButton</h2>
/// <h1>Code</h1>
/// \code
/// let ghostButton = GhostButton()
/// uploadDocumentView.isLoading = false
/// uploadDocumentView.trackProgressStyle = .default
///
/// \endcodeThe view that presents backgound image with loader for uploading and downloading process.
SWIFT_CLASS("_TtC12AdmiralUIKit11GhostButton")
@interface GhostButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// Custom ghost button with left and right titles
SWIFT_CLASS("_TtC12AdmiralUIKit21HeaderButtonWithArrow")
@interface HeaderButtonWithArrow : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A view object with icon view.
SWIFT_CLASS("_TtC12AdmiralUIKit12IconListView")
@interface IconListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit12IconTabsItem")
@interface IconTabsItem : UIControl
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


/// A horizontal control made of multiple segments with icons
SWIFT_CLASS("_TtC12AdmiralUIKit22IconTabsSegmentControl")
@interface IconTabsSegmentControl : UIControl
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// A view object with background view and image view.
SWIFT_CLASS("_TtC12AdmiralUIKit23ImageBackgroundListView")
@interface ImageBackgroundListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with image view.
SWIFT_CLASS("_TtC12AdmiralUIKit13ImageListView")
@interface ImageListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with background view and image view.
SWIFT_CLASS("_TtC12AdmiralUIKit17ImageNameListView")
@interface ImageNameListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with subtitle label and image view.
SWIFT_CLASS("_TtC12AdmiralUIKit25ImageWithSubtitleListView")
@interface ImageWithSubtitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// Complex user interface element which contains checkbox, title label and transparent button with text.
SWIFT_CLASS("_TtC12AdmiralUIKit17InfoAgreementView")
@interface InfoAgreementView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/// A horizontal control made of multiple segments, each segment functioning as a discrete button.
SWIFT_CLASS("_TtC12AdmiralUIKit19TabSegmentedControl")
@interface TabSegmentedControl : UIControl
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// A horizontal control that consists of multiple segments, each segment functioning as a discrete text button.
SWIFT_CLASS("_TtC12AdmiralUIKit27InformerTabSegmentedControl")
@interface InformerTabSegmentedControl : TabSegmentedControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that displays an editable text area with incrementing or decrementing a value.
SWIFT_CLASS("_TtC12AdmiralUIKit11InputNumber")
@interface InputNumber : UIControl
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// InputNumberTextField - A object that displays an editable text area with incrementing or decrementing a value.
/// You can create a InputNumberTextField by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     titleText - leading text
///   </li>
///   <li>
///     value - the numeric value of the stepper
///   </li>
///   <li>
///     minimumValue - the lowest possible numeric value for the stepper
///   </li>
///   <li>
///     maximumValue - the highest possible numeric value for the stepper
///   </li>
///   <li>
///     stepValue - the step, or increment, value for the stepper. The default value for this property is 1.
///   </li>
/// </ul>
/// <h2>Example to create InputNumberTextField:</h2>
/// <h1>Code</h1>
/// \code
/// let inputTextField = InputNumberTextField()
/// inputTextField.maximumValue = 0
/// inputTextField.maximumValue = 9000000
/// inputTextField.value = 0
/// inputTextField.titleText = "Optional label"
/// inputTextField.textFieldPlaceholder = "0"
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit20InputNumberTextField")
@interface InputNumberTextField : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface InputNumberTextField (SWIFT_EXTENSION(AdmiralUIKit)) <UITextFieldDelegate>
- (void)textFieldDidChange:(TextField * _Nonnull)textField;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end



SWIFT_CLASS("_TtC12AdmiralUIKit19InputRangeTextField")
@interface InputRangeTextField : UIView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface InputRangeTextField (SWIFT_EXTENSION(AdmiralUIKit)) <UITextFieldDelegate>
- (void)textFieldDidChange:(TextField * _Nonnull)textField;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end


/// Text field delegate like standard UITextFieldDelegate of UIKit framework.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit27InputRangeTextFieldDelegate_")
@protocol InputRangeTextFieldDelegate
@optional
/// Called when the value of slider has changed. Return slider float value.
- (float)inputRangeTextFieldSliderValue:(InputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the value of slider has changed. Return text for textfield.
- (NSString * _Nullable)inputRangeTextFieldSliderValueDidChange:(InputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the minimum value of slider has changed. Return text for minimum value label.
- (NSString * _Nullable)inputRangeTextFieldSliderMinBorderDidChange:(InputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
/// Called when the maximum value of slider has changed. Return text for maximum value label.
- (NSString * _Nullable)inputRangeTextFieldSliderMaxBorderDidChange:(InputRangeTextField * _Nonnull)slider SWIFT_WARN_UNUSED_RESULT;
@end


/// A view object with card image view.
SWIFT_CLASS("_TtC12AdmiralUIKit19LeadingCardListView")
@interface LeadingCardListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A header with header title.
SWIFT_CLASS("_TtC12AdmiralUIKit14LinkViewHeader")
@interface LinkViewHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object for sign empty list view.
SWIFT_CLASS("_TtC12AdmiralUIKit13ListCellEmpty")
@interface ListCellEmpty : BaseListView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A horizontal control made of multiple segments, each segment functioning as a discrete button.
SWIFT_CLASS("_TtC12AdmiralUIKit21PlainSegmentedControl")
@interface PlainSegmentedControl : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Lays out subviews.
- (void)layoutSubviews;
@end


/// A horizontal control that consists of multiple segments, each segment functioning as a discrete image button.
SWIFT_CLASS("_TtC12AdmiralUIKit7LogoTab")
@interface LogoTab : PlainSegmentedControl
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The style for creating the Map Button. The presented style is used to create buttons on the map
/// You can create a MapButton by specifying the following parameters in the initializer
/// <ul>
///   <li>
///     type - MapButtonType?. The image style of MapButton.
///   </li>
/// </ul>
/// <h2>Example to create button with MapButton:</h2>
/// <h1>Code</h1>
/// \code
/// let button = MapButton()
/// button.type = .plus
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9MapButton")
@interface MapButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// MessageInformer is a component that used to show some information.
SWIFT_CLASS("_TtC12AdmiralUIKit15MessageInformer")
@interface MessageInformer : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This is badge component in which you can set the value using a number, and you can also set the maximum number.
SWIFT_CLASS("_TtC12AdmiralUIKit11NumberBadge")
@interface NumberBadge : Badge
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that displays an editable text area for enter sms code.
SWIFT_CLASS("_TtC12AdmiralUIKit12OTPTextField")
@interface OTPTextField : TextFieldInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A horizontal control with scroll that consists of multiple segments, each segment functioning as a discrete text button.
SWIFT_CLASS("_TtC12AdmiralUIKit32OutlineSliderTabSegmentedControl")
@interface OutlineSliderTabSegmentedControl : BaseOutlineSliderSegmentedControl
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit11PageControl")
@interface PageControl : UIControl
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// Paragraph - A group of text components exists in several variants.
/// You can create a ParagraphView by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - The text that the label displays
///   </li>
///   <li>
///     paragraphType: ParagaphImageType? - A type of paragraph Image. Can be: point, check, custom (your image)
///   </li>
///   <li>
///     leadingImage: UImage? - Leading image.
///   </li>
///   <li>
///     trailingImage: UImage? - Trailing image.
///   </li>
///   <li>
///     paragraphStyle: ParagraphStyle - A style of Paragraph fount and text color. Can be primary or secondary.
///   </li>
///   <li>
///     textAligment: TextAlignment - Alignment text
///   </li>
/// </ul>
/// <h2>Example to create Paragraph with different parameters:</h2>
/// <h1>Code</h1>
/// \code
/// let pointParagraph = Paragraph()
/// pointParagraph.title = titleSmallText
/// pointParagraph.paragraphStyle = style
/// pointParagraph.paragraphType = .point
/// views.append(ParagraphCellView(paragraph: pointParagraph, titleText: titleText))
///
/// let checkParagraph = Paragraph()
/// checkParagraph.title = titleSmallText
/// checkParagraph.paragraphStyle = style
/// checkParagraph.paragraphType = .check
/// views.append(ParagraphCellView(paragraph: checkParagraph))
///
/// let leftParagraph = Paragraph()
/// leftParagraph.title = titleLargeText
/// leftParagraph.paragraphStyle = style
/// views.append(ParagraphCellView(paragraph: leftParagraph, heightParagraph: LayoutGrid.doubleModule * 5))
///
/// let rightParagraph = Paragraph()
/// rightParagraph.title = titleLargeText
/// rightParagraph.paragraphStyle = style
/// rightParagraph.traillingImage = Asset.Card.info.image
/// views.append(ParagraphCellView(paragraph: rightParagraph, heightParagraph: LayoutGrid.doubleModule * 5))
///
/// let centrLargeParagraph = Paragraph()
/// centrLargeParagraph.title = titleLargeText
/// centrLargeParagraph.textAligment = .center
/// centrLargeParagraph.paragraphStyle = style
/// views.append(ParagraphCellView(paragraph: centrLargeParagraph, heightParagraph: LayoutGrid.doubleModule * 5))
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9Paragraph")
@interface Paragraph : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The style for creating the Pin Button. Pin Button - tеhe component displays the position of the object on the map, exists in two states: Default and Selected. It is also possible to change the company logo inside the component or install an icon.
/// You can create a PinButtonStyle by specifying the following parameters in the initializer
/// <ul>
///   <li>
///     image - value of UIImage. The image is used to set the icon of the element
///   </li>
///   <li>
///     isSelected - Bool. Observable property for displaying the selected checkbox
///   </li>
/// </ul>
/// <h2>Example to create :</h2>
/// <h1>Code</h1>
/// \code
/// let button = PinButton()
/// button.isSelected = true
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9PinButton")
@interface PinButton : CustomButton
/// The selection mark of PinButton.
@property (nonatomic, getter=isSelected) BOOL selected;
/// The content size of PinButton.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end



/// Control to input secure text pin code etc.
SWIFT_CLASS("_TtC12AdmiralUIKit12PinCodeInput")
@interface PinCodeInput : CodeInputControl
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A horizontal control made of multiple segments with icons
SWIFT_CLASS("_TtC12AdmiralUIKit15PinCodeKeyboard")
@interface PinCodeKeyboard : UIView
/// Initializes and returns a newly allocated view object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit17PinCodeNumberView")
@interface PinCodeNumberView : UIControl
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit15PinCodeTextView")
@interface PinCodeTextView : UIControl
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



/// Main button. Used for the most important actions. It is advisable to use one such button on the screen.
/// You can create a button with an activity indicator instead of text. In this case, the text that you pass to the Button will not be shown, but the activity indicator will be shown instead:
/// You can add accessibilityIdentifier (a string that identifies the element) in PlatformButton
/// <h1>Code PlatformButton width image</h1>
/// \code
/// let button = PlatformButton()
///     button.setTitle(name, for: .normal)
///     button.setImage(image, for: .normal)
///     button.setImage(image, for: .highlighted)
///     button.semanticContentAttribute = .forceLeftToRight
///     button.imageEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: LayoutGrid.doubleModule)
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit14PlatformButton")
@interface PlatformButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// Main button. Used for the most important actions. It is advisable to use one such button on the screen.
SWIFT_CLASS("_TtC12AdmiralUIKit13PrimaryButton")
@interface PrimaryButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// ProgressView - the component that used for showing view with center loading indicator.
/// You can create a ProgressView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     style: ProgressViewStyle - The style of progress spinner.
///   </li>
///   <li>
///     centerView: UIView - Central view of progress view.
///   </li>
///   <li>
///     trackProgressStyle: ProgressViewStyle - Loading circle style.
///   </li>
///   <li>
///     isAnimating: Bool - The flag that controls animation of trackView.
///   </li>
/// </ul>
/// <h2>Example to create ProgressView</h2>
/// <h1>Code</h1>
/// \code
/// let trackView = ProgressView()
/// trackView.style = .accent
/// trackView.centerView = UIImageView()
/// trackView.trackProgressStyle = .accent
/// trackView.isAnimating = true
///
/// \endcodeA view with center loading indicator.
SWIFT_CLASS("_TtC12AdmiralUIKit12ProgressView")
@interface ProgressView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


/// A view object with radio button.
SWIFT_CLASS("_TtC12AdmiralUIKit19RadioButtonListView")
@interface RadioButtonListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// RadioControl is an interface element that allows the user to select one option (item) from a predefined set (group).
/// The RadioControl has some internal properties for customizing the element:
/// Internal Properties:
/// <ul>
///   <li>
///     checkState: CheckControlState - State control.
///   </li>
///   <li>
///     isSelected: Bool - A Boolean value indicating whether the control is in the selected state.
///   </li>
///   <li>
///     isEnabled: Bool - A Boolean value indicating whether the control is in the enabled state.
///   </li>
///   <li>
///     isHighlighted: Bool - A Boolean value indicating whether the control is in the highlighted state.
///   </li>
/// </ul>
/// Example for create RadioControl
/// Code
/// \code
/// let checkBox = RadioControl()
/// checkBox.isSelected = true
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit12RadioControl")
@interface RadioControl : CheckControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// ScrollablePageControl - A horizontal page control logically corresponds to the Circle option, while there is an additional option to switch pages using a swipe of the whole page. Additionally, when using this option, it is necessary to provide for the use of the “Next” button.
/// The ScrollablePageControl has some internal properties for customizing the element:
/// Internal Properties:
/// <ul>
///   <li>
///     currentPage: Int - Returns the current selected page of pafge control
///   </li>
///   <li>
///     numberOfPages: Int - The total number of pages of page control
///   </li>
///   <li>
///     hidesForSinglePage: Bool - The boolean valued indicates if page control isHidden if numberOfPages == 0
///   </li>
///   <li>
///     displayedItems: Int - The number of page control items that are currently displayed
///   </li>
/// </ul>
/// Example to create ScrollablePageControl:
/// Code
/// \code
/// let pageControl = ScrollablePageControl()
/// pageControl.numberOfPages = 5
/// pageControl.setCurrentPage(at: 0)
///
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit21ScrollablePageControl")
@interface ScrollablePageControl : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// A specialized view for receiving search-related information from the user.
SWIFT_CLASS("_TtC12AdmiralUIKit9SearchBar")
@interface SearchBar : UIView <UITextFieldDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end


/// A collection of optional methods that you implement to make a search bar control functional.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit17SearchBarDelegate_")
@protocol SearchBarDelegate
@optional
/// Asks the delegate if editing should begin in the specified search bar.
- (BOOL)searchBarShouldBeginEditing:(SearchBar * _Nonnull)searchBar SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the user begins editing the search text.
- (void)searchBarTextDidBeginEditing:(SearchBar * _Nonnull)searchBar;
/// Asks the delegate if editing should stop in the specified search bar.
- (BOOL)searchBarShouldEndEditing:(SearchBar * _Nonnull)searchBar SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the user finished editing the search text.
- (void)searchBarTextDidEndEditing:(SearchBar * _Nonnull)searchBar;
/// Tells the delegate that the user changed the search text.
- (void)searchBar:(SearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
/// Ask the delegate if text in a specified range should be replaced with given text.
- (BOOL)searchBar:(SearchBar * _Nonnull)searchBar shouldChangeTextIn:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)searchBarSearchButtonClicked:(SearchBar * _Nonnull)searchBar;
@end


/// Secondary button. Used for additional actions. It can be used as a stand-alone button or paired with a transparent button.
SWIFT_CLASS("_TtC12AdmiralUIKit15SecondaryButton")
@interface SecondaryButton : CustomButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// A view object with title.
SWIFT_CLASS("_TtC12AdmiralUIKit22SecondaryTitleListView")
@interface SecondaryTitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// Separator - separator element with height equal 16 points, exist in three different variants.
/// <ul>
///   <li>
///     long - separator whole width
///   </li>
///   <li>
///     short - separator width padding 8 points
///   </li>
///   <li>
///     empty - empty line width height
///   </li>
/// </ul>
/// You can create a Separator by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     separatorStyle: SeparatorStyle - style of separator
///   </li>
/// </ul>
/// <h2>Example to create Separator:</h2>
/// Separator(separatorStyle: .short)
SWIFT_CLASS("_TtC12AdmiralUIKit9Separator")
@interface Separator : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The style for creating the Several Pin Button. Several Pin Button - the component displays the position of several objects on the map at one point, exists in three sizes: Small, Medium and Big - use the appropriate one depending on the number of characters.
/// You can create a SeveralPinButtonStyle by specifying the following parameters in the initializer
/// <ul>
///   <li>
///     style - the size. The image is used to set the icon of the element
///   </li>
/// </ul>
/// <h2>Example to create :</h2>
/// <h1>Code</h1>
/// \code
/// let button = SeveralPinButton()
/// button.style = .medium
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit16SeveralPinButton")
@interface SeveralPinButton : CustomButton
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// Shimmering View
SWIFT_CLASS("_TtC12AdmiralUIKit14ShimmeringView")
@interface ShimmeringView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


/// A control for selecting a single value from a continuous range of values.
SWIFT_CLASS("_TtC12AdmiralUIKit6Slider")
@interface Slider : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@interface Slider (SWIFT_EXTENSION(AdmiralUIKit))
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
@end


/// Informer is a component that used to show some information.
SWIFT_CLASS("_TtC12AdmiralUIKit13SmallInformer")
@interface SmallInformer : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A horizontal control that consists of multiple segments, each segment functioning as a discrete text button.
SWIFT_CLASS("_TtC12AdmiralUIKit24StandardSegmentedControl")
@interface StandardSegmentedControl : PlainSegmentedControl
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Status history view.
SWIFT_CLASS("_TtC12AdmiralUIKit17StatusHistoryView")
@interface StatusHistoryView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/// SubtitleTitleHeader - A header with header title and subtitle.
/// You can create a StandardTab by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - Title text block
///   </li>
///   <li>
///     subtitle: String? - Subtitle text block
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of title and subtitle text block. HeaderStyle can be: itle, body, headline, headlineSecondary, dropDown, paragraph, paragraphSecondary, link, separator, separatorShort, separatorEmpty
///   </li>
/// </ul>
/// <h2>Example to create vertical ToolBar:</h2>
/// <h1>Code</h1>
/// \code
///    SubtitleTitleHeader(title: "Title", subtitle: "Subtitle")
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit19SubtitleTitleHeader")
@interface SubtitleTitleHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with subtitle and title.
SWIFT_CLASS("_TtC12AdmiralUIKit21SubtitleTitleListView")
@interface SubtitleTitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with subtitle label and image view.
SWIFT_CLASS("_TtC12AdmiralUIKit25SubtitleWithImageListView")
@interface SubtitleWithImageListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with switch view.
SWIFT_CLASS("_TtC12AdmiralUIKit14SwitchListView")
@interface SwitchListView : BaseListView
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC12AdmiralUIKit9TextField")
@interface TextField : TextFieldInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface TextFieldInput (SWIFT_EXTENSION(AdmiralUIKit)) <UITextFieldDelegate>
- (void)textFieldDidChange:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidChangeSelection:(UITextField * _Nonnull)textField;
@end

@class UITextPosition;
@class UITextRange;

@interface TextFieldInput (SWIFT_EXTENSION(AdmiralUIKit)) <UITextInputTraits>
/// Identifies whether the text object should disable text copying and in some cases hide the text being entered.
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
/// A Boolean value that indicates whether the text-entry objects has any text.
@property (nonatomic, readonly) BOOL hasText;
/// Insert a character into the displayed text.
- (void)insertText:(NSString * _Nonnull)text;
/// Delete a character from the displayed text.
- (void)deleteBackward;
/// The auto-capitalization style for the text object.
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
/// The autocorrection style for the text object.
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
/// The spell-checking style for the text object.
@property (nonatomic) UITextSpellCheckingType spellCheckingType;
/// The configuration state for smart quotes.
@property (nonatomic) UITextSmartQuotesType smartQuotesType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The configuration state for smart dashes.
@property (nonatomic) UITextSmartDashesType smartDashesType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The configuration state for the smart insertion and deletion of space characters.
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The keyboard style associated with the text object.
@property (nonatomic) UIKeyboardType keyboardType;
/// The visible title of the Return key.
@property (nonatomic) UIReturnKeyType returnKeyType;
/// The appearance style of the keyboard that is associated with the text object.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// A Boolean value indicating whether the Return key is automatically enabled when the user is entering text.
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
/// The semantic meaning expected by a text input area.
@property (nonatomic) UITextContentType _Nonnull textContentType;
/// The text position for the beginning of a document.
@property (nonatomic, readonly, strong) UITextPosition * _Nonnull beginningOfDocument;
/// The range of selected text in a document.
@property (nonatomic, strong) UITextRange * _Nullable selectedTextRange;
/// Return the number of UTF-16 characters between one text position and another text position.
/// \param from A custom object that represents a location within a document.
///
/// \param toPosition A custom object that represents another location within document.
///
- (NSInteger)offsetFrom:(UITextPosition * _Nonnull)from to:(UITextPosition * _Nonnull)toPosition SWIFT_WARN_UNUSED_RESULT;
/// Returns the text position at a given offset from another text position.
/// \param position A custom UITextPosition object that represents a location in a document.
///
/// \param offset A custom object that represents another location within document.
///
- (UITextPosition * _Nullable)positionFrom:(UITextPosition * _Nonnull)position offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
/// Return the range between two text positions.
/// \param fromPosition An object that represents a location in a document.
///
/// \param toPosition An object that represents another location in a document.
///
- (UITextRange * _Nullable)textRangeFrom:(UITextPosition * _Nonnull)fromPosition to:(UITextPosition * _Nonnull)toPosition SWIFT_WARN_UNUSED_RESULT;
@end


/// Text field delegate like standard UITextFieldDelegate of UIKit framework.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit22TextFieldInputDelegate_")
@protocol TextFieldInputDelegate
@optional
/// Called when the text has changed.
- (void)textFieldInputDidChange:(TextFieldInput * _Nonnull)textField;
/// Asks the delegate whether to begin editing in the specified text field.
- (BOOL)textFieldInputShouldBeginEditing:(TextFieldInput * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when editing begins in the specified text field.
- (void)textFieldInputDidBeginEditing:(TextFieldInput * _Nonnull)textField;
/// Asks the delegate whether to stop editing in the specified text field.
- (BOOL)textFieldInputShouldEndEditing:(TextFieldInput * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when editing stops for the specified text field.
- (void)textFieldInputDidEndEditing:(TextFieldInput * _Nonnull)textField;
/// Tells the delegate when editing stops for the specified text field, and the reason it stopped.
- (void)textFieldInputDidEndEditing:(TextFieldInput * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason;
/// Asks the delegate whether to change the specified text.
- (BOOL)textFieldInput:(TextFieldInput * _Nonnull)textField shouldChangeCharactersIn:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether to remove the text field’s current contents.
- (BOOL)textFieldInputShouldClear:(TextFieldInput * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether to process the pressing of the Return button for the text field.
- (BOOL)textFieldInputShouldReturn:(TextFieldInput * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the text selection changes in the specified text field.
- (void)textFieldInputDidChangeSelection:(TextFieldInput * _Nonnull)textField;
@end


/// A view object with text message view.
SWIFT_CLASS("_TtC12AdmiralUIKit19TextMessageListView")
@interface TextMessageListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


/// A component that presents a rounded view with title, description and chatBubbleStatusView.
SWIFT_CLASS("_TtC12AdmiralUIKit17TextOperationView")
@interface TextOperationView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A  multiline text region.
SWIFT_CLASS("_TtC12AdmiralUIKit8TextView")
@interface TextView : TextViewInput
/// Asks UIKit to make this object the first responder in its window.
- (BOOL)becomeFirstResponder;
/// Notifies this object that it has been asked to relinquish its status as first responder in its window.
- (BOOL)resignFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class NSURL;
@class NSTextAttachment;

@interface TextViewInput (SWIFT_EXTENSION(AdmiralUIKit)) <UITextViewDelegate>
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
@end


@interface TextViewInput (SWIFT_EXTENSION(AdmiralUIKit)) <UITextInputTraits>
/// Identifies whether the text object should disable text copying and in some cases hide the text being entered.
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
/// A Boolean value that indicates whether the text-entry objects has any text.
@property (nonatomic, readonly) BOOL hasText;
/// Insert a character into the displayed text.
- (void)insertText:(NSString * _Nonnull)text;
/// Delete a character from the displayed text.
- (void)deleteBackward;
/// The auto-capitalization style for the text object.
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
/// The autocorrection style for the text object.
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
/// The spell-checking style for the text object.
@property (nonatomic) UITextSpellCheckingType spellCheckingType;
/// The configuration state for smart quotes.
@property (nonatomic) UITextSmartQuotesType smartQuotesType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The configuration state for smart dashes.
@property (nonatomic) UITextSmartDashesType smartDashesType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The configuration state for the smart insertion and deletion of space characters.
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The keyboard style associated with the text object.
@property (nonatomic) UIKeyboardType keyboardType;
/// The visible title of the Return key.
@property (nonatomic) UIReturnKeyType returnKeyType;
/// The appearance style of the keyboard that is associated with the text object.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// A Boolean value indicating whether the Return key is automatically enabled when the user is entering text.
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
/// The semantic meaning expected by a text input area.
@property (nonatomic) UITextContentType _Nonnull textContentType;
/// The text position for the beginning of a document.
@property (nonatomic, readonly, strong) UITextPosition * _Nonnull beginningOfDocument;
/// Return the number of UTF-16 characters between one text position and another text position.
/// \param from A custom object that represents a location within a document.
///
/// \param toPosition A custom object that represents another location within document.
///
- (NSInteger)offsetFrom:(UITextPosition * _Nonnull)from to:(UITextPosition * _Nonnull)toPosition SWIFT_WARN_UNUSED_RESULT;
/// Returns the text position at a given offset from another text position.
/// \param position A custom UITextPosition object that represents a location in a document.
///
/// \param offset A custom object that represents another location within document.
///
- (UITextPosition * _Nullable)positionFrom:(UITextPosition * _Nonnull)position offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
/// Return the range between two text positions.
/// \param fromPosition An object that represents a location in a document.
///
/// \param toPosition An object that represents another location in a document.
///
- (UITextRange * _Nullable)textRangeFrom:(UITextPosition * _Nonnull)fromPosition to:(UITextPosition * _Nonnull)toPosition SWIFT_WARN_UNUSED_RESULT;
@end


/// Text view delegate like standard UITextFieldView of UIKit framework.
SWIFT_PROTOCOL("_TtP12AdmiralUIKit21TextViewInputDelegate_")
@protocol TextViewInputDelegate
@optional
/// Asks the delegate whether to begin editing in the specified text view.
- (BOOL)textViewInputShouldBeginEditing:(TextViewInput * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether to stop editing in the specified text view.
- (BOOL)textViewInputShouldEndEditing:(TextViewInput * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when editing of the specified text view begins.
- (void)textViewInputDidBeginEditing:(TextViewInput * _Nonnull)textView;
/// Tells the delegate when editing of the specified text view ends.
- (void)textViewInputDidEndEditing:(TextViewInput * _Nonnull)textView;
/// Asks the delegate whether to replace the specified text in the text view.
- (BOOL)textViewInput:(TextViewInput * _Nonnull)textView shouldChangeTextIn:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the user changes the text or attributes in the specified text view.
- (void)textViewInputDidChange:(TextViewInput * _Nonnull)textView;
/// Tells the delegate when the text selection changes in the specified text view.
- (void)textViewInputDidChangeSelection:(TextViewInput * _Nonnull)textView;
/// Asks the delegate whether the specified text view allows the specified type of user interaction with the specified URL in the specified range of text.
- (BOOL)textViewInput:(TextViewInput * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)shouldInteractWithURL in:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether the specified text view allows the specified type of user interaction with the provided text attachment in the specified range of text.
- (BOOL)textViewInput:(TextViewInput * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)shouldInteractWithTextAttachment in:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12AdmiralUIKit10TimePicker")
@interface TimePicker : UIControl <UIKeyInput>
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// IntrinsicContentSize of control
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, readonly) BOOL hasText;
@property (nonatomic) UIKeyboardType keyboardType;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)insertText:(NSString * _Nonnull)text;
- (void)deleteBackward;
@end



/// A header with header title.
SWIFT_CLASS("_TtC12AdmiralUIKit19TitleButtonDropDown")
@interface TitleButtonDropDown : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// TitleHeader - A header with header title, arrow and button.
/// You can create a TitleHeader by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - The text that the label displays
///   </li>
///   <li>
///     textAligment: NSTextAlignment - Alignment title text block
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of title and size view. HeaderStyle can be: title, body, headline, headlineSecondary.
///   </li>
/// </ul>
/// <h2>Example to create TitleHeader with title and textAligment:</h2>
/// TitleHeader(title: “Title”, textAligment: .left, headerStyle: .title)
SWIFT_CLASS("_TtC12AdmiralUIKit11TitleHeader")
@interface TitleHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with title and subtitle.
SWIFT_CLASS("_TtC12AdmiralUIKit26TitleLargeSubtitleListView")
@interface TitleLargeSubtitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with title.
SWIFT_CLASS("_TtC12AdmiralUIKit13TitleListView")
@interface TitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A view object with title, more label, detaile label and message view..
SWIFT_CLASS("_TtC12AdmiralUIKit34TitleMoreDetailTextMessageListView")
@interface TitleMoreDetailTextMessageListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with title, subtitle and button.
SWIFT_CLASS("_TtC12AdmiralUIKit27TitleSubtitleButtonListView")
@interface TitleSubtitleButtonListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// TitleSubtitleHeader - A header with header title and subtitle.
/// You can create a StandardTab by specifying the following parameters in the initializer
/// <h2>Initializer parameters:</h2>
/// <ul>
///   <li>
///     title: String? - Title text block
///   </li>
///   <li>
///     subtitle: String? - Subtitle text block
///   </li>
///   <li>
///     headerStyle: HeaderStyle - A style of title and subtitle text block. HeaderStyle can be: itle, body, headline, headlineSecondary, dropDown, paragraph, paragraphSecondary, link, separator, separatorShort, separatorEmpty
///   </li>
/// </ul>
/// <h2>Example to create vertical ToolBar:</h2>
/// <h1>Code</h1>
/// \code
///    TitleSubtitleHeader(title: "Title", subtitle: "Subtitle")
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit19TitleSubtitleHeader")
@interface TitleSubtitleHeader : UIView
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A view object with title and subtitle.
SWIFT_CLASS("_TtC12AdmiralUIKit21TitleSubtitleListView")
@interface TitleSubtitleListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// A view object with title.
SWIFT_CLASS("_TtC12AdmiralUIKit22TitleWithArrowListView")
@interface TitleWithArrowListView : BaseListView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


/// ToastView - An input field with an informer. It is necessary if additional information may be required to fill in the field correctly.
/// You can create a ToastView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     title: Title of the toast.
///   </li>
///   <li>
///     linkText: Title of link button.
///   </li>
///   <li>
///     linkAction: Callback of the link button. If callback equal nil link button is hidden.
///   </li>
///   <li>
///     image: Image of the toast. If image equal nil image is hidden.
///   </li>
///   <li>
///     imageType: Type image.
///   </li>
///   <li>
///     imageColorType: Type color image.
///   </li>
///   <li>
///     closeAction: Callback of the close button. If callback equal nil close button is hidden.
///   </li>
///   <li>
///     type: Type color background toast.
///   </li>
/// </ul>
/// <h2>Example to create ToastView</h2>
/// <h1>Code</h1>
/// \code
/// let toastView = ToastView()
/// toastView.title = "Text"
/// toastView.linkText = "LinkText"
/// toastView.type = .default
/// toastView.imageType = .success
/// toastView.linkAction = {}
/// toastView.closeAction ={}
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit9ToastView")
@interface ToastView : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Toolbar
SWIFT_CLASS("_TtC12AdmiralUIKit7Toolbar")
@interface Toolbar : UIView
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// Custom button with left and right titles
SWIFT_CLASS("_TtC12AdmiralUIKit14TwoTitleButton")
@interface TwoTitleButton : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// Custom ghost button with left and right titles
SWIFT_CLASS("_TtC12AdmiralUIKit19TwoTitleGhostButton")
@interface TwoTitleGhostButton : UIControl
/// A Boolean value indicating whether the control is in the selected state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// A Boolean value indicating whether the control draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// A Boolean value indicating whether the control is in the enabled state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end











/// A horizontal control with scroll that consists of multiple segments, each segment functioning as a discrete text button.
SWIFT_CLASS("_TtC12AdmiralUIKit25UnderlineSegmentedControl")
@interface UnderlineSegmentedControl : BaseUnderlineSegmentedControl
/// Initializes and returns a newly allocated view object with the zero frame rectangle.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end


/// UploadDocumentView - the component that presents a view with loader for uploading and downloading tasks.
/// You can create a UploadDocumentView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     state: UploadDocumentState - The current state of UploadDocumentView.
///   </li>
///   <li>
///     direction: ChatDirection - The direction of chatBubbleStatusView.
///   </li>
///   <li>
///     fileName: String? - The text of file name label.
///   </li>
///   <li>
///     fileSize: String? - The text of file file size label.
///   </li>
///   <li>
///     chatStatus: ChatStatus? - The status of chatBubbleStatusView.
///   </li>
///   <li>
///     trackProgressStyle: ProgressViewStyle - Loading circle style.
///   </li>
///   <li>
///     isAnimating: Bool - The flag that controls animation of trackView.
///   </li>
///   <li>
///     chatTime: String? - The time of chatBubbleStatusView.
///   </li>
///   <li>
///     progressCircleStyle: ProgressViewStyle? - The style of ProgressView.
///   </li>
///   <li>
///     trackProgressStyle: ProgressViewStyle - The style of CircularProgressView.
///   </li>
/// </ul>
/// <h2>Example to create UploadDocumentView</h2>
/// <h1>Code</h1>
/// \code
/// let uploadDocumentView = UploadDocumentView()
/// uploadDocumentView.state = .loading
/// uploadDocumentView.fileName = "File.pdf"
/// uploadDocumentView.fileSize = "282 MB"
/// uploadDocumentView.trackProgressStyle = .default
/// uploadDocumentView.direction = .left
/// uploadDocumentView.chatTime = "12:53"
///
/// \endcodeA view with center loading indicator.
SWIFT_CLASS("_TtC12AdmiralUIKit18UploadDocumentView")
@interface UploadDocumentView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// UploadImageGridView - the component that presents a container view with some models.
/// You can create a UploadImageGridView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     direction: ChatDirection - The direction of chatBubbleStatusView.
///   </li>
///   <li>
///     chatStatus: ChatStatus? - The status of chatBubbleStatusView.
///   </li>
///   <li>
///     chatTime: String? - The time of chatBubbleStatusView.
///   </li>
///   <li>
///     state: UploadImageGridState - The state of UploadImageGridView.
///   </li>
///   <li>
///     models: [UploadImageModel] - The initial models.
///   </li>
/// </ul>
/// <h2>Example to create UploadDocumentView</h2>
/// <h1>Code</h1>
/// \code
/// let uploadImageGridView = UploadImageGridView()
/// uploadDocumentView.direction = .left
/// uploadDocumentView.chatStatus = .receive
/// uploadDocumentView.chatTime = "12:53"
///
/// \endcodeA view with center loading indicator.
SWIFT_CLASS("_TtC12AdmiralUIKit19UploadImageGridView")
@interface UploadImageGridView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/// UploadImageView - the component that presents backgound image with loader for uploading and downloading tasks.
/// You can create a UploadImageView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     state: UploadDocumentState - The current state of UploadDocumentView.
///   </li>
///   <li>
///     isAnimating: Bool - The flag that controls animation of trackView.
///   </li>
///   <li>
///     progressCircleStyle: ProgressViewStyle? - The style of ProgressView.
///   </li>
///   <li>
///     trackProgressStyle: ProgressViewStyle - The style of CircularProgressView.
///   </li>
/// </ul>
/// <h2>Example to create UploadImageView</h2>
/// <h1>Code</h1>
/// \code
/// let uploadImageView = UploadImageView()
/// uploadDocumentView.state = .loading
/// uploadDocumentView.trackProgressStyle = .default
///
/// \endcodeThe view that presents backgound image with loader for uploading and downloading process.
SWIFT_CLASS("_TtC12AdmiralUIKit15UploadImageView")
@interface UploadImageView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end



/// ZeroScreenView - the component is used to attract the user’s attention as a message. A view with title, subtitle and image.
/// You can create a ZeroScreenView with the zero frame rectangle by specifying the following parameters in init:
/// <ul>
///   <li>
///     delegate: ZeroScreenViewDelegate? - The delegate of ZeroScreenView (tap button).
///   </li>
///   <li>
///     image: Image - The image displayed in the image view.
///   </li>
///   <li>
///     title: String - The text that the title label displays.
///   </li>
///   <li>
///     subTitle: String - The text that the subtitle label displays.
///   </li>
///   <li>
///     buttonTitle: String - The text that the button displays.
///   </li>
/// </ul>
/// <h2>Example to create ZeroScreenView</h2>
/// <h1>Code</h1>
/// \code
/// ZeroScreenView(
///                image: Asset.Onboarding.one.image,
///                title: Constants.title,
///                subTitle: Constants.subTitle,
///                buttonTitle: Constants.buttonTitle)
///
///
/// \endcode
SWIFT_CLASS("_TtC12AdmiralUIKit14ZeroScreenView")
@interface ZeroScreenView : UIView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
