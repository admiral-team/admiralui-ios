// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AdmiralSwiftUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdmiralCore
@_exported import AdmiralSwiftUI
import AdmiralTheme
import AdmiralUIResources
import Combine
import CoreGraphics
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
@available(iOS 14.0, *)
public struct SubtitleWithImageListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public var subtitleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var subtitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public protocol CenterListViewComponent : SwiftUI.View {
  var isHighlighted: Swift.Bool { get set }
  var isHighlightedEnabled: Swift.Bool { get set }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct InputNumberButtonStyle : SwiftUI.ButtonStyle {
  public enum InputNumberButtonType {
    case left
    case right
    public static func == (a: AdmiralSwiftUI.InputNumberButtonStyle.InputNumberButtonType, b: AdmiralSwiftUI.InputNumberButtonStyle.InputNumberButtonType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @SwiftUI.Binding @_projectedValueProperty($isPressing) @_Concurrency.MainActor(unsafe) public var isPressing: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isPressing: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var image: SwiftUI.Image
  @_Concurrency.MainActor(unsafe) public var onTap: () -> ()
  @_Concurrency.MainActor(unsafe) public var style: AdmiralSwiftUI.InputNumberStyle
  @_Concurrency.MainActor(unsafe) public var type: AdmiralSwiftUI.InputNumberButtonStyle.InputNumberButtonType
  @_Concurrency.MainActor(unsafe) public init(isPressing: SwiftUI.Binding<Swift.Bool>, image: SwiftUI.Image, style: AdmiralSwiftUI.InputNumberStyle, type: AdmiralSwiftUI.InputNumberButtonStyle.InputNumberButtonType, onTap: @escaping () -> (), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.InputNumberButtonScheme> = AppThemeSchemeProvider<InputNumberButtonScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.InputNumberButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI22InputNumberButtonStyleV8makeBody13configurationQr0bC00fG13ConfigurationV_tF", 0) __
}
public struct ActivityIndicatorScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundDefaultColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var backgroundConstrastColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct BadgeArrowListViewScheme : AdmiralTheme.AppThemeScheme {
  public var arrowListViewScheme: AdmiralSwiftUI.ArrowListViewScheme
  public var badgeViewScheme: AdmiralSwiftUI.BadgeViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct DoubleInputRangeTextField : AdmiralSwiftUI.AccessabilitySupportUIKit, Swift.Identifiable {
  @_Concurrency.MainActor(unsafe) public let id: Foundation.UUID
  @_Concurrency.MainActor(unsafe) public init(_ contentFrom: SwiftUI.Binding<Swift.String?>, accessibilityIdentifierFirst: Swift.String? = nil, accessibilityIdentifierSecond: Swift.String? = nil, contentTo: SwiftUI.Binding<Swift.String?>, placeholderFrom: Swift.String = "", placeholderTo: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, sliderValueFrom: Swift.Double = 0, sliderValueTo: Swift.Double = 0, minValue: Swift.Double = 0, maxValue: Swift.Double = 100, formatter: Foundation.Formatter? = nil, leadingText: SwiftUI.Binding<Swift.String?> = .constant(nil), trailingText: SwiftUI.Binding<Swift.String?> = .constant(nil), isResponderFrom: SwiftUI.Binding<Swift.Bool>? = nil, isResponderTo: SwiftUI.Binding<Swift.Bool>? = nil, contentType: UIKit.UIKeyboardType = .numberPad, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.DoubleInputRangeTextFieldScheme> = AppThemeSchemeProvider<DoubleInputRangeTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func state(_ state: AdmiralSwiftUI.TextInputState) -> AdmiralSwiftUI.DoubleInputRangeTextField
  @_Concurrency.MainActor(unsafe) public func accessibility(identifierUIKit: Swift.String) -> AdmiralSwiftUI.DoubleInputRangeTextField
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI25DoubleInputRangeTextFieldV4bodyQrvp", 0) __
  public typealias ID = Foundation.UUID
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TitleButtonDropDown : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($buttonTitle) @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $buttonTitle: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var buttonAction: () -> ()
  @SwiftUI.Binding @_projectedValueProperty($dropDownHeaderType) @_Concurrency.MainActor(unsafe) public var dropDownHeaderType: AdmiralSwiftUI.DropDownHeaderType {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $dropDownHeaderType: SwiftUI.Binding<AdmiralSwiftUI.DropDownHeaderType> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, buttonTitle: Swift.String, dropDownHeaderType: AdmiralSwiftUI.DropDownHeaderType = .down, buttonAccesibilityId: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TitleButtonDropDownScheme> = AppThemeSchemeProvider<TitleButtonDropDownScheme>(), buttonAction: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI19TitleButtonDropDownV4bodyQrvp", 0) __
}
public struct ToolBarItemScheme : AdmiralTheme.AppThemeScheme {
  public var titleColor: AdmiralSwiftUI.ToolbarItemParameters<AdmiralTheme.AColor>
  public var imageColor: AdmiralSwiftUI.ToolbarItemParameters<AdmiralTheme.AColor>
  public var titleLabelHorizontalFont: AdmiralTheme.AFont
  public var titleLabelVerticalFont: AdmiralTheme.AFont
  public var borderColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ToolbarItemParameters<P> {
  public mutating func set(parameter: P?, for state: AdmiralSwiftUI.ControlState, type: AdmiralSwiftUI.ToolbarItemType)
  public func parameter(for state: AdmiralSwiftUI.ControlState, type: AdmiralSwiftUI.ToolbarItemType) -> P?
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ZeroScreenView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var image: SwiftUI.Image?
  @_Concurrency.MainActor(unsafe) public var title: Swift.String?
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var buttonAction: () -> ()
  @SwiftUI.Binding @_projectedValueProperty($isLoadingButton) @_Concurrency.MainActor(unsafe) public var isLoadingButton: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isLoadingButton: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image? = nil, title: Swift.String? = nil, subtitle: Swift.String? = nil, buttonTitle: Swift.String? = nil, isLoadingButton: SwiftUI.Binding<Swift.Bool> = .constant(false), buttonAction: @escaping () -> () = {}, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ZeroScreenViewScheme> = AppThemeSchemeProvider<ZeroScreenViewScheme>(), buttonAccessibilityId: Swift.String = "")
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI14ZeroScreenViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct InfoAgreementView : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($isSelected) @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isSelected: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($isLoading) @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isLoading: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, isSelected: SwiftUI.Binding<Swift.Bool>, isLoading: SwiftUI.Binding<Swift.Bool>, subtitleButtonTitle: Swift.String? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.InfoAgreementViewScheme> = AppThemeSchemeProvider<InfoAgreementViewScheme>(), subtitleButtonAction: @escaping () -> () = {}, buttonTitle: Swift.String? = nil, buttonAction: @escaping () -> () = {}, additionalButtonTitle: Swift.String? = nil, additionalButtonAction: @escaping () -> () = {})
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI17InfoAgreementViewV4bodyQrvp", 0) __
}
public struct ClockScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct PinButtonStyle : SwiftUI.ButtonStyle {
  @SwiftUI.Binding @_projectedValueProperty($isSelected) @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isSelected: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($image) @_Concurrency.MainActor(unsafe) public var image: SwiftUI.Image {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $image: SwiftUI.Binding<SwiftUI.Image> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image, isSelected: SwiftUI.Binding<Swift.Bool>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.PinButtonScheme> = AppThemeSchemeProvider<PinButtonScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.PinButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI14PinButtonStyleV8makeBody13configurationQr0bC00eF13ConfigurationV_tF", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct BadgeArrowListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(badgeStyle: AdmiralSwiftUI.BadgeStyle, value: Swift.Int?, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BadgeArrowListViewScheme> = AppThemeSchemeProvider<BadgeArrowListViewScheme>())
  @_Concurrency.MainActor(unsafe) public init(badgeStyle: AdmiralSwiftUI.BadgeStyle, text: Swift.String?, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BadgeArrowListViewScheme> = AppThemeSchemeProvider<BadgeArrowListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI18BadgeArrowListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct SeparatorViewScheme : AdmiralTheme.AppThemeScheme {
  public var lineTintColor: AdmiralTheme.AColor
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct Durations {
  public struct Default {
    public static let single: Swift.Double
    public static let half: Swift.Double
    public static let double: Swift.Double
  }
}
@available(iOS 14.0.0, *)
public class ToastPresenter : Foundation.ObservableObject {
  public enum Constants {
    public static let hideAnimationDuration: Swift.Double
  }
  public init(animationDuration: Swift.Double = Durations.Default.double, hideAnimationDuration: Swift.Double = Constants.hideAnimationDuration)
  @objc deinit
  public func showView(_ view: AdmiralSwiftUI.ToastView, animationDuration: Swift.Double = Durations.Default.double, hideAnimationDuration: Swift.Double = Constants.hideAnimationDuration)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
@available(iOS 14.0, *)
public struct BigInformerScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelTextColors: AdmiralSwiftUI.InformerParameters<AdmiralTheme.AColor>
  public var subtitleLabelTextColors: AdmiralSwiftUI.InformerParameters<AdmiralTheme.AColor>
  public var linkLabelTextColors: AdmiralSwiftUI.InformerParameters<AdmiralTheme.AColor>
  public var wrapViewBackgroundColors: AdmiralSwiftUI.InformerParameters<AdmiralTheme.AColor>
  public var backgroundColors: AdmiralSwiftUI.InformerParameters<AdmiralTheme.AColor>
  public var titleLabelFont: AdmiralTheme.AFont
  public var subtitleLabelFont: AdmiralTheme.AFont
  public var linkLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme)
}
public struct InformerParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, isEnabled: Swift.Bool, style: AdmiralSwiftUI.InformerStyleSwiftUI)
  public func parameter(isEnabled: Swift.Bool, style: AdmiralSwiftUI.InformerStyleSwiftUI) -> P?
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct CodeInputControl : SwiftUI.View {
  public enum Status : Swift.Int {
    case normal
    case success
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @SwiftUI.Binding @_projectedValueProperty($itemsCount) @_Concurrency.MainActor(unsafe) public var itemsCount: Swift.Int {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $itemsCount: SwiftUI.Binding<Swift.Int> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($text) @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($status) @_Concurrency.MainActor(unsafe) public var status: AdmiralSwiftUI.CodeInputControl.Status {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $status: SwiftUI.Binding<AdmiralSwiftUI.CodeInputControl.Status> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(text: SwiftUI.Binding<Swift.String>, itemsCount: Swift.Int = 4, status: AdmiralSwiftUI.CodeInputControl.Status = .normal, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CodeInputControlScheme> = AppThemeSchemeProvider<CodeInputControlScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI16CodeInputControlV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public enum HeaderStyle : Swift.String {
  case title
  case body
  case headline
  case headlineSecondary
  public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
public struct IconListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.IconListViewParameters<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct IconListViewParameters<P> {
}
@available(iOS 14.0, *)
public struct DoubleInputRangeTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var slider: AdmiralSwiftUI.SliderScheme
  public var textField: AdmiralSwiftUI.StandardTextFieldScheme
  public var valueFont: AdmiralTheme.AFont
  public var textFont: AdmiralTheme.AFont
  public var textColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ActionBarView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(actions: [AdmiralSwiftUI.ActionItemBarAction], style: AdmiralSwiftUI.ActionBarViewStyle = .default, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ActionBarViewScheme> = AppThemeSchemeProvider<ActionBarViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI13ActionBarViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct CalendarWeekViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public var titleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct PageControlViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct CalendarHorizontalView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil, locale: Foundation.Locale? = nil, selectedStartDate: SwiftUI.Binding<Foundation.Date?>, selectedEndDate: SwiftUI.Binding<Foundation.Date?>, monthYearDate: Foundation.Date? = nil, notActiveAfterDate: Foundation.Date?, isMutlipleSelectionAllowed: Swift.Bool = true, pointDates: [Foundation.Date], schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CalendarHorizontalViewScheme> = AppThemeSchemeProvider<CalendarHorizontalViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI22CalendarHorizontalViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct SeveralPinButtonStyle : SwiftUI.ButtonStyle {
  @SwiftUI.Binding @_projectedValueProperty($value) @_Concurrency.MainActor(unsafe) public var value: Swift.String {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $value: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(value: SwiftUI.Binding<Swift.String>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SeveralPinButtonScheme> = AppThemeSchemeProvider<SeveralPinButtonScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.SeveralPinButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI21SeveralPinButtonStyleV8makeBody13configurationQr0bC00fG13ConfigurationV_tF", 0) __
}
@available(iOS 14.0.0, *)
public struct CirclePageControlScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.CirclePageControlSchemeParameters<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.CirclePageControlSchemeParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct CirclePageControlSchemeParameters<P> {
  public var parameters: [Swift.String : P?]
  public init()
  public mutating func set(parameter: P?, for isPressing: Swift.Bool, style: AdmiralSwiftUI.CirclePageSliderStyle)
  public func parameter(for isPressing: Swift.Bool, style: AdmiralSwiftUI.CirclePageSliderStyle) -> P?
}
public enum CheckControlState : Swift.Int {
  case normal
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
public struct MonthYearViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public var titleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum ChatBubbleStatusStyle : Swift.Int {
  case `default`
  case light
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ChatBubbleStatusView : SwiftUI.View {
  @SwiftUI.State @_projectedValueProperty($time) @_Concurrency.MainActor(unsafe) public var time: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $time: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($status) @_Concurrency.MainActor(unsafe) public var status: AdmiralSwiftUI.ChatStatus? {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $status: SwiftUI.Binding<AdmiralSwiftUI.ChatStatus?> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($direction) @_Concurrency.MainActor(unsafe) public var direction: AdmiralSwiftUI.ChatDirection {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $direction: SwiftUI.Binding<AdmiralSwiftUI.ChatDirection> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($style) @_Concurrency.MainActor(unsafe) public var style: AdmiralSwiftUI.ChatBubbleStatusStyle {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $style: SwiftUI.Binding<AdmiralSwiftUI.ChatBubbleStatusStyle> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(time: Swift.String, status: AdmiralSwiftUI.ChatStatus? = nil, direction: AdmiralSwiftUI.ChatDirection, style: AdmiralSwiftUI.ChatBubbleStatusStyle = .default, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ChatBubbleStatusViewScheme> = AppThemeSchemeProvider<ChatBubbleStatusViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI20ChatBubbleStatusViewV4bodyQrvp", 0) __
}
public enum TextInputState : Swift.Int {
  case normal
  case error
  case disabled
  case readOnly
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
public protocol TextFieldInput : SwiftUI.View {
  var state: AdmiralSwiftUI.TextInputState { get set }
  var info: Swift.String { get set }
  func state(_ state: AdmiralSwiftUI.TextInputState) -> Self
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct StandardTextField<T> : AdmiralSwiftUI.TextFieldInput, AdmiralSwiftUI.AccessabilitySupportUIKit, Swift.Identifiable where T : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public let id: Foundation.UUID
  @SwiftUI.Binding @_projectedValueProperty($state) @_Concurrency.MainActor(unsafe) public var state: AdmiralSwiftUI.TextInputState {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($info) @_Concurrency.MainActor(unsafe) public var info: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $info: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, textContentType: UIKit.UITextContentType? = nil, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, textContentType: UIKit.UITextContentType? = nil, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func state(_ state: AdmiralSwiftUI.TextInputState) -> AdmiralSwiftUI.StandardTextField<T>
  @_Concurrency.MainActor(unsafe) public func accessibility(identifierUIKit: Swift.String) -> AdmiralSwiftUI.StandardTextField<T>
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI17StandardTextFieldV4bodyQrvp", 0) __<T>
  public typealias ID = Foundation.UUID
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.StandardTextField where T == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, textContentType: UIKit.UITextContentType? = nil, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, textContentType: UIKit.UITextContentType? = nil, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
}
@available(iOS 14.0, *)
final public class IconTabScheme : AdmiralTheme.AppThemeScheme {
  final public var backgroundColor: AdmiralTheme.AColor
  final public var titleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var circleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var alphaColor: AdmiralSwiftUI.ControlParameter<Swift.Double>
  final public var iconColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var titleFont: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
  @objc deinit
}
@available(iOS 14.0.0, *)
public struct ActionCellViewScheme : AdmiralTheme.AppThemeScheme {
  public var actionBarBackgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ImageNameListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var backgroundNameViewColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct InputRangeTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var sliderScheme: AdmiralSwiftUI.SliderScheme
  public var textFieldScheme: AdmiralSwiftUI.StandardTextFieldScheme
  public var valueFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct ActionBarControlScheme : AdmiralTheme.AppThemeScheme {
  public struct ActionBarControl {
  }
  public var actionBarControl: AdmiralSwiftUI.ActionBarControlScheme.ActionBarControl
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct ActionBarControlSchemeParameters<P, S> where S : Swift.Hashable, S : Swift.RawRepresentable, S.RawValue == Swift.Int {
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct BankCardTextField<T> : AdmiralSwiftUI.TextFieldInput, AdmiralSwiftUI.AccessabilitySupportUIKit, Swift.Identifiable where T : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public let id: Foundation.UUID
  @SwiftUI.Binding @_projectedValueProperty($state) @_Concurrency.MainActor(unsafe) public var state: AdmiralSwiftUI.TextInputState {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($info) @_Concurrency.MainActor(unsafe) public var info: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $info: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BankCardTextFieldScheme> = AppThemeSchemeProvider<BankCardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BankCardTextFieldScheme> = AppThemeSchemeProvider<BankCardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func state(_ state: AdmiralSwiftUI.TextInputState) -> AdmiralSwiftUI.BankCardTextField<T>
  @_Concurrency.MainActor(unsafe) public func accessibility(identifierUIKit: Swift.String) -> AdmiralSwiftUI.BankCardTextField<T>
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI17BankCardTextFieldV4bodyQrvp", 0) __<T>
  public typealias ID = Foundation.UUID
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.BankCardTextField where T == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BankCardTextFieldScheme> = AppThemeSchemeProvider<BankCardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BankCardTextFieldScheme> = AppThemeSchemeProvider<BankCardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
}
public struct PrimaryButtonScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var backgroundColor: AdmiralTheme.AColor
  public var buttonBackgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ParagraphView : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($paragraphImageType) @_Concurrency.MainActor(unsafe) public var paragraphImageType: AdmiralSwiftUI.ParagraphLeadingImageType? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $paragraphImageType: SwiftUI.Binding<AdmiralSwiftUI.ParagraphLeadingImageType?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($trailingImage) @_Concurrency.MainActor(unsafe) public var trailingImage: SwiftUI.Image? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $trailingImage: SwiftUI.Binding<SwiftUI.Image?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle
  @SwiftUI.Binding @_projectedValueProperty($renderingMode) @_Concurrency.MainActor(unsafe) public var renderingMode: SwiftUI.Image.TemplateRenderingMode {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $renderingMode: SwiftUI.Binding<SwiftUI.Image.TemplateRenderingMode> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, paragraphImageType: AdmiralSwiftUI.ParagraphLeadingImageType? = nil, renderingMode: SwiftUI.Image.TemplateRenderingMode = .template, trailingImage: SwiftUI.Image? = nil, textAligment: SwiftUI.TextAlignment = .leading, paragraphStyle: AdmiralSwiftUI.ParagraphStyle = .primary, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ParagraphViewScheme> = AppThemeSchemeProvider<ParagraphViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI13ParagraphViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct PinCodeTextViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme)
}
@available(iOS 14.0, *)
public struct ImageWithSubtitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public var subtitleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var subtitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct UploadDocumentGridScheme : AdmiralTheme.AppThemeScheme {
  public var errorImageColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme)
}
@available(iOS 14.0.0, *)
public struct CalendarHorizontalViewScheme : AdmiralTheme.AppThemeScheme {
  public var pickerTitleColor: AdmiralTheme.AColor
  public var headerViewScheme: AdmiralSwiftUI.CalendarHorizontalHeaderViewScheme
  public var calendarWeekViewScheme: AdmiralSwiftUI.CalendarWeekViewScheme
  public var calendarViewCellColorScheme: AdmiralSwiftUI.CalendarViewCellColorScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct TwoTitlePrimaryButtonScheme : AdmiralTheme.AppThemeScheme {
  public var leftTitleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var rightTitleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralTheme.AColor
  public var buttonBackgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var leftLabelFont: AdmiralTheme.AFont
  public var rightLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct SliderView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(value: SwiftUI.Binding<Swift.Double>, minValue: Swift.Double = 0.0, maxValue: Swift.Double = 1.0, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SliderScheme> = AppThemeSchemeProvider<SliderScheme>(), gestureChange: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI10SliderViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public enum ParagraphStyle : Swift.String {
  case primary
  case secondary
  public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct PinCodeNumberViewStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor(unsafe) public init(schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.PinCodeNumberViewScheme> = AppThemeSchemeProvider<PinCodeNumberViewScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.PinCodeNumberViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI22PinCodeNumberViewStyleV8makeBody13configurationQr0bC006ButtonH13ConfigurationV_tF", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct CalendarVerticalDaysView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(days: [AdmiralSwiftUI.CalendarDay], startDate: Foundation.Date?, endDate: Foundation.Date?, notActiveAfterDate: Foundation.Date?, pointDates: [Foundation.Date], updateBlock: @escaping (AdmiralSwiftUI.CalendarDay) -> (), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CalendarViewCellColorScheme> = AppThemeSchemeProvider<CalendarViewCellColorScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI24CalendarVerticalDaysViewV4bodyQrvp", 0) __
}
public enum TitleWithImageListStyle : Swift.String {
  case title
  case body
  case headline
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct TitleWithImageListView : SwiftUI.View, AdmiralSwiftUI.CenterListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, image: SwiftUI.Image?, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, lineLimit: Swift.Int? = nil, titleWithImageListStyle: AdmiralSwiftUI.TitleWithImageListStyle? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TitleWithImageListViewScheme> = AppThemeSchemeProvider<TitleWithImageListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI22TitleWithImageListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct UnderlineTabScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var thumbColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var borderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum CalendarViewType {
  case vertical
  case horizontal
  public static func == (a: AdmiralSwiftUI.CalendarViewType, b: AdmiralSwiftUI.CalendarViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
public struct CalendarView : SwiftUI.View {
  public init(type: AdmiralSwiftUI.CalendarViewType, startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil, locale: Foundation.Locale? = nil, selectedStartDate: SwiftUI.Binding<Foundation.Date?>, selectedEndDate: SwiftUI.Binding<Foundation.Date?>, monthYearDate: Foundation.Date? = nil, notActiveAfterDate: Foundation.Date? = nil, isMutlipleSelectionAllowed: Swift.Bool = true, pointDates: [Foundation.Date] = [], horizontalSchemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CalendarHorizontalViewScheme> = AppThemeSchemeProvider<CalendarHorizontalViewScheme>(), verticalSchemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CalendarVerticalViewScheme> = AppThemeSchemeProvider<CalendarVerticalViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI12CalendarViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct TitleSubtitleHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public var centerViewScheme: AdmiralSwiftUI.TitleSubTitleSubtitleListViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public class ShimmerConfig : Combine.ObservableObject {
  final public let willChange: Combine.PassthroughSubject<AdmiralSwiftUI.ShimmerConfig, Swift.Never>
  public init(theme: AdmiralTheme.AppTheme, shimmerAngle: Swift.Double = 0, shimmerDuration: Foundation.TimeInterval = 2, shimmerDelay: Foundation.TimeInterval = 1)
  public init(bgColor: SwiftUI.Color, shimmerColor: SwiftUI.Color, shimmerAngle: Swift.Double = 0, shimmerDuration: Foundation.TimeInterval = 2, shimmerDelay: Foundation.TimeInterval = 1)
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct DatePercentListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(date: Swift.String?, percent: Swift.String?, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.DatePercentListViewScheme> = AppThemeSchemeProvider<DatePercentListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI19DatePercentListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public protocol TralingListViewComponent : SwiftUI.View {
  var isHighlighted: Swift.Bool { get set }
  var isHighlightedEnabled: Swift.Bool { get set }
}
@available(iOS 14.0.0, *)
public struct ButtonWithArrowListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var button: AdmiralSwiftUI.GhostButtonWithImageScheme
  public init(theme: AdmiralTheme.AppTheme)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct CardListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.Binding @_projectedValueProperty($image) @_Concurrency.MainActor(unsafe) public var image: SwiftUI.Image {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $image: SwiftUI.Binding<SwiftUI.Image> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CardListViewScheme> = AppThemeSchemeProvider<CardListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI12CardListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct TitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var textColor: AdmiralSwiftUI.TitleListViewParameters<AdmiralTheme.AColor>
  public var titleFont: AdmiralSwiftUI.TitleListViewParameters<AdmiralTheme.AFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TitleListViewParameters<P> {
}
@available(iOS 14.0.0, *)
public struct GhostButtonScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
final public class ArrowSegmentSliderScheme : AdmiralTheme.AppThemeScheme {
  final public var imageTintColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
  @objc deinit
}
public struct ImageListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.ImageListViewParameters<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ImageListViewParameters<P> {
}
@available(iOS 14.0.0, *)
public struct SecondaryButtonScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var backgroundColor: AdmiralTheme.AColor
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var borderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ImageNameListView : SwiftUI.View, AdmiralSwiftUI.LeadingListViewComponent {
  @SwiftUI.Binding @_projectedValueProperty($text) @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(text: Swift.String, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ImageNameListViewScheme> = AppThemeSchemeProvider<ImageNameListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI17ImageNameListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public protocol LeadingListViewComponent : SwiftUI.View {
  var isHighlighted: Swift.Bool { get set }
  var isHighlightedEnabled: Swift.Bool { get set }
}
@available(iOS 14.0.0, *)
public struct ShimmerModifier : SwiftUI.ViewModifier {
  public init(isActive: Swift.Bool, cornerRadius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func body(content: AdmiralSwiftUI.ShimmerModifier.Content) -> AdmiralSwiftUI.ShimmerModifier.Body
  public typealias Body = SwiftUI.AnyView
}
@available(iOS 14.0.0, *)
extension SwiftUI.View {
  dynamic public func shimmer(isActive: Swift.Bool, cornerRadius: CoreFoundation.CGFloat = LayoutGrid.halfModule) -> some SwiftUI.View
  
}
public enum ActionBarViewStyle {
  case `default`
  case secondary
  public static func == (a: AdmiralSwiftUI.ActionBarViewStyle, b: AdmiralSwiftUI.ActionBarViewStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ActionCellView<T> : SwiftUI.View where T : AdmiralSwiftUI.ListViewCell {
  @_Concurrency.MainActor(unsafe) public let cellView: T
  @_Concurrency.MainActor(unsafe) public var actions: [AdmiralSwiftUI.ActionItemBarAction]
  @_Concurrency.MainActor(unsafe) public init(cellView: T, actions: [AdmiralSwiftUI.ActionItemBarAction], style: AdmiralSwiftUI.ActionBarViewStyle = .default, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ActionCellViewScheme> = AppThemeSchemeProvider<ActionCellViewScheme>())
  @_Concurrency.MainActor(unsafe) public init(cellView: T, style: AdmiralSwiftUI.ActionBarViewStyle = .default, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ActionCellViewScheme> = AppThemeSchemeProvider<ActionCellViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI14ActionCellViewV4bodyQrvp", 0) __<T>
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct SwitchListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.Binding @_projectedValueProperty($isSwitchSelected) @_Concurrency.MainActor(unsafe) public var isSwitchSelected: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isSwitchSelected: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(isSwitchSelected: SwiftUI.Binding<Swift.Bool>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SwitchListViewScheme> = AppThemeSchemeProvider<SwitchListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI14SwitchListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct GhostButtonStyle : SwiftUI.ButtonStyle {
  @SwiftUI.Binding @_projectedValueProperty($isLoading) @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isLoading: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var sizeType: AdmiralSwiftUI.ButtonSizeType?
  @_Concurrency.MainActor(unsafe) public init(isLoading: SwiftUI.Binding<Swift.Bool> = .constant(false), sizeType: AdmiralSwiftUI.ButtonSizeType? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.GhostButtonScheme> = AppThemeSchemeProvider<GhostButtonScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.GhostButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI16GhostButtonStyleV8makeBody13configurationQr0bC00eF13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct UnderlineTab : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(items: [AdmiralSwiftUI.UnderlineTabItem], selection: SwiftUI.Binding<Swift.Int>, offset: SwiftUI.Binding<CoreFoundation.CGFloat> = .constant(0.0), isStaticTabs: SwiftUI.Binding<Swift.Bool> = .constant(false), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.UnderlineTabScheme> = AppThemeSchemeProvider<UnderlineTabScheme>())
  @_Concurrency.MainActor(unsafe) public init(items: [Swift.String], selection: SwiftUI.Binding<Swift.Int>, offset: SwiftUI.Binding<CoreFoundation.CGFloat> = .constant(0.0), isStaticTabs: SwiftUI.Binding<Swift.Bool> = .constant(false), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.UnderlineTabScheme> = AppThemeSchemeProvider<UnderlineTabScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI12UnderlineTabV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ActivityIndicator : SwiftUI.View {
  public enum Style {
    case `default`
    case contrast
    public static func == (a: AdmiralSwiftUI.ActivityIndicator.Style, b: AdmiralSwiftUI.ActivityIndicator.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Size : Swift.Int {
    case small
    case medium
    case large
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var style: AdmiralSwiftUI.ActivityIndicator.Style
  @_Concurrency.MainActor(unsafe) public var size: AdmiralSwiftUI.ActivityIndicator.Size
  @_Concurrency.MainActor(unsafe) public init(style: AdmiralSwiftUI.ActivityIndicator.Style = .default, size: AdmiralSwiftUI.ActivityIndicator.Size = .medium, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ActivityIndicatorScheme> = AppThemeSchemeProvider<ActivityIndicatorScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI17ActivityIndicatorV4bodyQrvp", 0) __
}
@objc @_hasMissingDesignatedInitializers public class BlocFormatter : Foundation.Formatter {
  public var format: (Swift.String?) -> Swift.String?
  public init(format: @escaping (Swift.String?) -> Swift.String?)
  @objc override dynamic public func getObjectValue(_ obj: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>?, for string: Swift.String, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
  @objc deinit
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct SubtitleImageArrowListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(subtitle: Swift.String?, image: SwiftUI.Image?, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SubtitleImageArrowListViewScheme> = AppThemeSchemeProvider<SubtitleImageArrowListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI26SubtitleImageArrowListViewV4bodyQrvp", 0) __
}
public struct CurrencyHeaderViewScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
infix operator !! : NilCoalescingPrecedence
public func !! <Value>(value: Value?, panic: @autoclosure () -> Swift.Never) -> Value
public enum TitleListViewStyle : Swift.String {
  case title
  case body
  case headline
  case headlineSecondary
  case paragraph
  case paragraphSecondary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TitleListView : SwiftUI.View, AdmiralSwiftUI.CenterListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, textAligment: SwiftUI.TextAlignment = .leading, lineLimit: Swift.Int? = nil, titleListViewStyle: AdmiralSwiftUI.TitleListViewStyle? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TitleListViewScheme> = AppThemeSchemeProvider<TitleListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI13TitleListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public enum TextBlockStyle : Swift.String {
  case title
  case body
  case headline
  case headlineSecondary
  case dropDown
  case paragraph
  case paragraphSecondary
  case link
  case separator
  case separatorShort
  case separatorEmpty
  public var minHeight: CoreFoundation.CGFloat {
    get
  }
  public var edgeInsets: SwiftUI.EdgeInsets {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IconListViewStyle : Swift.String {
  case paragraph
  case paragraphSecondary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct IconListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.Binding @_projectedValueProperty($image) @_Concurrency.MainActor(unsafe) public var image: SwiftUI.Image {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $image: SwiftUI.Binding<SwiftUI.Image> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, iconListViewStyle: AdmiralSwiftUI.IconListViewStyle? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.IconListViewScheme> = AppThemeSchemeProvider<IconListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI12IconListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct TitleMoreDetailTextMessageListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var moreLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var detaileTitleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var detaileMoreLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var subtitleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var infoImageViewTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var messageTitleLabelTitleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var messageViewBackgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public var subtitleFont: AdmiralTheme.AFont
  public var moreFont: AdmiralTheme.AFont
  public var detaileTitleFont: AdmiralTheme.AFont
  public var detaileMoreFont: AdmiralTheme.AFont
  public var tagViewFont: AdmiralTheme.AFont
  public var messageTitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct LogoTabItem {
  public let image: SwiftUI.Image
  public let accessibilityId: Swift.String
  public init(image: SwiftUI.Image, accessibilityId: Swift.String = "")
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct LogoTab : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(items: [AdmiralSwiftUI.LogoTabItem], selection: SwiftUI.Binding<Swift.Int>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.LogoTabScheme> = AppThemeSchemeProvider<LogoTabScheme>())
  @_Concurrency.MainActor(unsafe) public init(images: [SwiftUI.Image], selection: SwiftUI.Binding<Swift.Int>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.LogoTabScheme> = AppThemeSchemeProvider<LogoTabScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI7LogoTabV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct StandardTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var errorColor: AdmiralTheme.AColor
  public var disabledColor: AdmiralTheme.AColor
  public var underlineColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var textFieldFont: AdmiralTheme.AFont
  public var informerFont: AdmiralTheme.AFont
  public var nameFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct ListCellEmpty : SwiftUI.View, AdmiralSwiftUI.CenterListViewComponent, AdmiralSwiftUI.TralingListViewComponent, AdmiralSwiftUI.LeadingListViewComponent {
  public var isEnabled: Swift.Bool
  public var isHighlighted: Swift.Bool
  public var isHighlightedEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI13ListCellEmptyV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
final public class StandardTabScheme : AdmiralTheme.AppThemeScheme {
  final public var backgroundColor: AdmiralTheme.AColor
  final public var thumbColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var borderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var titleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var titleFont: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
  @objc deinit
}
public struct InfoAgreementViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleColor: AdmiralTheme.AColor
  public var titleFont: AdmiralTheme.AFont
  public var buttonScheme: AdmiralSwiftUI.PrimaryButtonScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct RadioControl : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($isSelected) @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isSelected: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($text) @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($checkState) @_Concurrency.MainActor(unsafe) public var checkState: AdmiralSwiftUI.CheckControlState {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $checkState: SwiftUI.Binding<AdmiralSwiftUI.CheckControlState> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(isSelected: SwiftUI.Binding<Swift.Bool>, text: Swift.String = "", checkState: AdmiralSwiftUI.CheckControlState = .normal, radioControlValueFormatString: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CheckControlScheme> = AppThemeSchemeProvider<CheckControlScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI12RadioControlV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct MonthYearButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.MonthYearButtonScheme> = AppThemeSchemeProvider<MonthYearButtonScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.MonthYearButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI20MonthYearButtonStyleV8makeBody13configurationQr0bC00fG13ConfigurationV_tF", 0) __
}
public enum TagStyle : Swift.Int {
  case none
  case `default`
  case success
  case additional
  case error
  case attention
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct TagControl : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var tapTagControl: () -> ()
  @_Concurrency.MainActor(unsafe) public var tagStyle: AdmiralSwiftUI.TagStyle
  @_Concurrency.MainActor(unsafe) public var leadingView: (() -> SwiftUI.AnyView)?
  @_Concurrency.MainActor(unsafe) public var trailingView: (() -> SwiftUI.AnyView)?
  @_Concurrency.MainActor(unsafe) public var title: Swift.String?
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, tagStyle: AdmiralSwiftUI.TagStyle, tapTagControl: @escaping () -> (), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TagControlScheme> = AppThemeSchemeProvider<TagControlScheme>())
  @_Concurrency.MainActor(unsafe) public init<L>(title: Swift.String, tagStyle: AdmiralSwiftUI.TagStyle, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TagControlScheme> = AppThemeSchemeProvider<TagControlScheme>(), @SwiftUI.ViewBuilder leadingView: @escaping () -> L, tapTagControl: @escaping () -> ()) where L : SwiftUI.View
  @_Concurrency.MainActor(unsafe) public init<V>(tagStyle: AdmiralSwiftUI.TagStyle, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TagControlScheme> = AppThemeSchemeProvider<TagControlScheme>(), @SwiftUI.ViewBuilder view: @escaping () -> V, tapTagControl: @escaping () -> ()) where V : SwiftUI.View
  @_Concurrency.MainActor(unsafe) public init<T>(title: Swift.String, tagStyle: AdmiralSwiftUI.TagStyle, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TagControlScheme> = AppThemeSchemeProvider<TagControlScheme>(), @SwiftUI.ViewBuilder trailingView: @escaping () -> T, tapTagControl: @escaping () -> ()) where T : SwiftUI.View
  @_Concurrency.MainActor(unsafe) public init<L, T>(title: Swift.String, tagStyle: AdmiralSwiftUI.TagStyle, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TagControlScheme> = AppThemeSchemeProvider<TagControlScheme>(), @SwiftUI.ViewBuilder leadingView: @escaping () -> L, @SwiftUI.ViewBuilder trailingView: @escaping () -> T, tapTagControl: @escaping () -> ()) where L : SwiftUI.View, T : SwiftUI.View
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI10TagControlV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct DatePercentListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var subtitleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public var subtitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct ButtonDropDownScheme : AdmiralTheme.AppThemeScheme {
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public var centerViewScheme: AdmiralSwiftUI.ButtonWithArrowListViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum CurrencyCellType {
  case arrowUp
  case arrowDown
  case empty
  case none
  public static func == (a: AdmiralSwiftUI.CurrencyCellType, b: AdmiralSwiftUI.CurrencyCellType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct CurrencyView : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($currencyText) @_Concurrency.MainActor(unsafe) public var currencyText: Swift.String {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $currencyText: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($buyText) @_Concurrency.MainActor(unsafe) public var buyText: Swift.String {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $buyText: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($sellText) @_Concurrency.MainActor(unsafe) public var sellText: Swift.String {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $sellText: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($image) @_Concurrency.MainActor(unsafe) public var image: SwiftUI.Image? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $image: SwiftUI.Binding<SwiftUI.Image?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($firstCellType) @_Concurrency.MainActor(unsafe) public var firstCellType: AdmiralSwiftUI.CurrencyCellType {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $firstCellType: SwiftUI.Binding<AdmiralSwiftUI.CurrencyCellType> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($secondCellType) @_Concurrency.MainActor(unsafe) public var secondCellType: AdmiralSwiftUI.CurrencyCellType {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $secondCellType: SwiftUI.Binding<AdmiralSwiftUI.CurrencyCellType> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(currencyText: Swift.String, buyText: Swift.String, sellText: Swift.String, image: SwiftUI.Image? = nil, firstCellType: AdmiralSwiftUI.CurrencyCellType = .none, secondCellType: AdmiralSwiftUI.CurrencyCellType = .none, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CurrencyViewScheme> = AppThemeSchemeProvider<CurrencyViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI12CurrencyViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct DoubleSliderView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(valueFrom: SwiftUI.Binding<Swift.Double>, valueTo: SwiftUI.Binding<Swift.Double>, minValue: Swift.Double = 0.0, maxValue: Swift.Double = 1.0, segmentSize: SwiftUI.Binding<CoreFoundation.CGSize>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SliderScheme> = AppThemeSchemeProvider<SliderScheme>(), gestureChange: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI16DoubleSliderViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ChatInput : SwiftUI.View, AdmiralSwiftUI.AccessabilitySupportUIKit {
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .search, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, canPerformActionPaste: Swift.Bool = false, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, placeholder: Swift.String = "", tapSendButton: @escaping () -> (Swift.Bool) = { return false }, tapFileButton: @escaping () -> () = {}, isShowFileButton: Swift.Bool = false, isTapSendButtonHidden: Swift.Bool = false, formatter: Foundation.Formatter? = nil, isSendButtonDisabled: Swift.Bool? = nil, maxNumberOfLines: Swift.Int? = nil, maxHeight: CoreFoundation.CGFloat? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ChatInputScheme> = AppThemeSchemeProvider<ChatInputScheme>())
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .search, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, canPerformActionPaste: Swift.Bool = false, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, placeholder: Swift.String = "", tapSendButton: @escaping () -> (Swift.Bool) = { return false }, tapFileButton: @escaping () -> () = {}, isShowFileButton: Swift.Bool = false, isTapSendButtonHidden: Swift.Bool = false, formatter: Foundation.Formatter? = nil, isSendButtonDisabled: Swift.Bool? = nil, maxNumberOfLines: Swift.Int? = nil, maxHeight: CoreFoundation.CGFloat? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ChatInputScheme> = AppThemeSchemeProvider<ChatInputScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func accessibility(identifierUIKit: Swift.String) -> AdmiralSwiftUI.ChatInput
  @_Concurrency.MainActor(unsafe) public func clear()
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI9ChatInputV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct DropDownHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public var centerViewScheme: AdmiralSwiftUI.TitleListViewScheme
  public var trailingViewScheme: AdmiralSwiftUI.IconListViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TitleSubtitleButtonListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var subtitleTagLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var buttonTitleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var subtitleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var tagViewBackgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public var subtitleTagFont: AdmiralTheme.AFont
  public var subtitleFont: AdmiralTheme.AFont
  public var tagViewFont: AdmiralTheme.AFont
  public var ghostButtonFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct CalendarPickerYear {
  public var title: Swift.String
  public var months: [AdmiralSwiftUI.CalendarPickerMonth]
  public var date: Foundation.Date
}
@available(iOS 14.0.0, *)
public struct ActionBarControlSchemeSecondary : AdmiralTheme.AppThemeScheme {
  public struct ActionBarControl {
  }
  public var actionBarControl: AdmiralSwiftUI.ActionBarControlSchemeSecondary.ActionBarControl
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var imageTintColor: AdmiralTheme.AColor
  public let alpha: CoreFoundation.CGFloat
  public init(theme: AdmiralTheme.AppTheme)
}
@available(iOS 14.0, *)
public struct ActionBarControlSchemeTwoTwoParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, style: AdmiralSwiftUI.ActionBarItemImageStyle, control: AdmiralSwiftUI.ControlState)
  public func parameter(for style: AdmiralSwiftUI.ActionBarItemImageStyle, control: AdmiralSwiftUI.ControlState) -> P?
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TwoTitlePrimaryButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor(unsafe) public init(leftTitle: Swift.String = "", rightTitle: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TwoTitlePrimaryButtonScheme> = AppThemeSchemeProvider<TwoTitlePrimaryButtonScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.TwoTitlePrimaryButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI26TwoTitlePrimaryButtonStyleV8makeBody13configurationQr0bC00gH13ConfigurationV_tF", 0) __
}
@available(iOS 14.0.0, *)
public struct CalendarVerticalViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var lineBackgroundColor: AdmiralTheme.AColor
  public var monthYearViewScheme: AdmiralSwiftUI.MonthYearViewScheme
  public var calendarWeekViewScheme: AdmiralSwiftUI.CalendarWeekViewScheme
  public var calendarViewCellColorScheme: AdmiralSwiftUI.CalendarViewCellColorScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct SearchBarColorScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public var tintColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public var imageTintColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum ImageListViewStyle : Swift.String {
  case primary
  case secondary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ImageListView : SwiftUI.View, AdmiralSwiftUI.LeadingListViewComponent {
  @SwiftUI.Binding @_projectedValueProperty($image) @_Concurrency.MainActor(unsafe) public var image: SwiftUI.Image {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $image: SwiftUI.Binding<SwiftUI.Image> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ImageListViewScheme> = AppThemeSchemeProvider<ImageListViewScheme>())
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, imageListViewStyle: AdmiralSwiftUI.ImageListViewStyle, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ImageListViewScheme> = AppThemeSchemeProvider<ImageListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI13ImageListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct CheckBox : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($isSelected) @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isSelected: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($text) @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($checkState) @_Concurrency.MainActor(unsafe) public var checkState: AdmiralSwiftUI.CheckControlState {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $checkState: SwiftUI.Binding<AdmiralSwiftUI.CheckControlState> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(isSelected: SwiftUI.Binding<Swift.Bool>, text: Swift.String, checkState: AdmiralSwiftUI.CheckControlState, checkBoxValueFormatString: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CheckControlScheme> = AppThemeSchemeProvider<CheckControlScheme>())
  @_Concurrency.MainActor(unsafe) public init(isSelected: SwiftUI.Binding<Swift.Bool>, text: Swift.String, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CheckControlScheme> = AppThemeSchemeProvider<CheckControlScheme>())
  @_Concurrency.MainActor(unsafe) public init(isSelected: SwiftUI.Binding<Swift.Bool>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CheckControlScheme> = AppThemeSchemeProvider<CheckControlScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI8CheckBoxV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TitleHeader : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($textAligment) @_Concurrency.MainActor(unsafe) public var textAligment: SwiftUI.TextAlignment {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $textAligment: SwiftUI.Binding<SwiftUI.TextAlignment> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, textAligment: SwiftUI.TextAlignment = .leading, headerStyle: AdmiralSwiftUI.HeaderStyle = .title, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TitleHeaderScheme> = AppThemeSchemeProvider<TitleHeaderScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI11TitleHeaderV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public enum ProgressViewStyle : Swift.Int {
  case `default`
  case accent
  case staticWhite
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
public enum ProgressViewSize {
  case small
  case large
  case medium
  public static func == (a: AdmiralSwiftUI.ProgressViewSize, b: AdmiralSwiftUI.ProgressViewSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ProgressView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public let style: AdmiralSwiftUI.ProgressViewStyle
  @_Concurrency.MainActor(unsafe) public let progressViewSize: AdmiralSwiftUI.ProgressViewSize
  @_Concurrency.MainActor(unsafe) public init(style: AdmiralSwiftUI.ProgressViewStyle = .default, progressViewSize: AdmiralSwiftUI.ProgressViewSize = .medium, closeAction: @escaping () -> () = {}, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ProgressViewScheme> = AppThemeSchemeProvider<ProgressViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI12ProgressViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct ParagraphViewScheme : AdmiralTheme.AppThemeScheme {
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public var leadingViewScheme: AdmiralSwiftUI.ImageListViewScheme
  public var centerViewScheme: AdmiralSwiftUI.TitleListViewScheme
  public var trailingViewScheme: AdmiralSwiftUI.IconListViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum BadgeStyle : Swift.Int {
  case natural
  case `default`
  case additional
  case success
  case error
  case attention
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct BadgeView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(badgeStyle: AdmiralSwiftUI.BadgeStyle, value: Swift.Int?, borderColor: SwiftUI.Color? = nil, offset: CoreFoundation.CGPoint = .zero, @SwiftUI.ViewBuilder content: @escaping () -> (Content), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BadgeViewScheme> = AppThemeSchemeProvider<BadgeViewScheme>())
  @_Concurrency.MainActor(unsafe) public init(badgeStyle: AdmiralSwiftUI.BadgeStyle, text: Swift.String?, borderColor: SwiftUI.Color? = nil, offset: CoreFoundation.CGPoint = .zero, @SwiftUI.ViewBuilder content: @escaping () -> (Content), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BadgeViewScheme> = AppThemeSchemeProvider<BadgeViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI9BadgeViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.BadgeView where Content == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(badgeStyle: AdmiralSwiftUI.BadgeStyle, value: Swift.Int?, borderColor: SwiftUI.Color? = nil, offset: CoreFoundation.CGPoint = .zero, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BadgeViewScheme> = AppThemeSchemeProvider<BadgeViewScheme>())
  @_Concurrency.MainActor(unsafe) public init(badgeStyle: AdmiralSwiftUI.BadgeStyle, text: Swift.String?, borderColor: SwiftUI.Color? = nil, offset: CoreFoundation.CGPoint = .zero, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BadgeViewScheme> = AppThemeSchemeProvider<BadgeViewScheme>())
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct OutlineSliderTab : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var onTapAction: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(items: [AdmiralSwiftUI.OutlineSliderTabItem], selection: SwiftUI.Binding<Swift.Int>, offset: SwiftUI.Binding<CoreFoundation.CGFloat> = .constant(0.0), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.OutlineSliderTabScheme> = AppThemeSchemeProvider<OutlineSliderTabScheme>(), onTapAction: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public init(items: [Swift.String], selection: SwiftUI.Binding<Swift.Int>, offset: SwiftUI.Binding<CoreFoundation.CGFloat> = .constant(0.0), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.OutlineSliderTabScheme> = AppThemeSchemeProvider<OutlineSliderTabScheme>(), onTapAction: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI16OutlineSliderTabV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct LeadingCardListView : SwiftUI.View, AdmiralSwiftUI.LeadingListViewComponent {
  @SwiftUI.Binding @_projectedValueProperty($cardImage) @_Concurrency.MainActor(unsafe) public var cardImage: SwiftUI.Image {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $cardImage: SwiftUI.Binding<SwiftUI.Image> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(cardImage: SwiftUI.Image, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.LeadingCardListViewScheme> = AppThemeSchemeProvider<LeadingCardListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI19LeadingCardListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct ActionBarViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var actionBarConrolScheme: AdmiralSwiftUI.ActionBarControlScheme
  public var actionBarControlSchemeTwo: AdmiralSwiftUI.ActionBarControlSchemeSecondary
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct Version : Swift.Codable {
  public let internal_version: Swift.String
  public let external_version: Swift.String
  public var versionName: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class LibraryInfo {
  public static var version: AdmiralSwiftUI.Version? {
    get
  }
  @objc deinit
}
@available(iOS 14.0, *)
public struct BankCardTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var errorColor: AdmiralTheme.AColor
  public var disabledColor: AdmiralTheme.AColor
  public var underlineColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralTheme.AColor
  public var textFieldFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public var informerFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct GhostButtonWithImageScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TagControlScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var textColor: AdmiralSwiftUI.TagParameters<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralSwiftUI.TagParameters<AdmiralTheme.AColor>
  public var viewTintColor: AdmiralSwiftUI.TagParameters<AdmiralTheme.AColor>
  public var linkTitleFont: AdmiralTheme.AFont
  public var linkTitleFontAdidtional: AdmiralTheme.AFont
  public var leadingTrailingViewsAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TagParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, for state: AdmiralSwiftUI.ControlState, style: AdmiralSwiftUI.TagStyle)
  public func parameter(for state: AdmiralSwiftUI.ControlState, style: AdmiralSwiftUI.TagStyle) -> P?
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct CalendarWeekView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(_ locale: Foundation.Locale? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CalendarWeekViewScheme> = AppThemeSchemeProvider<CalendarWeekViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI16CalendarWeekViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct FeedbackInputControlScheme : AdmiralTheme.AppThemeScheme {
  public var defaultColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var selectedColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct LinkView : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($buttonTitle) @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $buttonTitle: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var buttonAction: () -> ()
  @_Concurrency.MainActor(unsafe) public init(buttonTitle: Swift.String, accesibilityId: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.LinkViewScheme> = AppThemeSchemeProvider<LinkViewScheme>(), buttonAction: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI8LinkViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct TitleButtonDropDownScheme : AdmiralTheme.AppThemeScheme {
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public var centerViewScheme: AdmiralSwiftUI.SecondaryTitleListViewScheme
  public var trailingViewScheme: AdmiralSwiftUI.ButtonWithArrowListViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct ToolBarItemStyle : SwiftUI.ButtonStyle {
  public var image: SwiftUI.Image
  public var title: Swift.String
  public var badgeStyle: AdmiralSwiftUI.ToolBarBadgeStyle?
  public var type: AdmiralSwiftUI.ToolBarType
  public var scheme: AdmiralSwiftUI.ToolBarItemScheme
  public var isSelected: Swift.Bool
  public var itemType: AdmiralSwiftUI.ToolbarItemType
  public var isEnabled: Swift.Bool
  public init(scheme: AdmiralSwiftUI.ToolBarItemScheme, image: SwiftUI.Image, title: Swift.String, badgeStyle: AdmiralSwiftUI.ToolBarBadgeStyle?, type: AdmiralSwiftUI.ToolBarType, itemType: AdmiralSwiftUI.ToolbarItemType, isSelected: Swift.Bool, isEnabled: Swift.Bool)
  public func makeBody(configuration: AdmiralSwiftUI.ToolBarItemStyle.Configuration) -> SwiftUI.AnyView
  public typealias Body = SwiftUI.AnyView
}
@available(iOS 14.0, *)
public struct DoubleTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var errorColor: AdmiralTheme.AColor
  public var underlineColor: AdmiralTheme.AColor
  public var disabledColor: AdmiralTheme.AColor
  public var informerFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct UploadImageViewModifier : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: AdmiralSwiftUI.UploadImageViewModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI23UploadImageViewModifierV4body7contentQr0bC001_fG8_ContentVyACG_tF", 0) __
}
public struct ChatInputScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var tintColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public var imageTintColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct OTPTextField : AdmiralSwiftUI.TextFieldInput, AdmiralSwiftUI.AccessabilitySupportUIKit, Swift.Identifiable {
  @_Concurrency.MainActor(unsafe) public let id: Foundation.UUID
  @SwiftUI.Binding @_projectedValueProperty($state) @_Concurrency.MainActor(unsafe) public var state: AdmiralSwiftUI.TextInputState {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($info) @_Concurrency.MainActor(unsafe) public var info: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $info: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, textContentType: UIKit.UITextContentType? = .oneTimeCode, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), isResponder: SwiftUI.Binding<Swift.Bool>? = nil, infoNumberOfLines: Swift.Int? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.OTPTextFieldScheme> = AppThemeSchemeProvider<OTPTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, textContentType: UIKit.UITextContentType? = .oneTimeCode, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), isResponder: SwiftUI.Binding<Swift.Bool>? = nil, infoNumberOfLines: Swift.Int? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.OTPTextFieldScheme> = AppThemeSchemeProvider<OTPTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func state(_ state: AdmiralSwiftUI.TextInputState) -> AdmiralSwiftUI.OTPTextField
  @_Concurrency.MainActor(unsafe) public func accessibility(identifierUIKit: Swift.String) -> AdmiralSwiftUI.OTPTextField
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI12OTPTextFieldV4bodyQrvp", 0) __
  public typealias ID = Foundation.UUID
}
@available(iOS 14.0.0, *)
public struct CheckControlScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralSwiftUI.CheckControlParameters<AdmiralTheme.AColor>
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var textFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public typealias CheckControlParameters<P> = AdmiralCore.DoubleParameterBox<AdmiralSwiftUI.ControlState, AdmiralSwiftUI.CheckControlState, P>
public struct PlatformButtonScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var backgroundColor: AdmiralTheme.AColor
  public var buttonBackgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct ChatBubbleViewScheme : AdmiralTheme.AppThemeScheme {
  public var textFont: AdmiralTheme.AFont
  public var textColor: AdmiralSwiftUI.ChatBubbleViewParameters<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralSwiftUI.ChatBubbleViewParameters<AdmiralTheme.AColor>
  public var errorImageColor: AdmiralTheme.AColor
  public var nameTextFont: AdmiralTheme.AFont
  public var nameTextColor: AdmiralTheme.AColor
  public var chatBubbleStatusScheme: AdmiralSwiftUI.ChatBubbleStatusViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct ChatBubbleViewParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, style: AdmiralSwiftUI.ChatDirection)
  public func parameter(for style: AdmiralSwiftUI.ChatDirection) -> P?
}
@available(iOS 14.0.0, *)
public enum UploadDocumentState {
  case loading
  case description
  case download
  public static func == (a: AdmiralSwiftUI.UploadDocumentState, b: AdmiralSwiftUI.UploadDocumentState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
public struct UploadDocument : Swift.Hashable {
  public var id: Swift.String
  public var state: AdmiralSwiftUI.UploadDocumentState
  public let fileName: Swift.String
  public let fileSize: Swift.String
  public let time: Swift.String
  public let name: Swift.String?
  public let status: AdmiralSwiftUI.ChatStatus?
  public var closeAction: () -> ()
  public init(state: AdmiralSwiftUI.UploadDocumentState, fileName: Swift.String, fileSize: Swift.String, time: Swift.String, name: Swift.String? = nil, status: AdmiralSwiftUI.ChatStatus? = nil, closeAction: @escaping () -> () = {})
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AdmiralSwiftUI.UploadDocument, rhs: AdmiralSwiftUI.UploadDocument) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
final public class LogoTabScheme : AdmiralTheme.AppThemeScheme {
  final public var backgroundColor: AdmiralTheme.AColor
  final public var thumbColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var borderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var alphaLogo: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public init(theme: AdmiralTheme.AppTheme = .default)
  @objc deinit
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct CheckboxTextbuttonView : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($isSelected) @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isSelected: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, isSelected: SwiftUI.Binding<Swift.Bool>, subtitleButtonTitle: Swift.String? = nil, checkBoxAccessibilityIdentifier: Swift.String = "", linkButtonAccessibilityIdentifier: Swift.String = "", subtitleButtonAction: @escaping () -> () = {}, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CheckboxTextbuttonViewScheme> = AppThemeSchemeProvider<CheckboxTextbuttonViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI22CheckboxTextbuttonViewV4bodyQrvp", 0) __
}
public enum SmallInformerArrowDirection {
  case top
  case bottom
  case topRight
  case bottomRight
  public static func == (a: AdmiralSwiftUI.SmallInformerArrowDirection, b: AdmiralSwiftUI.SmallInformerArrowDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct SmallInformer : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, informerStyle: AdmiralSwiftUI.InformerStyleSwiftUI = .default, arrowDirection: AdmiralSwiftUI.SmallInformerArrowDirection = .top, arrowOffset: CoreFoundation.CGFloat = LayoutGrid.halfModule * 3, cornerRadius: AdmiralSwiftUI.CornerRadius = .module, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SmallInformerScheme> = AppThemeSchemeProvider<SmallInformerScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI13SmallInformerV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct PrimaryButtonStyle : SwiftUI.ButtonStyle {
  @SwiftUI.Binding @_projectedValueProperty($isLoading) @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isLoading: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var sizeType: AdmiralSwiftUI.ButtonSizeType?
  @_Concurrency.MainActor(unsafe) public init(isLoading: SwiftUI.Binding<Swift.Bool> = .constant(false), sizeType: AdmiralSwiftUI.ButtonSizeType? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.PrimaryButtonScheme> = AppThemeSchemeProvider<PrimaryButtonScheme>(), accessibilityIdentifier: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.PrimaryButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI18PrimaryButtonStyleV8makeBody13configurationQr0bC00eF13ConfigurationV_tF", 0) __
}
@available(iOS 14.0.0, *)
public struct SubtitleTitleHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public var centerViewScheme: AdmiralSwiftUI.SubtitleTitleListViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct PrimaryLinkControlScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralSwiftUI.PrimaryLinkControlSchemeParameters<AdmiralTheme.AFont>
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct PrimaryLinkControlSchemeParameters<P> {
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct TextView<T> : AdmiralSwiftUI.TextFieldInput, AdmiralSwiftUI.AccessabilitySupportUIKit, Swift.Identifiable where T : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public let id: Foundation.UUID
  @SwiftUI.Binding @_projectedValueProperty($state) @_Concurrency.MainActor(unsafe) public var state: AdmiralSwiftUI.TextInputState {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($info) @_Concurrency.MainActor(unsafe) public var info: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $info: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, canPerformActionPaste: Swift.Bool = false, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, canPerformActionPaste: Swift.Bool = false, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func state(_ state: AdmiralSwiftUI.TextInputState) -> AdmiralSwiftUI.TextView<T>
  @_Concurrency.MainActor(unsafe) public func accessibility(identifierUIKit: Swift.String) -> AdmiralSwiftUI.TextView<T>
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI8TextViewV4bodyQrvp", 0) __<T>
  public typealias ID = Foundation.UUID
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.TextView where T == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, canPerformActionPaste: Swift.Bool = false, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .yes, canPerformActionPaste: Swift.Bool = false, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ArrowListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ArrowListViewScheme> = AppThemeSchemeProvider<ArrowListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI13ArrowListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct GhostButtonWithImageStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor(unsafe) public var image: SwiftUI.Image?
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image?, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.GhostButtonWithImageScheme> = AppThemeSchemeProvider<GhostButtonWithImageScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.GhostButtonWithImageStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI25GhostButtonWithImageStyleV8makeBody13configurationQr0bC00eH13ConfigurationV_tF", 0) __
}
public struct CoundDownViewScheme : AdmiralTheme.AppThemeScheme {
  public var clockViewScheme: AdmiralSwiftUI.ClockScheme
  public var progressBarScheme: AdmiralSwiftUI.ProgressBarScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct InputRangeTextField<T> : AdmiralSwiftUI.TextFieldInput, AdmiralSwiftUI.AccessabilitySupportUIKit, Swift.Identifiable where T : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public let id: Foundation.UUID
  @SwiftUI.Binding @_projectedValueProperty($content) @_Concurrency.MainActor(unsafe) public var content: Swift.String? {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $content: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($state) @_Concurrency.MainActor(unsafe) public var state: AdmiralSwiftUI.TextInputState {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($info) @_Concurrency.MainActor(unsafe) public var info: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $info: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), leadingText: Swift.String? = nil, infoNumberOfLines: Swift.Int? = nil, sliderValue: Swift.Double = 0, minValue: Swift.Double = 0, maxValue: Swift.Double = 100, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, contentType: UIKit.UIKeyboardType = .numberPad, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.InputRangeTextFieldScheme> = AppThemeSchemeProvider<InputRangeTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), leadingText: Swift.String? = nil, infoNumberOfLines: Swift.Int? = nil, sliderValue: Swift.Double = 0, minValue: Swift.Double = 0, maxValue: Swift.Double = 100, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, contentType: UIKit.UIKeyboardType = .numberPad, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.InputRangeTextFieldScheme> = AppThemeSchemeProvider<InputRangeTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func state(_ state: AdmiralSwiftUI.TextInputState) -> AdmiralSwiftUI.InputRangeTextField<T>
  @_Concurrency.MainActor(unsafe) public func accessibility(identifierUIKit: Swift.String) -> AdmiralSwiftUI.InputRangeTextField<T>
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI19InputRangeTextFieldV4bodyQrvp", 0) __<T>
  public typealias ID = Foundation.UUID
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.InputRangeTextField where T == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), leadingText: Swift.String? = nil, infoNumberOfLines: Swift.Int? = nil, sliderValue: Swift.Double = 0, minValue: Swift.Double = 0, maxValue: Swift.Double = 100, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, contentType: UIKit.UIKeyboardType = .numberPad, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.InputRangeTextFieldScheme> = AppThemeSchemeProvider<InputRangeTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), leadingText: Swift.String? = nil, infoNumberOfLines: Swift.Int? = nil, sliderValue: Swift.Double = 0, minValue: Swift.Double = 0, maxValue: Swift.Double = 100, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, contentType: UIKit.UIKeyboardType = .numberPad, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.InputRangeTextFieldScheme> = AppThemeSchemeProvider<InputRangeTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil)
}
@available(iOS 14.0, *)
public struct ProgressViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ProgressViewSchemeParameters<AdmiralTheme.AColor>
  public var circleColor: AdmiralSwiftUI.ProgressViewSchemeParameters<AdmiralTheme.AColor>
  public var iconColor: AdmiralSwiftUI.ProgressViewSchemeParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct ProgressViewSchemeParameters<P> {
}
public enum ControlState : Swift.UInt {
  case normal
  case highlighted
  case disabled
  case selected
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension AdmiralSwiftUI.ControlState : AdmiralCore.DefaultRepresentable {
  public static var defaultValue: AdmiralSwiftUI.ControlState {
    get
  }
}
public typealias ControlParameter<P> = AdmiralCore.ParameterBox<AdmiralSwiftUI.ControlState, P>
public enum ButtonSizeType : Swift.String {
  case small
  case medium
  case big
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ChatButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor(unsafe) public init(schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ChatButtonScheme> = AppThemeSchemeProvider<ChatButtonScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.ChatButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI15ChatButtonStyleV8makeBody13configurationQr0bC00eF13ConfigurationV_tF", 0) __
}
public enum ToolBarType {
  case horizontal
  case vertical
  public static func == (a: AdmiralSwiftUI.ToolBarType, b: AdmiralSwiftUI.ToolBarType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ToolBar : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(items: SwiftUI.Binding<[AdmiralSwiftUI.ToolBarItem]>, type: SwiftUI.Binding<AdmiralSwiftUI.ToolBarType>, selectedIndex: SwiftUI.Binding<Swift.Int>, onTap: @escaping (Swift.Int) -> (), isSelectable: Swift.Bool = true, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ToolBarScheme> = AppThemeSchemeProvider<ToolBarScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI7ToolBarV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct CheckBoxListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var checkBoxScheme: AdmiralSwiftUI.CheckControlScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct LeadingCardListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CodeInputControlScheme : AdmiralTheme.AppThemeScheme {
  public var defaultColor: AdmiralTheme.AColor
  public var activeColor: AdmiralTheme.AColor
  public var successColor: AdmiralTheme.AColor
  public var errorColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct ToolBarScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var shadowColor: AdmiralTheme.AColor
  public var itemScheme: AdmiralSwiftUI.ToolBarItemScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct TwoTitlePrimaryButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(leftText: Swift.String, rightText: Swift.String, action: @escaping () -> (), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TwoTitlePrimaryButtonScheme> = AppThemeSchemeProvider<TwoTitlePrimaryButtonScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI21TwoTitlePrimaryButtonV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct SubtitleWithImageListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(subtitle: Swift.String?, image: SwiftUI.Image?, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SubtitleWithImageListViewScheme> = AppThemeSchemeProvider<SubtitleWithImageListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI25SubtitleWithImageListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct SmallInformerScheme : AdmiralTheme.AppThemeScheme {
  public var titleLabelTextColors: AdmiralSwiftUI.InformerParameters<AdmiralTheme.AColor>
  public var wrapViewBackgroundColors: AdmiralSwiftUI.InformerParameters<AdmiralTheme.AColor>
  public var backgroundColors: AdmiralSwiftUI.InformerParameters<AdmiralTheme.AColor>
  public var titleLabelFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct CalendarPickerMonth {
  public var title: Swift.String
  public var index: Swift.Int
  public var year: Swift.String
  public var date: Foundation.Date
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TitleSubtitleHeader : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($subtitle) @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $subtitle: SwiftUI.Binding<Swift.String?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, subtitle: Swift.String?, headerStyle: AdmiralSwiftUI.HeaderStyle = .title, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TitleSubtitleHeaderScheme> = AppThemeSchemeProvider<TitleSubtitleHeaderScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI19TitleSubtitleHeaderV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ButtonDropDown : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($buttonTitle) @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $buttonTitle: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var buttonAction: () -> ()
  @SwiftUI.Binding @_projectedValueProperty($drropDownHeaderType) @_Concurrency.MainActor(unsafe) public var drropDownHeaderType: AdmiralSwiftUI.DropDownHeaderType {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $drropDownHeaderType: SwiftUI.Binding<AdmiralSwiftUI.DropDownHeaderType> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(buttonTitle: Swift.String, dropDownHeaderType: AdmiralSwiftUI.DropDownHeaderType = .down, buttonAccesibilityId: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ButtonDropDownScheme> = AppThemeSchemeProvider<ButtonDropDownScheme>(), buttonAction: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI14ButtonDropDownV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct TitleHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public var centerViewScheme: AdmiralSwiftUI.TitleListViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct InputNumber : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(titleText: SwiftUI.Binding<Swift.String?>, value: SwiftUI.Binding<Swift.Double>, minimumValue: SwiftUI.Binding<Swift.Double> = .constant(0.0), maximumValue: SwiftUI.Binding<Swift.Double> = .constant(.infinity), stepValue: SwiftUI.Binding<Swift.Double> = .constant(1.0), style: AdmiralSwiftUI.InputNumberStyle = .default, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.InputNumberScheme> = AppThemeSchemeProvider<InputNumberScheme>())
  @_Concurrency.MainActor(unsafe) public init(titleText: SwiftUI.Binding<Swift.String?>, value: SwiftUI.Binding<Swift.Double>, minimumValue: SwiftUI.Binding<Swift.Double> = .constant(0.0), maximumValue: SwiftUI.Binding<Swift.Double> = .constant(.infinity), stepValue: SwiftUI.Binding<Swift.Double> = .constant(1.0), style: AdmiralSwiftUI.InputNumberStyle = .default, textfieldWidth: CoreFoundation.CGFloat? = nil, placeholder: Swift.String? = nil, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, contentType: UIKit.UIKeyboardType = .numberPad, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, textContentType: UIKit.UITextContentType? = nil, canPerformActionPaste: Swift.Bool = true, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.InputNumberScheme> = AppThemeSchemeProvider<InputNumberScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI11InputNumberV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct PinButtonScheme : AdmiralTheme.AppThemeScheme {
  public var selectedBackgroundColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public let shadowColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct CheckboxTextbuttonViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleFont: AdmiralTheme.AFont
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum ToastNotificationsDirection {
  case up
  case down
  public static func == (a: AdmiralSwiftUI.ToastNotificationsDirection, b: AdmiralSwiftUI.ToastNotificationsDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ZToastNotificationsView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @SwiftUI.StateObject @_projectedValueProperty($toastPresenter) @_Concurrency.MainActor(unsafe) public var toastPresenter: AdmiralSwiftUI.ToastPresenter {
    get
  }
  @_Concurrency.MainActor(unsafe) public var $toastPresenter: SwiftUI.ObservedObject<AdmiralSwiftUI.ToastPresenter>.Wrapper {
    get
  }
  @_Concurrency.MainActor(unsafe) public var content: (AdmiralSwiftUI.ToastPresenter) -> (Content)
  @_Concurrency.MainActor(unsafe) public init(animationDuration: Swift.Double = Durations.Default.double, hideAnimationDuration: Swift.Double = 7.0, direction: AdmiralSwiftUI.ToastNotificationsDirection = .down, isAfterTouchUpdateTimer: Swift.Bool = true, topOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat = 0.0, toastsDidDisappear: @escaping () -> () = {}, @SwiftUI.ViewBuilder content: @escaping (AdmiralSwiftUI.ToastPresenter) -> (Content))
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI23ZToastNotificationsViewV4bodyQrvp", 0) __<Content>
}
public struct ZeroScreenViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleColor: AdmiralTheme.AColor
  public var titleFont: AdmiralTheme.AFont
  public var subtitleColor: AdmiralTheme.AColor
  public var subtitleFont: AdmiralTheme.AFont
  public var buttonScheme: AdmiralSwiftUI.PrimaryButtonScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct SubtitleTitleHeader : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($subtitle) @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $subtitle: SwiftUI.Binding<Swift.String?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, subtitle: Swift.String?, headerStyle: AdmiralSwiftUI.HeaderStyle = .title, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SubtitleTitleHeaderScheme> = AppThemeSchemeProvider<SubtitleTitleHeaderScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI19SubtitleTitleHeaderV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ErrorView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String?
  @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var buttonAction: () -> ()
  @SwiftUI.Binding @_projectedValueProperty($isLoadingButton) @_Concurrency.MainActor(unsafe) public var isLoadingButton: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isLoadingButton: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(text: Swift.String? = nil, buttonTitle: Swift.String? = nil, isLoadingButton: SwiftUI.Binding<Swift.Bool> = .constant(false), buttonAction: @escaping () -> () = {}, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ErrorViewScheme> = AppThemeSchemeProvider<ErrorViewScheme>(), buttonAccessibilityId: Swift.String = "")
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI9ErrorViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct TitleArrowWithButtonHeaderScheme : AdmiralTheme.AppThemeScheme {
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public var centerViewScheme: AdmiralSwiftUI.TitleWithImageListViewScheme
  public var trailingViewScheme: AdmiralSwiftUI.ButtonListViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct CalendarHorizontalHeaderView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, isOpen: SwiftUI.Binding<Swift.Bool>, monthYearButtonTap: @escaping () -> Swift.Void, leftArrowTap: @escaping () -> Swift.Void, rightArrowTap: @escaping () -> Swift.Void, choiceTap: @escaping () -> Swift.Void, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CalendarHorizontalHeaderViewScheme> = AppThemeSchemeProvider<CalendarHorizontalHeaderViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI28CalendarHorizontalHeaderViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TitleSubtitleButtonListView : SwiftUI.View, AdmiralSwiftUI.CenterListViewComponent {
  @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($tagSubtitle) @_Concurrency.MainActor(unsafe) public var tagSubtitle: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $tagSubtitle: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($tagText) @_Concurrency.MainActor(unsafe) public var tagText: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $tagText: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($subtitle) @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $subtitle: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($buttonTitle) @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $buttonTitle: SwiftUI.Binding<Swift.String?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var buttonAction: () -> ()
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, tagSubtitle: Swift.String?, tagText: Swift.String?, subtitle: Swift.String?, subtitleLineLimit: Swift.Int? = nil, buttonTitle: Swift.String?, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TitleSubtitleButtonListViewScheme> = AppThemeSchemeProvider<TitleSubtitleButtonListViewScheme>(), buttonAction: (() -> ())?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI27TitleSubtitleButtonListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct RadioButtonListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.Binding @_projectedValueProperty($isControlSelected) @_Concurrency.MainActor(unsafe) public var isControlSelected: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isControlSelected: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(isControlSelected: SwiftUI.Binding<Swift.Bool>, radioControlValueFormatString: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.RadioButtonListViewScheme> = AppThemeSchemeProvider<RadioButtonListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI19RadioButtonListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct SeparatorView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle
  @_Concurrency.MainActor(unsafe) public init(paddingStyle: AdmiralSwiftUI.SeparatorStyle = .short, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SeparatorViewScheme> = AppThemeSchemeProvider<SeparatorViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI13SeparatorViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ImageBackgroundListView : SwiftUI.View, AdmiralSwiftUI.LeadingListViewComponent {
  @SwiftUI.Binding @_projectedValueProperty($image) @_Concurrency.MainActor(unsafe) public var image: SwiftUI.Image {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $image: SwiftUI.Binding<SwiftUI.Image> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ImageBackgroundListViewScheme> = AppThemeSchemeProvider<ImageBackgroundListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI23ImageBackgroundListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
final public class InputNumberScheme : AdmiralTheme.AppThemeScheme {
  final public var titleFont: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AFont>
  final public var numberFont: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AFont>
  final public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var buttonScheme: AdmiralSwiftUI.InputNumberButtonScheme
  final public var textFieldBackground: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var placeholderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var textFieldFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
  @objc deinit
}
public struct MonthMetadata {
}
@available(iOS 14.0.0, *)
public struct CalendarGenerator {
  public init()
  public func calculatePreviousMonthData(currentDate: Foundation.Date, startDate: Foundation.Date?) -> Foundation.Date?
  public func calculateNextMonthData(currentDate: Foundation.Date, endDate: Foundation.Date?) -> Foundation.Date?
  public func calculateInitPickerData(startInitDate: Foundation.Date, endInitDate: Foundation.Date, startDate: Foundation.Date?, endDate: Foundation.Date?) -> [AdmiralSwiftUI.CalendarPickerYear]?
  public func calculateStartPickerData(startDate: Foundation.Date?, pickerStartDate: Foundation.Date) -> [AdmiralSwiftUI.CalendarPickerYear]?
  public func calculateEndPickerData(endDate: Foundation.Date?, pickerEndDate: Foundation.Date) -> [AdmiralSwiftUI.CalendarPickerYear]?
  public func calculatePickerData(totalYears: Swift.Int, toDate: Foundation.Date, startDate: Foundation.Date?, endDate: Foundation.Date?, isInitState: Swift.Bool = false) -> [AdmiralSwiftUI.CalendarPickerYear]
  public func calculateDates(startDate: Foundation.Date, endDate: Foundation.Date, monthDate: Foundation.Date? = nil) -> ([Foundation.Date], Foundation.Date?)
  public func monthMetadata(for baseDate: Foundation.Date) -> AdmiralSwiftUI.MonthMetadata?
  public func generateDaysInMonth(metadata: AdmiralSwiftUI.MonthMetadata) -> [AdmiralSwiftUI.CalendarDay]
}
@available(iOS 14.0, *)
public enum SeparatorStyle : Swift.String {
  case long
  case short
  case empty
  public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0.0, *)
public struct PinCodeNumberViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var textFont: SwiftUI.Font
  public init(theme: AdmiralTheme.AppTheme)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct CustomSwitch : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(isOn: SwiftUI.Binding<Swift.Bool>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CustomSwitchScheme> = AppThemeSchemeProvider<CustomSwitchScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI12CustomSwitchV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct SubtitleTitleListView : SwiftUI.View, AdmiralSwiftUI.CenterListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($subtitle) @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $subtitle: SwiftUI.Binding<Swift.String?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, subtitle: Swift.String?, lineLimit: Swift.Int? = nil, titleSubtitleListViewStyle: AdmiralSwiftUI.TitleSubtitleListViewStyle? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SubtitleTitleListViewScheme> = AppThemeSchemeProvider<SubtitleTitleListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI21SubtitleTitleListViewV4bodyQrvp", 0) __
}
public enum ToolBarBadgeStyle {
  case empty
  case value(Swift.Int)
}
public enum ToolbarItemType : Swift.String {
  case `default`
  case error
  case success
  case attention
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0.0, *)
public struct ToolBarItem : Swift.Hashable, Swift.Identifiable {
  public let id: Foundation.UUID
  public let title: Swift.String
  public let image: SwiftUI.Image
  public var badgeStyle: AdmiralSwiftUI.ToolBarBadgeStyle?
  public var type: AdmiralSwiftUI.ToolbarItemType
  public var isEnabled: Swift.Bool
  public var accessibilityId: Swift.String
  public init(title: Swift.String, image: SwiftUI.Image, badgeStyle: AdmiralSwiftUI.ToolBarBadgeStyle? = nil, type: AdmiralSwiftUI.ToolbarItemType = .default, isEnabled: Swift.Bool = true, accessibilityId: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AdmiralSwiftUI.ToolBarItem, rhs: AdmiralSwiftUI.ToolBarItem) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
public struct ToolBarItemSelectable : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI21ToolBarItemSelectableV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct SecondaryTitleListView : SwiftUI.View, AdmiralSwiftUI.CenterListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, lineLimit: Swift.Int? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SecondaryTitleListViewScheme> = AppThemeSchemeProvider<SecondaryTitleListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI22SecondaryTitleListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct DropDownHeader : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($dropDownHeaderType) @_Concurrency.MainActor(unsafe) public var dropDownHeaderType: AdmiralSwiftUI.DropDownHeaderType {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $dropDownHeaderType: SwiftUI.Binding<AdmiralSwiftUI.DropDownHeaderType> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle
  @_Concurrency.MainActor(unsafe) public var renderingMode: SwiftUI.Image.TemplateRenderingMode
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, dropDownHeaderType: AdmiralSwiftUI.DropDownHeaderType = .down, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, headerStyle: AdmiralSwiftUI.HeaderStyle = .title, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.DropDownHeaderScheme> = AppThemeSchemeProvider<DropDownHeaderScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI14DropDownHeaderV4bodyQrvp", 0) __
}
public struct ImageBackgroundListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var backgroundImageViewColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct CurrencyHeaderView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(currencyText: Swift.String, buyText: Swift.String, sellText: Swift.String, isTextSpacingEnabled: Swift.Bool = false, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CurrencyHeaderViewScheme> = AppThemeSchemeProvider<CurrencyHeaderViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI18CurrencyHeaderViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ImageWithSubtitleListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(subtitle: Swift.String?, image: SwiftUI.Image?, renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ImageWithSubtitleListViewScheme> = AppThemeSchemeProvider<ImageWithSubtitleListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI25ImageWithSubtitleListViewV4bodyQrvp", 0) __
}
public enum LayoutGrid {
  public static let module: CoreFoundation.CGFloat
  public static let halfModule: CoreFoundation.CGFloat
  public static let doubleModule: CoreFoundation.CGFloat
  public static let tripleModule: CoreFoundation.CGFloat
  public static let quadrupleModule: CoreFoundation.CGFloat
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct DoubleTextField<T1, T2> : SwiftUI.View where T1 : AdmiralSwiftUI.TextFieldInput, T2 : AdmiralSwiftUI.TextFieldInput {
  public enum Alignment {
    case fixedFirst(first: CoreFoundation.CGFloat)
    case fixedSecond(second: CoreFoundation.CGFloat)
    case ratio(ration: CoreFoundation.CGFloat)
  }
  @SwiftUI.Binding @_projectedValueProperty($state) @_Concurrency.MainActor(unsafe) public var state: AdmiralSwiftUI.TextInputState {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var info: Swift.String
  @_Concurrency.MainActor(unsafe) public let alignment: AdmiralSwiftUI.DoubleTextField<T1, T2>.Alignment
  @_Concurrency.MainActor(unsafe) public let infoNumberOfLines: Swift.Int?
  @_Concurrency.MainActor(unsafe) public init(firstTextField: T1, secondTextField: T2, accessibilityIdentifier: Swift.String? = nil, alignment: AdmiralSwiftUI.DoubleTextField<T1, T2>.Alignment, info: Swift.String = "", infoNumberOfLines: Swift.Int? = nil, state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.DoubleTextFieldScheme> = AppThemeSchemeProvider<DoubleTextFieldScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI15DoubleTextFieldV4bodyQrvp", 0) __<T1, T2>
}
public struct ChatButtonScheme : AdmiralTheme.AppThemeScheme {
  public var buttonColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var sendButtonColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct SecondaryTitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
final public class OutlineSliderTabScheme : AdmiralTheme.AppThemeScheme {
  final public var backgroundColor: AdmiralTheme.AColor
  final public var thumbColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var borderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var titleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var titleFont: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
  @objc deinit
}
@available(iOS 14.0.0, *)
public struct Month : Swift.Hashable, Swift.Identifiable {
  public let id: Foundation.UUID
  public var days: [AdmiralSwiftUI.CalendarDay]
  public var title: Swift.String
  public var date: Foundation.Date
  public init(days: [AdmiralSwiftUI.CalendarDay], title: Swift.String, date: Foundation.Date)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdmiralSwiftUI.Month, b: AdmiralSwiftUI.Month) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct SecondaryButtonStyle : SwiftUI.ButtonStyle {
  @SwiftUI.Binding @_projectedValueProperty($isLoading) @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isLoading: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var sizeType: AdmiralSwiftUI.ButtonSizeType?
  @_Concurrency.MainActor(unsafe) public init(isLoading: SwiftUI.Binding<Swift.Bool> = .constant(false), sizeType: AdmiralSwiftUI.ButtonSizeType? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SecondaryButtonScheme> = AppThemeSchemeProvider<SecondaryButtonScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.SecondaryButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI20SecondaryButtonStyleV8makeBody13configurationQr0bC00eF13ConfigurationV_tF", 0) __
}
@available(iOS 14.0.0, *)
public struct TwoTitleGhostButtonScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var leftGhostButtonScheme: AdmiralSwiftUI.GhostButtonScheme
  public var rightGhostButtonScheme: AdmiralSwiftUI.GhostButtonScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public enum ActionBarItemImageStyle : Swift.Int {
  case accent
  case primary
  case error
  case success
  case attention
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ArrowSegmentSlider : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ArrowSegmentSliderScheme> = AppThemeSchemeProvider<ArrowSegmentSliderScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI18ArrowSegmentSliderV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct UploadDocumentGrid : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var tappedIndex: ((_ index: Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(models: [AdmiralSwiftUI.UploadDocument], direction: AdmiralSwiftUI.ChatDirection, tappedIndex: ((_ index: Swift.Int) -> Swift.Void)? = nil, errorAction: @escaping () -> () = {}, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.UploadDocumentGridScheme> = AppThemeSchemeProvider<UploadDocumentGridScheme>())
  @_Concurrency.MainActor(unsafe) public init(model: AdmiralSwiftUI.UploadDocument, direction: AdmiralSwiftUI.ChatDirection, tappedIndex: ((_ index: Swift.Int) -> Swift.Void)? = nil, errorAction: @escaping () -> () = {}, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.UploadDocumentGridScheme> = AppThemeSchemeProvider<UploadDocumentGridScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI18UploadDocumentGridV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
final public class InputNumberButtonScheme : AdmiralTheme.AppThemeScheme {
  final public var backgroundColor: AdmiralSwiftUI.InputNumberButtonParameters<AdmiralTheme.AColor>
  final public var tintColor: AdmiralSwiftUI.InputNumberButtonParameters<AdmiralTheme.AColor>
  final public var borderColor: AdmiralSwiftUI.InputNumberButtonParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
  @objc deinit
}
public struct InputNumberButtonParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, for state: AdmiralSwiftUI.ControlState, style: AdmiralSwiftUI.InputNumberStyle)
  public func parameter(for state: AdmiralSwiftUI.ControlState, style: AdmiralSwiftUI.InputNumberStyle) -> P?
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TitleArrowWithButtonHeader : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($buttonTitle) @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $buttonTitle: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($dropDownHeaderType) @_Concurrency.MainActor(unsafe) public var dropDownHeaderType: AdmiralSwiftUI.DropDownHeaderType? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $dropDownHeaderType: SwiftUI.Binding<AdmiralSwiftUI.DropDownHeaderType?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var buttonAction: () -> ()
  @_Concurrency.MainActor(unsafe) public var renderingMode: SwiftUI.Image.TemplateRenderingMode
  @_Concurrency.MainActor(unsafe) public var textBlockStyle: AdmiralSwiftUI.TextBlockStyle
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, buttonTitle: Swift.String, buttonAction: @escaping () -> (), renderingMode: SwiftUI.Image.TemplateRenderingMode = .original, dropDownHeaderType: AdmiralSwiftUI.DropDownHeaderType? = nil, headerStyle: AdmiralSwiftUI.HeaderStyle = .title, buttonAccesibilityId: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TitleArrowWithButtonHeaderScheme> = AppThemeSchemeProvider<TitleArrowWithButtonHeaderScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI26TitleArrowWithButtonHeaderV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct PinCodeTextViewStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor(unsafe) public init(schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.PinCodeTextViewScheme> = AppThemeSchemeProvider<PinCodeTextViewScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.PinCodeTextViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI20PinCodeTextViewStyleV8makeBody13configurationQr0bC006ButtonH13ConfigurationV_tF", 0) __
}
@available(iOS 14.0.0, *)
public struct SwitchListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var customSwitchScheme: AdmiralSwiftUI.CustomSwitchScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ProgressBarScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public protocol ListViewCell : SwiftUI.View {
  var isHighlighted: Swift.Bool? { get set }
}
public enum CornerRadius : CoreFoundation.CGFloat {
  case zero
  case module
  case doubleModule
  case tripleModule
  case quadrupleModule
  public init?(rawValue: CoreFoundation.CGFloat)
  public typealias RawValue = CoreFoundation.CGFloat
  public var rawValue: CoreFoundation.CGFloat {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct ListCell<L, C, T> : AdmiralSwiftUI.ListViewCell where L : SwiftUI.View, C : SwiftUI.View, T : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($isSelected) @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isSelected: SwiftUI.Binding<Swift.Bool?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var centerView: (() -> C)?
  @_Concurrency.MainActor(unsafe) public var trailingView: (() -> T)?
  @_Concurrency.MainActor(unsafe) public var leadingView: (() -> L)?
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder leadingView: @escaping () -> L, @SwiftUI.ViewBuilder centerView: @escaping () -> C, @SwiftUI.ViewBuilder trailingView: @escaping () -> T, isHighlighted: SwiftUI.Binding<Swift.Bool?> = .constant(nil), isSelected: SwiftUI.Binding<Swift.Bool?> = .constant(nil), centerLayoutPriority: Swift.Double = 1.0, trailingLayoutPriority: Swift.Double = 0.0, cornerRadius: AdmiralSwiftUI.CornerRadius = .zero, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ListCellScheme> = AppThemeSchemeProvider<ListCellScheme>())
  @_Concurrency.MainActor(unsafe) public init(leadingView: (() -> L)? = nil, centerView: (() -> C)? = nil, trailingView: (() -> T)? = nil, isHighlighted: SwiftUI.Binding<Swift.Bool?> = .constant(nil), isSelected: SwiftUI.Binding<Swift.Bool?> = .constant(nil), centerLayoutPriority: Swift.Double = 1.0, trailingLayoutPriority: Swift.Double = 0.0, cornerRadius: AdmiralSwiftUI.CornerRadius = .zero, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ListCellScheme> = AppThemeSchemeProvider<ListCellScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func configCell(minHeight: CoreFoundation.CGFloat = LayoutGrid.halfModule * 18, edgeInsets: SwiftUI.EdgeInsets = EdgeInsets(
            top: LayoutGrid.halfModule * 3,
            leading: LayoutGrid.doubleModule,
            bottom: LayoutGrid.halfModule * 3,
            trailing: LayoutGrid.doubleModule), leadingViewWidth: CoreFoundation.CGFloat = LayoutGrid.halfModule * 14, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ListCellScheme> = AppThemeSchemeProvider<ListCellScheme>()) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI8ListCellV4bodyQrvp", 0) __<L, C, T>
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ListCell where L == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder centerView: @escaping () -> C, @SwiftUI.ViewBuilder trailingView: @escaping () -> T, isHighlighted: SwiftUI.Binding<Swift.Bool?> = .constant(nil), isSelected: SwiftUI.Binding<Swift.Bool?> = .constant(nil), centerLayoutPriority: Swift.Double = 1.0, trailingLayoutPriority: Swift.Double = 0.0, cornerRadius: AdmiralSwiftUI.CornerRadius = .zero)
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ListCell where T == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder leadingView: @escaping () -> L, @SwiftUI.ViewBuilder centerView: @escaping () -> C, isHighlighted: SwiftUI.Binding<Swift.Bool?> = .constant(nil), isSelected: SwiftUI.Binding<Swift.Bool?> = .constant(nil), centerLayoutPriority: Swift.Double = 1.0, trailingLayoutPriority: Swift.Double = 0.0, cornerRadius: AdmiralSwiftUI.CornerRadius = .zero)
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ListCell where L == SwiftUI.EmptyView, T == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder centerView: @escaping () -> C, isHighlighted: SwiftUI.Binding<Swift.Bool?> = .constant(nil), isSelected: SwiftUI.Binding<Swift.Bool?> = .constant(nil), centerLayoutPriority: Swift.Double = 1.0, trailingLayoutPriority: Swift.Double = 0.0, cornerRadius: AdmiralSwiftUI.CornerRadius = .zero)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TitleMoreDetailTextMessageListView : SwiftUI.View, AdmiralSwiftUI.CenterListViewComponent {
  @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($more) @_Concurrency.MainActor(unsafe) public var more: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $more: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($detaile) @_Concurrency.MainActor(unsafe) public var detaile: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $detaile: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($detaileMore) @_Concurrency.MainActor(unsafe) public var detaileMore: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $detaileMore: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($subtitle) @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $subtitle: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($tagText) @_Concurrency.MainActor(unsafe) public var tagText: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $tagText: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($messageText) @_Concurrency.MainActor(unsafe) public var messageText: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $messageText: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($infoImage) @_Concurrency.MainActor(unsafe) public var infoImage: SwiftUI.Image? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $infoImage: SwiftUI.Binding<SwiftUI.Image?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String? = nil, more: Swift.String? = nil, detaile: Swift.String? = nil, detaileMore: Swift.String? = nil, subtitle: Swift.String? = nil, tagText: Swift.String? = nil, messageText: Swift.String? = nil, infoImage: SwiftUI.Image? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TitleMoreDetailTextMessageListViewScheme> = AppThemeSchemeProvider<TitleMoreDetailTextMessageListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI34TitleMoreDetailTextMessageListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct TitleSubTitleSubtitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var subtitleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralSwiftUI.TitleSubtitleListViewParameters<AdmiralTheme.AFont>
  public var subtitleFont: AdmiralSwiftUI.TitleSubtitleListViewParameters<AdmiralTheme.AFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TitleSubtitleListViewParameters<P> {
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct SecurityTextField<T> : AdmiralSwiftUI.TextFieldInput, AdmiralSwiftUI.AccessabilitySupportUIKit, Swift.Identifiable where T : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public let id: Foundation.UUID
  @SwiftUI.Binding @_projectedValueProperty($state) @_Concurrency.MainActor(unsafe) public var state: AdmiralSwiftUI.TextInputState {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($info) @_Concurrency.MainActor(unsafe) public var info: Swift.String {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $info: SwiftUI.Binding<Swift.String> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, isSecure: Swift.Bool = false, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, canPerformActionPaste: Swift.Bool = false, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, isSecure: Swift.Bool = false, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, canPerformActionPaste: Swift.Bool = false, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil, @SwiftUI.ViewBuilder trailingView: @escaping () -> T)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func state(_ state: AdmiralSwiftUI.TextInputState) -> AdmiralSwiftUI.SecurityTextField<T>
  @_Concurrency.MainActor(unsafe) public func accessibility(identifierUIKit: Swift.String) -> AdmiralSwiftUI.SecurityTextField<T>
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI17SecurityTextFieldV4bodyQrvp", 0) __<T>
  public typealias ID = Foundation.UUID
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.SecurityTextField where T == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init<V>(value: SwiftUI.Binding<V?>, accessibilityIdentifier: Swift.String? = nil, formatter: Foundation.Formatter? = nil, isSecure: Swift.Bool = false, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, accessibilityIdentifier: Swift.String? = nil, isSecure: Swift.Bool = false, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, canPerformActionPaste: Swift.Bool = true, placeholder: Swift.String = "", name: Swift.String = "", state: SwiftUI.Binding<AdmiralSwiftUI.TextInputState> = .constant(.normal), info: SwiftUI.Binding<Swift.String> = .constant(""), infoNumberOfLines: Swift.Int? = nil, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTextFieldScheme> = AppThemeSchemeProvider<StandardTextFieldScheme>(), onSubmit: (() -> Swift.Void)? = nil, onCursorPosition: ((Swift.Int, Swift.Int, Swift.String) -> (Swift.Int))? = nil)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct CirclePageControlStyle : SwiftUI.ButtonStyle {
  @SwiftUI.Binding @_projectedValueProperty($step) @_Concurrency.MainActor(unsafe) public var step: Swift.Int {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $step: SwiftUI.Binding<Swift.Int> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var totalPages: Swift.Int
  @_Concurrency.MainActor(unsafe) public let style: AdmiralSwiftUI.CirclePageSliderStyle
  @_Concurrency.MainActor(unsafe) public let action: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(step: SwiftUI.Binding<Swift.Int>, totalPages: Swift.Int, style: AdmiralSwiftUI.CirclePageSliderStyle = .default, action: (() -> Swift.Void)? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CirclePageControlScheme> = AppThemeSchemeProvider<CirclePageControlScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.CirclePageControlStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI22CirclePageControlStyleV8makeBody13configurationQr0bC006ButtonG13ConfigurationV_tF", 0) __
}
@available(iOS 14.0.0, *)
public enum CirclePageSliderStyle : Swift.Int {
  case `default`
  case additional
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
public struct PickerViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var titleColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct OTPTextFieldScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public var errorColor: AdmiralTheme.AColor
  public var disabledColor: AdmiralTheme.AColor
  public var underlineColor: AdmiralTheme.AColor
  public var placeholderColor: AdmiralTheme.AColor
  public var textFieldFont: AdmiralTheme.AFont
  public var placeholderFont: AdmiralTheme.AFont
  public var informerFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct PrimaryLinkControlStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor(unsafe) public let image: SwiftUI.Image?
  @_Concurrency.MainActor(unsafe) public let text: Swift.String?
  @_Concurrency.MainActor(unsafe) public let direction: AdmiralSwiftUI.LinkControlDirection
  @_Concurrency.MainActor(unsafe) public let style: AdmiralSwiftUI.LinkControlStyle
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image? = nil, text: Swift.String? = nil, direction: AdmiralSwiftUI.LinkControlDirection, style: AdmiralSwiftUI.LinkControlStyle, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.PrimaryLinkControlScheme> = AppThemeSchemeProvider<PrimaryLinkControlScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.PrimaryLinkControlStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI23PrimaryLinkControlStyleV8makeBody13configurationQr0bC006ButtonG13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, *)
public enum LinkControlDirection {
  case left
  case right
  public static func == (a: AdmiralSwiftUI.LinkControlDirection, b: AdmiralSwiftUI.LinkControlDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
public enum LinkControlStyle : Swift.Int {
  case medium
  case `default`
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
public struct UploadingImageGridScheme : AdmiralTheme.AppThemeScheme {
  public var errorImageColor: AdmiralTheme.AColor
  public var uploadImageScheme: AdmiralSwiftUI.UploadImageViewScheme
  public init(theme: AdmiralTheme.AppTheme)
}
public enum ChatStatus : Swift.String {
  case loading
  case error
  case sent
  case receive
  case read
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChatDirection : Swift.String {
  case left
  case right
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ChatBubbleView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public let text: Swift.String
  @_Concurrency.MainActor(unsafe) public var direction: AdmiralSwiftUI.ChatDirection
  @_Concurrency.MainActor(unsafe) public var time: Swift.String
  @_Concurrency.MainActor(unsafe) public var status: AdmiralSwiftUI.ChatStatus?
  @_Concurrency.MainActor(unsafe) public var name: Swift.String?
  @_Concurrency.MainActor(unsafe) public var isRoundAllCorners: Swift.Bool
  @_Concurrency.MainActor(unsafe) public let maxWidth: CoreFoundation.CGFloat?
  @_Concurrency.MainActor(unsafe) public init(text: Swift.String, direction: AdmiralSwiftUI.ChatDirection, time: Swift.String, status: AdmiralSwiftUI.ChatStatus? = nil, name: Swift.String? = nil, isRoundAllCorners: Swift.Bool = false, maxWidth: CoreFoundation.CGFloat? = nil, errorAction: @escaping () -> () = {}, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ChatBubbleViewScheme> = AppThemeSchemeProvider<ChatBubbleViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI14ChatBubbleViewV4bodyQrvp", 0) __
}
public struct AlertViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleFont: AdmiralSwiftUI.DefaultAlertViewCustomSchemeParameters<AdmiralTheme.AFont, AdmiralSwiftUI.AlertTitleFontStyle>
  public var messageFont: AdmiralSwiftUI.DefaultAlertViewCustomSchemeParameters<AdmiralTheme.AFont, AdmiralSwiftUI.AlertMessageFontStyle>
  public var titleColor: AdmiralSwiftUI.DefaultAlertViewCustomSchemeParameters<AdmiralTheme.AColor, AdmiralSwiftUI.AlertColorStyle>
  public var messageColor: AdmiralSwiftUI.DefaultAlertViewCustomSchemeParameters<AdmiralTheme.AColor, AdmiralSwiftUI.AlertColorStyle>
  public var backgroundColor: AdmiralTheme.AColor
  public var buttonScheme: AdmiralSwiftUI.PrimaryButtonScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct DefaultAlertViewCustomSchemeParameters<P, S> where S : Swift.Hashable, S : Swift.RawRepresentable, S.RawValue == Swift.Int {
}
@available(iOS 14.0, *)
public struct CardListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct StandartTabItem {
  public let text: Swift.String
  public let accessibilityId: Swift.String
  public init(text: Swift.String, accessibilityId: Swift.String = "")
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct StandardTab : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(items: [AdmiralSwiftUI.StandartTabItem], selection: SwiftUI.Binding<Swift.Int>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTabScheme> = AppThemeSchemeProvider<StandardTabScheme>())
  @_Concurrency.MainActor(unsafe) public init(items: [Swift.String], selection: SwiftUI.Binding<Swift.Int>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.StandardTabScheme> = AppThemeSchemeProvider<StandardTabScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI11StandardTabV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct ActionItemBarAction : Swift.Identifiable, Swift.Hashable {
  public let id: Foundation.UUID
  public let image: SwiftUI.Image
  public var imageStyle: AdmiralSwiftUI.ActionBarItemImageStyle?
  public var imageTintColor: SwiftUI.Color?
  public var backgroundColor: SwiftUI.Color?
  public let style: AdmiralSwiftUI.ActionBarItemStyle
  public var text: Swift.String?
  public let handler: () -> Swift.Void
  public var accesibilityId: Swift.String
  public init(image: SwiftUI.Image, imageStyle: AdmiralSwiftUI.ActionBarItemImageStyle, style: AdmiralSwiftUI.ActionBarItemStyle = .default, text: Swift.String? = nil, handler: @escaping () -> Swift.Void, accesibilityId: Swift.String = "")
  public init(image: SwiftUI.Image, imageTintColor: SwiftUI.Color, backgroundColor: SwiftUI.Color, style: AdmiralSwiftUI.ActionBarItemStyle = .default, text: Swift.String? = nil, handler: @escaping () -> Swift.Void, accesibilityId: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AdmiralSwiftUI.ActionItemBarAction, rhs: AdmiralSwiftUI.ActionItemBarAction) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
public struct IconTabModel {
  public let image: SwiftUI.Image
  public let text: Swift.String
  public let accessibilityId: Swift.String
  public init(image: SwiftUI.Image, text: Swift.String, accessibilityId: Swift.String = "")
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct IconTab : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(models: [AdmiralSwiftUI.IconTabModel], selection: SwiftUI.Binding<Swift.Int>, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.IconTabScheme> = AppThemeSchemeProvider<IconTabScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI7IconTabV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct UploadingImageGrid : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var tappedModel: ((AdmiralSwiftUI.UploadImageModel) -> ())?
  @_Concurrency.MainActor(unsafe) public init(models: [AdmiralSwiftUI.UploadImageModel], direction: AdmiralSwiftUI.ChatDirection, tappedModel: ((_ model: AdmiralSwiftUI.UploadImageModel) -> Swift.Void)? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.UploadingImageGridScheme> = AppThemeSchemeProvider<UploadingImageGridScheme>(), errorAction: @escaping () -> () = {})
  @_Concurrency.MainActor(unsafe) public init(model: AdmiralSwiftUI.UploadImageModel, direction: AdmiralSwiftUI.ChatDirection, tappedModel: ((_ model: AdmiralSwiftUI.UploadImageModel) -> Swift.Void)? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.UploadingImageGridScheme> = AppThemeSchemeProvider<UploadingImageGridScheme>(), errorAction: @escaping () -> () = {})
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI18UploadingImageGridV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct FeedbackInputControl : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(cursorPosition: SwiftUI.Binding<Swift.Int>, itemsCount: Swift.Int = 5, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.FeedbackInputControlScheme> = AppThemeSchemeProvider<FeedbackInputControlScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI20FeedbackInputControlV4bodyQrvp", 0) __
}
public struct CurrencyViewScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var imageTintColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct CountdownView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(countTo: Swift.Int, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CoundDownViewScheme> = AppThemeSchemeProvider<CoundDownViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI13CountdownViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct PlatformButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor(unsafe) public init(schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.PlatformButtonScheme> = AppThemeSchemeProvider<PlatformButtonScheme>(), accessibilityIdentifier: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.PlatformButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI19PlatformButtonStyleV8makeBody13configurationQr0bC00eF13ConfigurationV_tF", 0) __
}
@available(iOS 14.0, *)
public struct TitleWithImageListViewScheme : AdmiralTheme.AppThemeScheme {
  public var viewBackgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public var titleFont: AdmiralSwiftUI.TitleWithImageListViewParameters<AdmiralTheme.AFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct TitleWithImageListViewParameters<P> {
}
public struct BadgeViewScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var borderColor: AdmiralTheme.AColor
  public var textColor: AdmiralSwiftUI.BadgeParameters<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralSwiftUI.BadgeParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct BadgeParameters<P> {
}
@available(iOS 14.0.0, *)
public struct RadioButtonListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var radioButtonScheme: AdmiralSwiftUI.CheckControlScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum TitleSubtitleListViewStyle : Swift.String {
  case title
  case body
  case headline
  case headlineSecondary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TitleSubtitleListView : SwiftUI.View, AdmiralSwiftUI.CenterListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($title) @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $title: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($subtitle) @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $subtitle: SwiftUI.Binding<Swift.String?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, subtitle: Swift.String?, lineLimit: Swift.Int? = nil, titleSubtitleListViewStyle: AdmiralSwiftUI.TitleSubtitleListViewStyle? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TitleSubTitleSubtitleListViewScheme> = AppThemeSchemeProvider<TitleSubTitleSubtitleListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI21TitleSubtitleListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public enum ParagraphLeadingImageType {
  case point
  case check
  case custom(SwiftUI.Image)
  public var image: SwiftUI.Image {
    get
  }
}
@available(iOS 14.0, *)
public struct ChatBubbleStatusViewScheme : AdmiralTheme.AppThemeScheme {
  public var textFont: AdmiralTheme.AFont
  public var textColor: AdmiralSwiftUI.ChatBubbleStatusViewParameters<AdmiralTheme.AColor>
  public var imageColor: AdmiralSwiftUI.ChatBubbleStatusViewParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ChatBubbleStatusViewParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, status: AdmiralSwiftUI.ChatStatus, direction: AdmiralSwiftUI.ChatDirection, style: AdmiralSwiftUI.ChatBubbleStatusStyle)
  public func parameter(for status: AdmiralSwiftUI.ChatStatus, direction: AdmiralSwiftUI.ChatDirection, style: AdmiralSwiftUI.ChatBubbleStatusStyle) -> P?
}
@available(iOS 14.0.0, *)
public struct ListCellScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ButtonWithArrowListView : SwiftUI.View, AdmiralSwiftUI.CenterListViewComponent, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(text: Swift.String, image: SwiftUI.Image = Image(uiImage: Asset.System.Outline.chevronDownOutline.image), accesibilityId: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ButtonWithArrowListViewScheme> = AppThemeSchemeProvider<ButtonWithArrowListViewScheme>(), action: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI23ButtonWithArrowListViewV4bodyQrvp", 0) __
}
public struct UnderlineTabItem {
  public let title: Swift.String
  public var badgeStyle: AdmiralSwiftUI.BadgeStyle?
  public let accessibilityId: Swift.String
  public init(title: Swift.String, badgeStyle: AdmiralSwiftUI.BadgeStyle?, accessibilityId: Swift.String = "")
}
public enum TextOperationViewStyle : Swift.Int {
  case success
  case error
  case `default`
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct TextOperationView : SwiftUI.View {
  @SwiftUI.State @_projectedValueProperty($style) @_Concurrency.MainActor(unsafe) public var style: AdmiralSwiftUI.TextOperationViewStyle {
    get
    @available(iOS 14.0.0, *)
    nonmutating set
    @available(iOS 14.0.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $style: SwiftUI.Binding<AdmiralSwiftUI.TextOperationViewStyle> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var chatStatus: AdmiralSwiftUI.ChatStatus?
  @_Concurrency.MainActor(unsafe) public var direction: AdmiralSwiftUI.ChatDirection
  @_Concurrency.MainActor(unsafe) public var time: Swift.String
  @_Concurrency.MainActor(unsafe) public var title: Swift.String
  @_Concurrency.MainActor(unsafe) public var description: Swift.String
  @_Concurrency.MainActor(unsafe) public var errorAction: () -> ()
  @_Concurrency.MainActor(unsafe) public init(style: AdmiralSwiftUI.TextOperationViewStyle, chatStatus: AdmiralSwiftUI.ChatStatus?, direction: AdmiralSwiftUI.ChatDirection = .left, time: Swift.String, title: Swift.String, description: Swift.String, errorAction: @escaping () -> () = {}, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TextOperationViewScheme> = AppThemeSchemeProvider<TextOperationViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI17TextOperationViewV4bodyQrvp", 0) __
}
public struct OutlineSliderTabItem {
  public let title: Swift.String
  public let badgeStyle: AdmiralSwiftUI.BadgeStyle?
  public let accessibilityId: Swift.String
  public init(title: Swift.String, badgeStyle: AdmiralSwiftUI.BadgeStyle?, accessibilityId: Swift.String = "")
}
@available(iOS 14.0, *)
public struct UploadImageViewScheme : AdmiralTheme.AppThemeScheme {
  public var textColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var progressColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct CheckBoxListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.Binding @_projectedValueProperty($isControlSelected) @_Concurrency.MainActor(unsafe) public var isControlSelected: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isControlSelected: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(isControlSelected: SwiftUI.Binding<Swift.Bool>, checkBoxValueFormatString: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CheckBoxListViewScheme> = AppThemeSchemeProvider<CheckBoxListViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI16CheckBoxListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct SubtitleImageArrowListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageViewAlpha: AdmiralSwiftUI.ControlParameter<Swift.Double>
  public var subtitleLabelTextColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var arrowTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var subtitleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct PinCodeKeyboardScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralTheme.AColor
  public var pinCodeTextViewScheme: AdmiralSwiftUI.PinCodeTextViewScheme
  public var pinCodeNumberViewScheme: AdmiralSwiftUI.PinCodeNumberViewScheme
  public init(theme: AdmiralTheme.AppTheme)
}
@available(iOS 14.0.0, *)
public struct LinkViewScheme : AdmiralTheme.AppThemeScheme {
  public var listCellScheme: AdmiralSwiftUI.ListCellScheme
  public var contentListViewScheme: AdmiralSwiftUI.ButtonListViewScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct InformerSegmentedItem {
  public let accessibilityId: Swift.String
  public init(title: Swift.String, subtitle: Swift.String, accessibilityId: Swift.String = "")
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct InformerTab : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(items: [AdmiralSwiftUI.InformerSegmentedItem], customView: SwiftUI.AnyView = AnyView(EmptyView()), selection: SwiftUI.Binding<Swift.Int> = .constant(0), offsetSegment: SwiftUI.Binding<CoreFoundation.CGFloat> = .constant(0.0), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.InformerTabScheme> = AppThemeSchemeProvider<InformerTabScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI11InformerTabV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct CalendarWeek : Swift.Hashable, Swift.Identifiable {
  public let id: Foundation.UUID
  public var days: [AdmiralSwiftUI.CalendarDay]
  public init(days: [AdmiralSwiftUI.CalendarDay])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdmiralSwiftUI.CalendarWeek, b: AdmiralSwiftUI.CalendarWeek) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public enum InputNumberStyle : Swift.Int {
  case `default`
  case input
  case secondary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
public struct TextInputDecorationBox<T> : SwiftUI.View where T : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI22TextInputDecorationBoxV4bodyQrvp", 0) __<T>
}
@available(iOS 14.0, *)
final public class InformerTabScheme : AdmiralTheme.AppThemeScheme {
  final public var backgroundColor: AdmiralTheme.AColor
  final public var thumbColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var borderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var titleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var titleFont: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AFont>
  final public var subtitleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  final public var subtitleFont: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
  @objc deinit
}
@available(iOS 14.0.0, *)
public struct SeveralPinButtonScheme : AdmiralTheme.AppThemeScheme {
  public var borderColor: AdmiralTheme.AColor
  public var backgroundColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public let shadowColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct SubtitleTitleListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var subtitleColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var titleFont: AdmiralSwiftUI.TitleSubtitleListViewParameters<AdmiralTheme.AFont>
  public var subtitleFont: AdmiralSwiftUI.TitleSubtitleListViewParameters<AdmiralTheme.AFont>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct PinCodeKeyboard : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(leftButtonTitle: Swift.String = "", rightButtonImage: SwiftUI.Image = AssetSymbol.Security.Outline.faceID.image, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.PinCodeKeyboardScheme> = AppThemeSchemeProvider<PinCodeKeyboardScheme>(), didTapNumber: @escaping (Swift.Int) -> (), didTapLeftButton: @escaping () -> (), didTapRightButton: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI15PinCodeKeyboardV4bodyQrvp", 0) __
}
public enum CalendarCellState : Swift.UInt {
  case normal
  case tailSelected
  case selected
  case currentDate
  case inactive
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@available(iOS 14.0.0, *)
public struct MonthYearButtonScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var textColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct ButtonListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var buttonScheme: AdmiralSwiftUI.GhostButtonScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct ArrowListViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var imageTintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct SearchBar : SwiftUI.View, AdmiralSwiftUI.AccessabilitySupportUIKit {
  @SwiftUI.Binding @_projectedValueProperty($content) @_Concurrency.MainActor(unsafe) public var content: Swift.String? {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $content: SwiftUI.Binding<Swift.String?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(_ content: SwiftUI.Binding<Swift.String?>, contentType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .search, autocapitalizationType: UIKit.UITextAutocapitalizationType = .none, autocorrectionType: UIKit.UITextAutocorrectionType = .no, isResponder: SwiftUI.Binding<Swift.Bool>? = nil, placeholder: Swift.String = "", searchImage: SwiftUI.Image? = AssetSymbol.System.Outline.search.image, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.SearchBarColorScheme> = AppThemeSchemeProvider<SearchBarColorScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func accessibility(identifierUIKit: Swift.String) -> AdmiralSwiftUI.SearchBar
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI9SearchBarV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.SearchBar {
  @_Concurrency.MainActor(unsafe) public func contentType(_ contentType: UIKit.UIKeyboardType) -> AdmiralSwiftUI.SearchBar
  @_Concurrency.MainActor(unsafe) public func isResponder(_ isResponder: SwiftUI.Binding<Swift.Bool>?) -> AdmiralSwiftUI.SearchBar
}
@available(iOS 14.0, *)
public enum DropDownHeaderType {
  case up
  case down
  case custom(SwiftUI.Image)
  public var image: SwiftUI.Image {
    get
  }
}
public enum InformerStyleSwiftUI : Swift.Int {
  case `default`
  case success
  case attention
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct BigInformer : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String? = nil, subtitle: Swift.String? = nil, link: Swift.String? = nil, informerStyle: AdmiralSwiftUI.InformerStyleSwiftUI = .default, linkAccessibilityID: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.BigInformerScheme> = AppThemeSchemeProvider<BigInformerScheme>(), onDetail: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI11BigInformerV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct SliderScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var thumbColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var thumbBorderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum ToastViewType : Swift.String {
  case `default`
  case success
  case additional
  case attention
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ToastImageType : Swift.String {
  case success
  case info
  case attention
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ToastView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init<T>(title: Swift.String, linkText: Swift.String? = nil, linkAction: (() -> ())? = nil, image: SwiftUI.Image? = nil, imageType: AdmiralSwiftUI.ToastImageType? = nil, imageColorType: AdmiralSwiftUI.ToastImageType? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ToastViewScheme> = AppThemeSchemeProvider<ToastViewScheme>(), closeAction: (() -> ())? = nil, imageAction: (() -> ())? = nil, @SwiftUI.ViewBuilder closeView: @escaping () -> (T?) = { return nil }, type: AdmiralSwiftUI.ToastViewType = .default, accessibilityIdentifier: Swift.String? = nil) where T : SwiftUI.View
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, linkText: Swift.String? = nil, linkAction: (() -> ())? = nil, image: SwiftUI.Image? = nil, imageType: AdmiralSwiftUI.ToastImageType? = nil, imageColorType: AdmiralSwiftUI.ToastImageType? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ToastViewScheme> = AppThemeSchemeProvider<ToastViewScheme>(), closeAction: (() -> ())? = nil, imageAction: (() -> ())? = nil, type: AdmiralSwiftUI.ToastViewType = .default, accessibilityIdentifier: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public init<T>(title: Swift.String, linkText: Swift.String? = nil, linkAction: (() -> ())? = nil, timerDuration: Swift.Int?, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ToastViewScheme> = AppThemeSchemeProvider<ToastViewScheme>(), closeAction: (() -> ())? = nil, @SwiftUI.ViewBuilder closeView: @escaping () -> (T?) = { return nil }, type: AdmiralSwiftUI.ToastViewType = .default, accessibilityIdentifier: Swift.String? = nil) where T : SwiftUI.View
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI9ToastViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public struct TextOperationViewScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.TextOperationViewSchemeParameters<AdmiralTheme.AColor>
  public var errorImageColor: AdmiralTheme.AColor
  public var titleColor: AdmiralSwiftUI.TextOperationViewSchemeParameters<AdmiralTheme.AColor>
  public var desciptionColor: AdmiralTheme.AColor
  public var timeColor: AdmiralTheme.AColor
  public var titleFont: AdmiralTheme.AFont
  public var desciptionFont: AdmiralTheme.AFont
  public var timeFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct TextOperationViewSchemeParameters<P> {
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct CalendarDaysView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(date: Foundation.Date, isMutlipleSelectionAllowed: Swift.Bool, startDate: SwiftUI.Binding<Foundation.Date?>, endDate: SwiftUI.Binding<Foundation.Date?>, notActiveAfterDate: Foundation.Date?, pointDates: [Foundation.Date], schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.CalendarViewCellColorScheme> = AppThemeSchemeProvider<CalendarViewCellColorScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI16CalendarDaysViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public struct CalendarHorizontalHeaderViewScheme : AdmiralTheme.AppThemeScheme {
  public var buttonColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralTheme.AColor
  public var monthYearButtonScheme: AdmiralSwiftUI.MonthYearButtonScheme
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public enum AlertViewImageType {
  case illustration
  case icon
  public static func == (a: AdmiralSwiftUI.AlertViewImageType, b: AdmiralSwiftUI.AlertViewImageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AlertTitleFontStyle : Swift.Int {
  case title1
  case title2
  case subtitle1
  case subtitle2
  case headLine
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AlertMessageFontStyle : Swift.Int {
  case body1
  case body2
  case subhead4
  case subhead3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AlertColorStyle : Swift.Int {
  case additional
  case mask
  case primary
  case secondary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct AlertView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(image: SwiftUI.Image?, title: Swift.String?, message: Swift.String?, isLoading: SwiftUI.Binding<Swift.Bool> = .constant(false), imageType: AdmiralSwiftUI.AlertViewImageType = .illustration, titleTextLabelColor: AdmiralSwiftUI.AlertColorStyle = .primary, messageTextLabelColor: AdmiralSwiftUI.AlertColorStyle = .additional, messageLabelFontStyle: AdmiralSwiftUI.AlertMessageFontStyle = .subhead3, titleLabelFontStyle: AdmiralSwiftUI.AlertTitleFontStyle = .title1, buttonTitle: Swift.String? = nil, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.AlertViewScheme> = AppThemeSchemeProvider<AlertViewScheme>(), buttonAction: (() -> ())? = nil, additionalButtonTitle: Swift.String? = nil, additionalButtonAction: (() -> ())? = nil, accessibilityId: Swift.String = "")
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI9AlertViewV4bodyQrvp", 0) __
}
@available(iOS 14.0, *)
public protocol AccessabilitySupportUIKit : SwiftUI.View {
  func accessibility(identifierUIKit: Swift.String) -> Self
}
@available(iOS 14.0, *)
public enum MapButtonType {
  case plus
  case minus
  case location
  case custom(image: SwiftUI.Image)
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct MapButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor(unsafe) public let image: SwiftUI.Image
  @_Concurrency.MainActor(unsafe) public init(type: AdmiralSwiftUI.MapButtonType, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.MapButtonScheme> = AppThemeSchemeProvider<MapButtonScheme>())
  @_Concurrency.MainActor(unsafe) public func makeBody(configuration: AdmiralSwiftUI.MapButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI14MapButtonStyleV8makeBody13configurationQr0bC00eF13ConfigurationV_tF", 0) __
}
public enum ActionBarItemStyle : Swift.Equatable {
  case `default`
  case secondary
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdmiralSwiftUI.ActionBarItemStyle, b: AdmiralSwiftUI.ActionBarItemStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
@_Concurrency.MainActor(unsafe) public struct LinerPageControll : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(currentPage: SwiftUI.Binding<Swift.Int> = .constant(0), numberOfPages: Swift.Int = 6, displayedItems: Swift.Int = 5, schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.PageControlViewScheme> = AppThemeSchemeProvider<PageControlViewScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI17LinerPageControllV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
public enum UploadImageViewCornerStyle : Swift.Equatable {
  case leftSide
  case rightSide
  case bottom
  case top
  case allSides
  case bottomLeft
  case bottomRight
  case topRight
  case topLeft
  case none
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdmiralSwiftUI.UploadImageViewCornerStyle, b: AdmiralSwiftUI.UploadImageViewCornerStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
public struct UploadImageModel : Swift.Identifiable {
  public var id: Swift.String
  public var isLoading: Swift.Bool
  public let time: Swift.String
  public let backgroundImage: SwiftUI.Image?
  public var uploadStatus: AdmiralSwiftUI.ChatStatus
  public var closeAction: () -> ()
  public init(isLoading: Swift.Bool = false, time: Swift.String, backgroundImage: SwiftUI.Image?, uploadStatus: AdmiralSwiftUI.ChatStatus, closeAction: @escaping () -> () = {})
  public typealias ID = Swift.String
}
@available(iOS 14.0.0, *)
public struct CalendarDay : Swift.Hashable, Swift.Identifiable {
  public let id: Foundation.UUID
  public var date: Foundation.Date
  public var number: Swift.String
  public var isSelected: Swift.Bool
  public var isCurrentDay: Swift.Bool
  public var isDisplayedInMonth: Swift.Bool
  public init(date: Foundation.Date, number: Swift.String, isSelected: Swift.Bool, isCurrentDay: Swift.Bool, isDisplayedInMonth: Swift.Bool)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdmiralSwiftUI.CalendarDay, b: AdmiralSwiftUI.CalendarDay) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0.0, *)
public struct ToastViewScheme : AdmiralTheme.AppThemeScheme {
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ToastViewParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, isEnabled: Swift.Bool, type: AdmiralSwiftUI.ToastViewType)
  public func parameter(isEnabled: Swift.Bool, type: AdmiralSwiftUI.ToastViewType) -> P?
}
public struct ToastImageParameters<P> {
  public var parameters: [Swift.String : P?]
  public mutating func set(parameter: P?, isEnabled: Swift.Bool, type: AdmiralSwiftUI.ToastImageType)
  public func parameter(isEnabled: Swift.Bool, type: AdmiralSwiftUI.ToastImageType) -> P?
}
@available(iOS 14.0, *)
public struct UploadDocumentViewScheme : AdmiralTheme.AppThemeScheme {
  public var sizeTextFont: AdmiralTheme.AFont
  public var timeTextFont: AdmiralTheme.AFont
  public var messageTextFont: AdmiralTheme.AFont
  public var messageTextColor: AdmiralTheme.AColor
  public var textFont: AdmiralTheme.AFont
  public var backgroundColor: AdmiralSwiftUI.UploadDocumentParameters<AdmiralTheme.AColor>
  public var nameTextColor: AdmiralSwiftUI.UploadDocumentParameters<AdmiralTheme.AColor>
  public var timeTextColor: AdmiralSwiftUI.UploadDocumentParameters<AdmiralTheme.AColor>
  public var iconColor: AdmiralSwiftUI.UploadDocumentParameters<AdmiralTheme.AColor>
  public var sizeColor: AdmiralSwiftUI.UploadDocumentParameters<AdmiralTheme.AColor>
  public var circleColor: AdmiralSwiftUI.UploadDocumentParameters<AdmiralTheme.AColor>
  public var chevronColor: AdmiralSwiftUI.UploadDocumentParameters<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct UploadDocumentParameters<P> {
}
@available(iOS 14.0.0, *)
public struct CustomSwitchScheme : AdmiralTheme.AppThemeScheme {
  public var font: AdmiralTheme.AFont
  public var tintColor: AdmiralTheme.AColor
  public var textColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public struct ErrorViewScheme : AdmiralTheme.AppThemeScheme {
  public var titleColor: AdmiralTheme.AColor
  public var titleFont: AdmiralTheme.AFont
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0.0, *)
public struct MapButtonScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public let imageTintColor: AdmiralTheme.AColor
  public let shadowColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
public struct DoubleSliderScheme : AdmiralTheme.AppThemeScheme {
  public var tintColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var thumbColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var thumbBorderColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public var backgroundColor: AdmiralSwiftUI.ControlParameter<AdmiralTheme.AColor>
  public init(theme: AdmiralTheme.AppTheme = .default)
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct TwoTitleGhostButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(leftText: Swift.String, rightText: Swift.String, leftAction: @escaping () -> (), rightAction: @escaping () -> (), schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.TwoTitleGhostButtonScheme> = AppThemeSchemeProvider<TwoTitleGhostButtonScheme>())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI19TwoTitleGhostButtonV4bodyQrvp", 0) __
}
public struct CalendarViewCellColorScheme : AdmiralTheme.AppThemeScheme {
  public var backgroundColors: AdmiralSwiftUI.CalendarParameters<AdmiralTheme.AColor>
  public var textColors: AdmiralSwiftUI.CalendarParameters<AdmiralTheme.AColor>
  public var selectedBackgroundColors: AdmiralSwiftUI.CalendarParameters<AdmiralTheme.AColor>
  public var borderColors: AdmiralSwiftUI.CalendarParameters<AdmiralTheme.AColor>
  public var titleLabelFont: AdmiralTheme.AFont
  public var dayPointColor: AdmiralTheme.AColor
  public init(theme: AdmiralTheme.AppTheme = .default)
}
public typealias CalendarParameters<T> = AdmiralCore.ParameterBox<AdmiralSwiftUI.CalendarCellState, T>
extension AdmiralSwiftUI.CalendarCellState : AdmiralCore.DefaultRepresentable {
  public static var defaultValue: AdmiralSwiftUI.CalendarCellState {
    get
  }
}
@available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public struct ButtonListView : SwiftUI.View, AdmiralSwiftUI.TralingListViewComponent {
  @SwiftUI.State @_projectedValueProperty($isHighlighted) @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlighted: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.State @_projectedValueProperty($isHighlightedEnabled) @_Concurrency.MainActor(unsafe) public var isHighlightedEnabled: Swift.Bool {
    get
    @available(iOS 14.0, *)
    nonmutating set
    @available(iOS 14.0, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor(unsafe) public var $isHighlightedEnabled: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(text: Swift.String, accesibilityId: Swift.String = "", schemeProvider: AdmiralTheme.SchemeProvider<AdmiralSwiftUI.ButtonListViewScheme> = AppThemeSchemeProvider<ButtonListViewScheme>(), action: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AdmiralSwiftUI14ButtonListViewV4bodyQrvp", 0) __
}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.InputNumberButtonStyle.InputNumberButtonType : Swift.Equatable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.InputNumberButtonStyle.InputNumberButtonType : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.CodeInputControl.Status : Swift.Equatable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.CodeInputControl.Status : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.CodeInputControl.Status : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.HeaderStyle : Swift.Equatable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.HeaderStyle : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.HeaderStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.CheckControlState : Swift.Equatable {}
extension AdmiralSwiftUI.CheckControlState : Swift.Hashable {}
extension AdmiralSwiftUI.CheckControlState : Swift.RawRepresentable {}
extension AdmiralSwiftUI.ChatBubbleStatusStyle : Swift.Equatable {}
extension AdmiralSwiftUI.ChatBubbleStatusStyle : Swift.Hashable {}
extension AdmiralSwiftUI.ChatBubbleStatusStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.TextInputState : Swift.Equatable {}
extension AdmiralSwiftUI.TextInputState : Swift.Hashable {}
extension AdmiralSwiftUI.TextInputState : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ParagraphStyle : Swift.Equatable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ParagraphStyle : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ParagraphStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.TitleWithImageListStyle : Swift.Equatable {}
extension AdmiralSwiftUI.TitleWithImageListStyle : Swift.Hashable {}
extension AdmiralSwiftUI.TitleWithImageListStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.CalendarViewType : Swift.Equatable {}
extension AdmiralSwiftUI.CalendarViewType : Swift.Hashable {}
extension AdmiralSwiftUI.ActionBarViewStyle : Swift.Equatable {}
extension AdmiralSwiftUI.ActionBarViewStyle : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ActivityIndicator.Style : Swift.Equatable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ActivityIndicator.Style : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ActivityIndicator.Size : Swift.Equatable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ActivityIndicator.Size : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.ActivityIndicator.Size : Swift.RawRepresentable {}
extension AdmiralSwiftUI.TitleListViewStyle : Swift.Equatable {}
extension AdmiralSwiftUI.TitleListViewStyle : Swift.Hashable {}
extension AdmiralSwiftUI.TitleListViewStyle : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.TextBlockStyle : Swift.Equatable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.TextBlockStyle : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.TextBlockStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.IconListViewStyle : Swift.Equatable {}
extension AdmiralSwiftUI.IconListViewStyle : Swift.Hashable {}
extension AdmiralSwiftUI.IconListViewStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.TagStyle : Swift.Equatable {}
extension AdmiralSwiftUI.TagStyle : Swift.Hashable {}
extension AdmiralSwiftUI.TagStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.CurrencyCellType : Swift.Equatable {}
extension AdmiralSwiftUI.CurrencyCellType : Swift.Hashable {}
extension AdmiralSwiftUI.ImageListViewStyle : Swift.Equatable {}
extension AdmiralSwiftUI.ImageListViewStyle : Swift.Hashable {}
extension AdmiralSwiftUI.ImageListViewStyle : Swift.RawRepresentable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.ProgressViewStyle : Swift.Equatable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.ProgressViewStyle : Swift.Hashable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.ProgressViewStyle : Swift.RawRepresentable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.ProgressViewSize : Swift.Equatable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.ProgressViewSize : Swift.Hashable {}
extension AdmiralSwiftUI.BadgeStyle : Swift.Equatable {}
extension AdmiralSwiftUI.BadgeStyle : Swift.Hashable {}
extension AdmiralSwiftUI.BadgeStyle : Swift.RawRepresentable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.UploadDocumentState : Swift.Equatable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.UploadDocumentState : Swift.Hashable {}
extension AdmiralSwiftUI.SmallInformerArrowDirection : Swift.Equatable {}
extension AdmiralSwiftUI.SmallInformerArrowDirection : Swift.Hashable {}
extension AdmiralSwiftUI.ControlState : Swift.Equatable {}
extension AdmiralSwiftUI.ControlState : Swift.Hashable {}
extension AdmiralSwiftUI.ControlState : Swift.RawRepresentable {}
extension AdmiralSwiftUI.ButtonSizeType : Swift.Equatable {}
extension AdmiralSwiftUI.ButtonSizeType : Swift.Hashable {}
extension AdmiralSwiftUI.ButtonSizeType : Swift.RawRepresentable {}
extension AdmiralSwiftUI.ToolBarType : Swift.Equatable {}
extension AdmiralSwiftUI.ToolBarType : Swift.Hashable {}
extension AdmiralSwiftUI.ToastNotificationsDirection : Swift.Equatable {}
extension AdmiralSwiftUI.ToastNotificationsDirection : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.SeparatorStyle : Swift.Equatable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.SeparatorStyle : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.SeparatorStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.ToolbarItemType : Swift.Equatable {}
extension AdmiralSwiftUI.ToolbarItemType : Swift.Hashable {}
extension AdmiralSwiftUI.ToolbarItemType : Swift.RawRepresentable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.ActionBarItemImageStyle : Swift.Equatable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.ActionBarItemImageStyle : Swift.Hashable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.ActionBarItemImageStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.CornerRadius : Swift.Equatable {}
extension AdmiralSwiftUI.CornerRadius : Swift.Hashable {}
extension AdmiralSwiftUI.CornerRadius : Swift.RawRepresentable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.CirclePageSliderStyle : Swift.Equatable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.CirclePageSliderStyle : Swift.Hashable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.CirclePageSliderStyle : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.LinkControlDirection : Swift.Equatable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.LinkControlDirection : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.LinkControlStyle : Swift.Equatable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.LinkControlStyle : Swift.Hashable {}
@available(iOS 14.0, *)
extension AdmiralSwiftUI.LinkControlStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.ChatStatus : Swift.Equatable {}
extension AdmiralSwiftUI.ChatStatus : Swift.Hashable {}
extension AdmiralSwiftUI.ChatStatus : Swift.RawRepresentable {}
extension AdmiralSwiftUI.ChatDirection : Swift.Equatable {}
extension AdmiralSwiftUI.ChatDirection : Swift.Hashable {}
extension AdmiralSwiftUI.ChatDirection : Swift.RawRepresentable {}
extension AdmiralSwiftUI.TitleSubtitleListViewStyle : Swift.Equatable {}
extension AdmiralSwiftUI.TitleSubtitleListViewStyle : Swift.Hashable {}
extension AdmiralSwiftUI.TitleSubtitleListViewStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.TextOperationViewStyle : Swift.Equatable {}
extension AdmiralSwiftUI.TextOperationViewStyle : Swift.Hashable {}
extension AdmiralSwiftUI.TextOperationViewStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.InputNumberStyle : Swift.Equatable {}
extension AdmiralSwiftUI.InputNumberStyle : Swift.Hashable {}
extension AdmiralSwiftUI.InputNumberStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.CalendarCellState : Swift.Equatable {}
extension AdmiralSwiftUI.CalendarCellState : Swift.Hashable {}
extension AdmiralSwiftUI.CalendarCellState : Swift.RawRepresentable {}
extension AdmiralSwiftUI.InformerStyleSwiftUI : Swift.Equatable {}
extension AdmiralSwiftUI.InformerStyleSwiftUI : Swift.Hashable {}
extension AdmiralSwiftUI.InformerStyleSwiftUI : Swift.RawRepresentable {}
extension AdmiralSwiftUI.ToastViewType : Swift.Equatable {}
extension AdmiralSwiftUI.ToastViewType : Swift.Hashable {}
extension AdmiralSwiftUI.ToastViewType : Swift.RawRepresentable {}
extension AdmiralSwiftUI.ToastImageType : Swift.Equatable {}
extension AdmiralSwiftUI.ToastImageType : Swift.Hashable {}
extension AdmiralSwiftUI.ToastImageType : Swift.RawRepresentable {}
extension AdmiralSwiftUI.AlertViewImageType : Swift.Equatable {}
extension AdmiralSwiftUI.AlertViewImageType : Swift.Hashable {}
extension AdmiralSwiftUI.AlertTitleFontStyle : Swift.Equatable {}
extension AdmiralSwiftUI.AlertTitleFontStyle : Swift.Hashable {}
extension AdmiralSwiftUI.AlertTitleFontStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.AlertMessageFontStyle : Swift.Equatable {}
extension AdmiralSwiftUI.AlertMessageFontStyle : Swift.Hashable {}
extension AdmiralSwiftUI.AlertMessageFontStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.AlertColorStyle : Swift.Equatable {}
extension AdmiralSwiftUI.AlertColorStyle : Swift.Hashable {}
extension AdmiralSwiftUI.AlertColorStyle : Swift.RawRepresentable {}
extension AdmiralSwiftUI.ActionBarItemStyle : Swift.Hashable {}
@available(iOS 14.0.0, *)
extension AdmiralSwiftUI.UploadImageViewCornerStyle : Swift.Hashable {}
