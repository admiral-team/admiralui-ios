//
//  FontPalette.swift
//  AdmiralUI
//
//  Generated by Fastlane Figma Plugin.
//

import UIKit
import SwiftUI

// swiftlint:disable all

// MARK: - FontPalette

public class FontPalette: Codable {
    {% for style_name in common_style_names %}
    public var {{ style_name | default_format }}: AFont{% endfor %}

    public init({% for style_name in common_style_names %} 
        {{ style_name | default_format }}: AFont{% if forloop.last == false %},{% endif %}{% endfor %}
    ) { {% for style_name in common_style_names %} 
        self.{{ style_name | default_format }} = {{ style_name | default_format }}{% endfor %}
    }

}

// MARK: - All Fonts

extension FontPalette {

    public var all: [AFont] {
        return [
            {% for style_name in common_style_names %}{{ style_name | default_format }}{% if forloop.last == false %},
            {% endif %}{% endfor %}
        ]
    }

}

{% for group in groups %} 
// MARK: - {{ group.name | default_format | capitalize }}

extension FontPalette {

    public static var {% if group.name | default_format == "default" %} `{{ group.name | default_format }}`{% else %} {{ group.name | default_format }}{% endif %}: FontPalette {
        return FontPalette({% for style in group.styles %}
            {{ style.name_info.style_name | default_format }}: AFont(name: "{{ style.font.font_postscript_name }}", family: "{{ style.font.font_family }}", size: {{ style.font.font_size }}, weight: {{ style.font.font_weight }}, letterSpacing: {{ style.font.letter_spacing }}, textStyle: {% if style.description != nil %}.{{ style.description  }}{% else %}nil{% endif %}){% if forloop.last == false %},{% endif %}{% endfor %}
        )
    }

}
{% endfor %}

// MARK: - Font

public class AFont: Codable {
    
    public let name: String
    public let family: String
    public let size: CGFloat
    public let weight: CGFloat
    public let letterSpacing: CGFloat
    public let textStyle: UIFont.TextStyle?
    
    public var uiFont: UIFont {
        if let font = UIFont(name: name, size: size) {
            return font
        } else {
            assert(true, "Font with name \"\(name)\" not found!")
            return UIFont.systemFont(ofSize: size)
        }
    }
    
    public init(
        name: String,
        family: String,
        size: CGFloat,
        weight: CGFloat,
        letterSpacing: CGFloat,
        textStyle: UIFont.TextStyle?
    ) {
        self.name = name
        self.family = family
        self.size = size
        self.weight = weight
        self.letterSpacing = letterSpacing
        self.textStyle = textStyle
    }
    
}

@available(iOS 13.0.0, *)
extension AFont {
    
    public var swiftUIFont: SwiftUI.Font {
        return SwiftUI.Font(self.uiFont)
    }
    
}

extension UIFont.TextStyle: Codable {}

// swiftlint:enable all
