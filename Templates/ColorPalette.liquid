//
//  ColorPalette.swift
//  AdmiralUI
//
//  Generated by Fastlane Figma Plugin.
//

import UIKit
import SwiftUI

// swiftlint:disable all

public enum ColorPaletteStyle: String, Codable {
    case light
    case dark
}

// MARK: - ColorPalette

public class ColorPalette: Codable {
        
    public var style: ColorPaletteStyle
    public var disabledAlpha: CGFloat
    {% for style_name in common_style_names %} 
    public var {{ style_name | default_format }}: AColor{% endfor %}

    public init(
        style: ColorPaletteStyle,
        disabledAlpha: CGFloat,{% for style_name in common_style_names %} 
        {{ style_name | default_format }}: AColor{% if forloop.last == false %},{% endif %}{% endfor %}
    ) {
        self.style = style
        self.disabledAlpha = disabledAlpha
        {% for style_name in common_style_names %} 
        self.{{ style_name | default_format }} = {{ style_name | default_format }}{% endfor %}
    }

}

// MARK: - All Fonts

extension ColorPalette {

    public var all: [AColor] {
        return [
            {% for style_name in common_style_names %}{{ style_name | default_format }}{% if forloop.last == false %},
            {% endif %}{% endfor %}
        ]
    }

}

{% for group in groups %} 
// MARK: - {{ group.name | default_format | capitalize }}

extension ColorPalette {

    public static var {{ group.name | default_format }}: ColorPalette {
        return ColorPalette(
            style: {% if group.is_dark %}.dark{% else %}.light{% endif %},
            disabledAlpha: 0.6,{% for style in group.styles %}
            {{ style.name_info.style_name | default_format }}: AColor(hexString: "{{ style.color.hex_with_alpha }}"){% if forloop.last == false %},{% endif %}{% endfor %}
        )
    }

}
{% endfor %}
// MARK: - Color

public struct AColor: Codable {
    public let red: CGFloat
    public let green: CGFloat
    public let blue: CGFloat
    public let alpha: CGFloat
    
    public var uiColor: UIColor {
        return UIColor(red: red, green: green, blue: blue, alpha: alpha)
    }

    public var cgColor: CGColor {
        return uiColor.cgColor
    }
    
    public static var clear: AColor {
        return AColor(red: 0, green: 0, blue: 0, alpha: 0.0)
    }
    
    public init(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) {
        self.red = red
        self.green = green
        self.blue = blue
        self.alpha = alpha
    }
    
    public init(red: Int, green: Int, blue: Int) {
        self.init(red: CGFloat(red) / 255.0,
                  green: CGFloat(green) / 255.0,
                  blue: CGFloat(blue) / 255.0,
                  alpha: 1.0)
    }
    
    public init(hexString: String) {
        let hex = hexString.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int = UInt64()
        Scanner(string: hex).scanHexInt64(&int)
        let a, r, g, b: UInt64
        switch hex.count {
        case 3: // RGB (12-bit)
            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
        case 6: // RGB (24-bit)
            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)
        case 8: // ARGB (32-bit)
            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)
        default:
            (a, r, g, b) = (255, 0, 0, 0)
        }
        
        self.init(red: CGFloat(r) / 255, green: CGFloat(g) / 255, blue: CGFloat(b) / 255, alpha: CGFloat(a) / 255)
    }
    
    public init(color: UIColor) {
        let colorTo = CGColorSpace(name: CGColorSpace.sRGB)!
        let cgColorInRGB = color.cgColor.converted(
            to: colorTo,
            intent: .defaultIntent,
            options: nil)!
        
        let colorRef = cgColorInRGB.components
        let red = colorRef?[0] ?? 0
        let green = colorRef?[1] ?? 0
        let blue = ((colorRef?.count ?? 0) > 2 ? colorRef?[2] : green) ?? 0
        let alpha = color.cgColor.alpha
        self.init(red: red, green: green, blue: blue, alpha: alpha)
    }
    
    public func hexString(withAplha: Bool = true) -> String {
        var colorString = withAplha ? String(format: "#%02lX", lroundf(Float(alpha * 255))) : "#"

        colorString += String(
            format: "%02lX%02lX%02lX",
            lroundf(Float(red * 255)),
            lroundf(Float(green * 255)),
            lroundf(Float(blue * 255))
        )
    
        return colorString
    }
    
    public func withAlpha(_ alpha: CGFloat) -> AColor {
        return AColor(red: red, green: green, blue: blue, alpha: alpha)
    }
    
}

@available(iOS 13.0.0, *)
extension AColor {
    
    public var swiftUIColor: SwiftUI.Color {
        return SwiftUI.Color(.sRGB, red: Double(red), green: Double(green), blue: Double(blue), opacity: Double(alpha))
    }
    
}

extension UIColor {
    
    public var color: AColor {
        return AColor(color: self)
    }
    
}

// swiftlint:enable all