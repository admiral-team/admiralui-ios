// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-macos10.10 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SnapshotTesting
import Cocoa
import Foundation
import SceneKit
import SpriteKit
import Swift
import SwiftUI
import WebKit
import XCTest
extension Snapshotting where Format == Swift.String {
  public static var dump: SnapshotTesting.Snapshotting<Value, Swift.String> {
    get
  }
}
public protocol AnySnapshotStringConvertible {
  static var renderChildren: Swift.Bool { get }
  var snapshotDescription: Swift.String { get }
}
extension AnySnapshotStringConvertible {
  public static var renderChildren: Swift.Bool {
    get
  }
}
extension Character : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension Data : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension Date : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension NSObject : SnapshotTesting.AnySnapshotStringConvertible {
  @objc dynamic open var snapshotDescription: Swift.String {
    @objc get
  }
}
extension String : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension Substring : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension URL : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
public func _assertInlineSnapshot<Value>(matching value: @autoclosure () throws -> Value, as snapshotting: SnapshotTesting.Snapshotting<Value, Swift.String>, record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, with reference: Swift.String, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line)
public func _verifyInlineSnapshot<Value>(matching value: @autoclosure () throws -> Value, as snapshotting: SnapshotTesting.Snapshotting<Value, Swift.String>, record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, with reference: Swift.String, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line) -> Swift.String?
public var diffTool: Swift.String?
public var isRecording: Swift.Bool
@available(*, deprecated, renamed: "isRecording")
public var record: Swift.Bool {
  get
  set
}
public func assertSnapshot<Value, Format>(matching value: @autoclosure () throws -> Value, as snapshotting: SnapshotTesting.Snapshotting<Value, Format>, named name: Swift.String? = nil, record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line)
public func assertSnapshots<Value, Format>(matching value: @autoclosure () throws -> Value, as strategies: [Swift.String : SnapshotTesting.Snapshotting<Value, Format>], record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line)
public func assertSnapshots<Value, Format>(matching value: @autoclosure () throws -> Value, as strategies: [SnapshotTesting.Snapshotting<Value, Format>], record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line)
public func verifySnapshot<Value, Format>(matching value: @autoclosure () throws -> Value, as snapshotting: SnapshotTesting.Snapshotting<Value, Format>, named name: Swift.String? = nil, record recording: Swift.Bool = false, snapshotDirectory: Swift.String? = nil, timeout: Foundation.TimeInterval = 5, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line) -> Swift.String?
public struct Async<Value> {
  public let run: (@escaping (Value) -> Swift.Void) -> Swift.Void
  public init(run: @escaping (@escaping (Value) -> Swift.Void) -> Swift.Void)
  public init(value: Value)
  public func map<NewValue>(_ f: @escaping (Value) -> NewValue) -> SnapshotTesting.Async<NewValue>
}
extension Snapshotting where Value == QuartzCore.CALayer, Format == AppKit.NSImage {
  public static var image: SnapshotTesting.Snapshotting<QuartzCore.CALayer, AppKit.NSImage> {
    get
  }
  public static func image(precision: Swift.Float) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == CoreGraphics.CGPath, Format == AppKit.NSImage {
  public static var image: SnapshotTesting.Snapshotting<CoreGraphics.CGPath, AppKit.NSImage> {
    get
  }
  public static func image(precision: Swift.Float = 1, drawingMode: CoreGraphics.CGPathDrawingMode = .eoFill) -> SnapshotTesting.Snapshotting<Value, Format>
}
@available(iOS 11.0, macOS 10.13, tvOS 11.0, *)
extension Snapshotting where Value == CoreGraphics.CGPath, Format == Swift.String {
  public static var elementsDescription: SnapshotTesting.Snapshotting<CoreGraphics.CGPath, Swift.String> {
    get
  }
  public static func elementsDescription(numberFormatter: Foundation.NumberFormatter) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value : Swift.CaseIterable, Format == Swift.String {
  public static func `func`<A>(into witness: SnapshotTesting.Snapshotting<A, Format>) -> SnapshotTesting.Snapshotting<(Value) -> A, Format>
}
extension Snapshotting where Value : Swift.Encodable, Format == Swift.String {
  @available(iOS 11.0, macOS 10.13, tvOS 11.0, *)
  public static var json: SnapshotTesting.Snapshotting<Value, Swift.String> {
    get
  }
  public static func json(_ encoder: Foundation.JSONEncoder) -> SnapshotTesting.Snapshotting<Value, Format>
  public static var plist: SnapshotTesting.Snapshotting<Value, Swift.String> {
    get
  }
  public static func plist(_ encoder: SnapshotTesting.PropertyListEncoder) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == Foundation.Data, Format == Foundation.Data {
  public static var data: SnapshotTesting.Snapshotting<Foundation.Data, Foundation.Data> {
    get
  }
}
extension Snapshotting where Format == Swift.String {
  public static var description: SnapshotTesting.Snapshotting<Value, Swift.String> {
    get
  }
}
public struct Diffing<Value> {
  public var toData: (Value) -> Foundation.Data
  public var fromData: (Foundation.Data) -> Value
  public var diff: (Value, Value) -> (Swift.String, [Any])?
  public init(toData: @escaping (Value) -> Foundation.Data, fromData: @escaping (Foundation.Data) -> Value, diff: @escaping (Value, Value) -> (Swift.String, [Any])?)
}
extension Snapshotting where Value == AppKit.NSBezierPath, Format == AppKit.NSImage {
  public static var image: SnapshotTesting.Snapshotting<AppKit.NSBezierPath, AppKit.NSImage> {
    get
  }
  public static func image(precision: Swift.Float = 1) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == AppKit.NSBezierPath, Format == Swift.String {
  @available(iOS 11.0, *)
  public static var elementsDescription: SnapshotTesting.Snapshotting<AppKit.NSBezierPath, Swift.String> {
    get
  }
  @available(iOS 11.0, *)
  public static func elementsDescription(numberFormatter: Foundation.NumberFormatter) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Diffing where Value == AppKit.NSImage {
  public static let image: SnapshotTesting.Diffing<AppKit.NSImage>
  public static func image(precision: Swift.Float) -> SnapshotTesting.Diffing<Value>
}
extension Snapshotting where Value == AppKit.NSImage, Format == AppKit.NSImage {
  public static var image: SnapshotTesting.Snapshotting<AppKit.NSImage, AppKit.NSImage> {
    get
  }
  public static func image(precision: Swift.Float) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == AppKit.NSView, Format == AppKit.NSImage {
  public static var image: SnapshotTesting.Snapshotting<AppKit.NSView, AppKit.NSImage> {
    get
  }
  public static func image(precision: Swift.Float = 1, size: CoreGraphics.CGSize? = nil) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == AppKit.NSView, Format == Swift.String {
  public static var recursiveDescription: SnapshotTesting.Snapshotting<AppKit.NSView, Swift.String> {
    get
  }
}
extension Snapshotting where Value == AppKit.NSViewController, Format == AppKit.NSImage {
  public static var image: SnapshotTesting.Snapshotting<AppKit.NSViewController, AppKit.NSImage> {
    get
  }
  public static func image(precision: Swift.Float = 1, size: CoreGraphics.CGSize? = nil) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == AppKit.NSViewController, Format == Swift.String {
  public static var recursiveDescription: SnapshotTesting.Snapshotting<AppKit.NSViewController, Swift.String> {
    get
  }
}
open class PropertyListEncoder {
  open var outputFormat: Foundation.PropertyListSerialization.PropertyListFormat
  open var userInfo: [Swift.CodingUserInfoKey : Any]
  public init()
  open func encode<Value>(_ value: Value) throws -> Foundation.Data where Value : Swift.Encodable
  @objc deinit
}
open class PropertyListDecoder {
  open var userInfo: [Swift.CodingUserInfoKey : Any]
  public init()
  open func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  open func decode<T>(_ type: T.Type, from data: Foundation.Data, format: inout Foundation.PropertyListSerialization.PropertyListFormat) throws -> T where T : Swift.Decodable
  @objc deinit
}
extension Snapshotting where Value == SceneKit.SCNScene, Format == AppKit.NSImage {
  public static func image(precision: Swift.Float = 1, size: CoreGraphics.CGSize) -> SnapshotTesting.Snapshotting<Value, Format>
}
public struct Snapshotting<Value, Format> {
  public var pathExtension: Swift.String?
  public var diffing: SnapshotTesting.Diffing<Format>
  public var snapshot: (Value) -> SnapshotTesting.Async<Format>
  public init(pathExtension: Swift.String?, diffing: SnapshotTesting.Diffing<Format>, asyncSnapshot: @escaping (Value) -> SnapshotTesting.Async<Format>)
  public init(pathExtension: Swift.String?, diffing: SnapshotTesting.Diffing<Format>, snapshot: @escaping (Value) -> Format)
  public func pullback<NewValue>(_ transform: @escaping (NewValue) -> Value) -> SnapshotTesting.Snapshotting<NewValue, Format>
  public func asyncPullback<NewValue>(_ transform: @escaping (NewValue) -> SnapshotTesting.Async<Value>) -> SnapshotTesting.Snapshotting<NewValue, Format>
}
public typealias SimplySnapshotting<Format> = SnapshotTesting.Snapshotting<Format, Format>
extension Snapshotting where Value == Format {
  public init(pathExtension: Swift.String?, diffing: SnapshotTesting.Diffing<Format>)
}
extension Snapshotting where Value == SpriteKit.SKScene, Format == AppKit.NSImage {
  public static func image(precision: Swift.Float = 1, size: CoreGraphics.CGSize) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == Swift.String, Format == Swift.String {
  public static let lines: SnapshotTesting.Snapshotting<Swift.String, Swift.String>
}
extension Diffing where Value == Swift.String {
  public static let lines: SnapshotTesting.Diffing<Swift.String>
}
public enum SwiftUISnapshotLayout {
  case fixed(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  case sizeThatFits
}
extension Snapshotting where Value == Foundation.URLRequest, Format == Swift.String {
  public static let raw: SnapshotTesting.Snapshotting<Foundation.URLRequest, Swift.String>
  public static func raw(pretty: Swift.Bool) -> SnapshotTesting.Snapshotting<Value, Format>
  public static let curl: SnapshotTesting.Snapshotting<Foundation.URLRequest, Swift.String>
}
extension NSView {
}
extension Snapshotting {
  public static func wait(for duration: Foundation.TimeInterval, on strategy: SnapshotTesting.Snapshotting<Value, Format>) -> SnapshotTesting.Snapshotting<Value, Format>
}
