// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SnapshotTesting
import Foundation
import SceneKit
import SpriteKit
import Swift
import SwiftUI
import UIKit
import WebKit
import XCTest
extension Snapshotting where Format == Swift.String {
  public static var dump: SnapshotTesting.Snapshotting<Value, Swift.String> {
    get
  }
}
public protocol AnySnapshotStringConvertible {
  static var renderChildren: Swift.Bool { get }
  var snapshotDescription: Swift.String { get }
}
extension AnySnapshotStringConvertible {
  public static var renderChildren: Swift.Bool {
    get
  }
}
extension Character : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension Data : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension Date : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension NSObject : SnapshotTesting.AnySnapshotStringConvertible {
  @objc dynamic open var snapshotDescription: Swift.String {
    @objc get
  }
}
extension String : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension Substring : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
extension URL : SnapshotTesting.AnySnapshotStringConvertible {
  public var snapshotDescription: Swift.String {
    get
  }
}
public func _assertInlineSnapshot<Value>(matching value: @autoclosure () throws -> Value, as snapshotting: SnapshotTesting.Snapshotting<Value, Swift.String>, record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, with reference: Swift.String, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line)
public func _verifyInlineSnapshot<Value>(matching value: @autoclosure () throws -> Value, as snapshotting: SnapshotTesting.Snapshotting<Value, Swift.String>, record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, with reference: Swift.String, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line) -> Swift.String?
public var diffTool: Swift.String?
public var isRecording: Swift.Bool
@available(*, deprecated, renamed: "isRecording")
public var record: Swift.Bool {
  get
  set
}
public func assertSnapshot<Value, Format>(matching value: @autoclosure () throws -> Value, as snapshotting: SnapshotTesting.Snapshotting<Value, Format>, named name: Swift.String? = nil, record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line)
public func assertSnapshots<Value, Format>(matching value: @autoclosure () throws -> Value, as strategies: [Swift.String : SnapshotTesting.Snapshotting<Value, Format>], record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line)
public func assertSnapshots<Value, Format>(matching value: @autoclosure () throws -> Value, as strategies: [SnapshotTesting.Snapshotting<Value, Format>], record recording: Swift.Bool = false, timeout: Foundation.TimeInterval = 5, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line)
public func verifySnapshot<Value, Format>(matching value: @autoclosure () throws -> Value, as snapshotting: SnapshotTesting.Snapshotting<Value, Format>, named name: Swift.String? = nil, record recording: Swift.Bool = false, snapshotDirectory: Swift.String? = nil, timeout: Foundation.TimeInterval = 5, file: Swift.StaticString = #file, testName: Swift.String = #function, line: Swift.UInt = #line) -> Swift.String?
public struct Async<Value> {
  public let run: (@escaping (Value) -> Swift.Void) -> Swift.Void
  public init(run: @escaping (@escaping (Value) -> Swift.Void) -> Swift.Void)
  public init(value: Value)
  public func map<NewValue>(_ f: @escaping (Value) -> NewValue) -> SnapshotTesting.Async<NewValue>
}
extension Snapshotting where Value == QuartzCore.CALayer, Format == UIKit.UIImage {
  public static var image: SnapshotTesting.Snapshotting<QuartzCore.CALayer, UIKit.UIImage> {
    get
  }
  public static func image(precision: Swift.Float = 1, traits: UIKit.UITraitCollection = .init()) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == CoreGraphics.CGPath, Format == UIKit.UIImage {
  public static var image: SnapshotTesting.Snapshotting<CoreGraphics.CGPath, UIKit.UIImage> {
    get
  }
  public static func image(precision: Swift.Float = 1, scale: CoreGraphics.CGFloat = 1, drawingMode: CoreGraphics.CGPathDrawingMode = .eoFill) -> SnapshotTesting.Snapshotting<Value, Format>
}
@available(iOS 11.0, macOS 10.13, tvOS 11.0, *)
extension Snapshotting where Value == CoreGraphics.CGPath, Format == Swift.String {
  public static var elementsDescription: SnapshotTesting.Snapshotting<CoreGraphics.CGPath, Swift.String> {
    get
  }
  public static func elementsDescription(numberFormatter: Foundation.NumberFormatter) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value : Swift.CaseIterable, Format == Swift.String {
  public static func `func`<A>(into witness: SnapshotTesting.Snapshotting<A, Format>) -> SnapshotTesting.Snapshotting<(Value) -> A, Format>
}
extension Snapshotting where Value : Swift.Encodable, Format == Swift.String {
  @available(iOS 11.0, macOS 10.13, tvOS 11.0, *)
  public static var json: SnapshotTesting.Snapshotting<Value, Swift.String> {
    get
  }
  public static func json(_ encoder: Foundation.JSONEncoder) -> SnapshotTesting.Snapshotting<Value, Format>
  public static var plist: SnapshotTesting.Snapshotting<Value, Swift.String> {
    get
  }
  public static func plist(_ encoder: SnapshotTesting.PropertyListEncoder) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == Foundation.Data, Format == Foundation.Data {
  public static var data: SnapshotTesting.Snapshotting<Foundation.Data, Foundation.Data> {
    get
  }
}
extension Snapshotting where Format == Swift.String {
  public static var description: SnapshotTesting.Snapshotting<Value, Swift.String> {
    get
  }
}
public struct Diffing<Value> {
  public var toData: (Value) -> Foundation.Data
  public var fromData: (Foundation.Data) -> Value
  public var diff: (Value, Value) -> (Swift.String, [Any])?
  public init(toData: @escaping (Value) -> Foundation.Data, fromData: @escaping (Foundation.Data) -> Value, diff: @escaping (Value, Value) -> (Swift.String, [Any])?)
}
open class PropertyListEncoder {
  open var outputFormat: Foundation.PropertyListSerialization.PropertyListFormat
  open var userInfo: [Swift.CodingUserInfoKey : Any]
  public init()
  open func encode<Value>(_ value: Value) throws -> Foundation.Data where Value : Swift.Encodable
  @objc deinit
}
open class PropertyListDecoder {
  open var userInfo: [Swift.CodingUserInfoKey : Any]
  public init()
  open func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  open func decode<T>(_ type: T.Type, from data: Foundation.Data, format: inout Foundation.PropertyListSerialization.PropertyListFormat) throws -> T where T : Swift.Decodable
  @objc deinit
}
extension Snapshotting where Value == SceneKit.SCNScene, Format == UIKit.UIImage {
  public static func image(precision: Swift.Float = 1, size: CoreGraphics.CGSize) -> SnapshotTesting.Snapshotting<Value, Format>
}
public struct Snapshotting<Value, Format> {
  public var pathExtension: Swift.String?
  public var diffing: SnapshotTesting.Diffing<Format>
  public var snapshot: (Value) -> SnapshotTesting.Async<Format>
  public init(pathExtension: Swift.String?, diffing: SnapshotTesting.Diffing<Format>, asyncSnapshot: @escaping (Value) -> SnapshotTesting.Async<Format>)
  public init(pathExtension: Swift.String?, diffing: SnapshotTesting.Diffing<Format>, snapshot: @escaping (Value) -> Format)
  public func pullback<NewValue>(_ transform: @escaping (NewValue) -> Value) -> SnapshotTesting.Snapshotting<NewValue, Format>
  public func asyncPullback<NewValue>(_ transform: @escaping (NewValue) -> SnapshotTesting.Async<Value>) -> SnapshotTesting.Snapshotting<NewValue, Format>
}
public typealias SimplySnapshotting<Format> = SnapshotTesting.Snapshotting<Format, Format>
extension Snapshotting where Value == Format {
  public init(pathExtension: Swift.String?, diffing: SnapshotTesting.Diffing<Format>)
}
extension Snapshotting where Value == SpriteKit.SKScene, Format == UIKit.UIImage {
  public static func image(precision: Swift.Float = 1, size: CoreGraphics.CGSize) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == Swift.String, Format == Swift.String {
  public static let lines: SnapshotTesting.Snapshotting<Swift.String, Swift.String>
}
extension Diffing where Value == Swift.String {
  public static let lines: SnapshotTesting.Diffing<Swift.String>
}
public enum SwiftUISnapshotLayout {
  case device(config: SnapshotTesting.ViewImageConfig)
  case fixed(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  case sizeThatFits
}
@available(iOS 13.0, tvOS 13.0, *)
extension Snapshotting where Value : SwiftUI.View, Format == UIKit.UIImage {
  public static var image: SnapshotTesting.Snapshotting<Value, UIKit.UIImage> {
    get
  }
  public static func image(drawHierarchyInKeyWindow: Swift.Bool = false, precision: Swift.Float = 1, layout: SnapshotTesting.SwiftUISnapshotLayout = .sizeThatFits, traits: UIKit.UITraitCollection = .init()) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == UIKit.UIBezierPath, Format == UIKit.UIImage {
  public static var image: SnapshotTesting.Snapshotting<UIKit.UIBezierPath, UIKit.UIImage> {
    get
  }
  public static func image(precision: Swift.Float = 1, scale: CoreGraphics.CGFloat = 1) -> SnapshotTesting.Snapshotting<Value, Format>
}
@available(iOS 11.0, tvOS 11.0, *)
extension Snapshotting where Value == UIKit.UIBezierPath, Format == Swift.String {
  public static var elementsDescription: SnapshotTesting.Snapshotting<UIKit.UIBezierPath, Swift.String> {
    get
  }
  public static func elementsDescription(numberFormatter: Foundation.NumberFormatter) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Diffing where Value == UIKit.UIImage {
  public static let image: SnapshotTesting.Diffing<UIKit.UIImage>
  public static func image(precision: Swift.Float, scale: CoreGraphics.CGFloat?) -> SnapshotTesting.Diffing<Value>
}
extension Snapshotting where Value == UIKit.UIImage, Format == UIKit.UIImage {
  public static var image: SnapshotTesting.Snapshotting<UIKit.UIImage, UIKit.UIImage> {
    get
  }
  public static func image(precision: Swift.Float, scale: CoreGraphics.CGFloat?) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == UIKit.UIView, Format == UIKit.UIImage {
  public static var image: SnapshotTesting.Snapshotting<UIKit.UIView, UIKit.UIImage> {
    get
  }
  public static func image(drawHierarchyInKeyWindow: Swift.Bool = false, precision: Swift.Float = 1, size: CoreGraphics.CGSize? = nil, traits: UIKit.UITraitCollection = .init()) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == UIKit.UIView, Format == Swift.String {
  public static var recursiveDescription: SnapshotTesting.Snapshotting<UIKit.UIView, Swift.String> {
    get
  }
  public static func recursiveDescription(size: CoreGraphics.CGSize? = nil, traits: UIKit.UITraitCollection = .init()) -> SnapshotTesting.Snapshotting<UIKit.UIView, Swift.String>
}
extension Snapshotting where Value == UIKit.UIViewController, Format == UIKit.UIImage {
  public static var image: SnapshotTesting.Snapshotting<UIKit.UIViewController, UIKit.UIImage> {
    get
  }
  public static func image(on config: SnapshotTesting.ViewImageConfig, precision: Swift.Float = 1, size: CoreGraphics.CGSize? = nil, traits: UIKit.UITraitCollection = .init()) -> SnapshotTesting.Snapshotting<Value, Format>
  public static func image(drawHierarchyInKeyWindow: Swift.Bool = false, precision: Swift.Float = 1, size: CoreGraphics.CGSize? = nil, traits: UIKit.UITraitCollection = .init()) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension Snapshotting where Value == UIKit.UIViewController, Format == Swift.String {
  public static var hierarchy: SnapshotTesting.Snapshotting<UIKit.UIViewController, Swift.String> {
    get
  }
  public static var recursiveDescription: SnapshotTesting.Snapshotting<UIKit.UIViewController, Swift.String> {
    get
  }
  public static func recursiveDescription(on config: SnapshotTesting.ViewImageConfig = .init(), size: CoreGraphics.CGSize? = nil, traits: UIKit.UITraitCollection = .init()) -> SnapshotTesting.Snapshotting<UIKit.UIViewController, Swift.String>
}
extension Snapshotting where Value == Foundation.URLRequest, Format == Swift.String {
  public static let raw: SnapshotTesting.Snapshotting<Foundation.URLRequest, Swift.String>
  public static func raw(pretty: Swift.Bool) -> SnapshotTesting.Snapshotting<Value, Format>
  public static let curl: SnapshotTesting.Snapshotting<Foundation.URLRequest, Swift.String>
}
public struct ViewImageConfig {
  public enum Orientation {
    case landscape
    case portrait
    public static func == (a: SnapshotTesting.ViewImageConfig.Orientation, b: SnapshotTesting.ViewImageConfig.Orientation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum TabletOrientation {
    public enum PortraitSplits {
      case oneThird
      case twoThirds
      case full
      public static func == (a: SnapshotTesting.ViewImageConfig.TabletOrientation.PortraitSplits, b: SnapshotTesting.ViewImageConfig.TabletOrientation.PortraitSplits) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum LandscapeSplits {
      case oneThird
      case oneHalf
      case twoThirds
      case full
      public static func == (a: SnapshotTesting.ViewImageConfig.TabletOrientation.LandscapeSplits, b: SnapshotTesting.ViewImageConfig.TabletOrientation.LandscapeSplits) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    case landscape(splitView: SnapshotTesting.ViewImageConfig.TabletOrientation.LandscapeSplits)
    case portrait(splitView: SnapshotTesting.ViewImageConfig.TabletOrientation.PortraitSplits)
  }
  public var safeArea: UIKit.UIEdgeInsets
  public var size: CoreGraphics.CGSize?
  public var traits: UIKit.UITraitCollection
  public init(safeArea: UIKit.UIEdgeInsets = .zero, size: CoreGraphics.CGSize? = nil, traits: UIKit.UITraitCollection = .init())
  public static let iPhoneSe: SnapshotTesting.ViewImageConfig
  public static func iPhoneSe(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static let iPhone8: SnapshotTesting.ViewImageConfig
  public static func iPhone8(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static let iPhone8Plus: SnapshotTesting.ViewImageConfig
  public static func iPhone8Plus(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static let iPhoneX: SnapshotTesting.ViewImageConfig
  public static func iPhoneX(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static let iPhoneXsMax: SnapshotTesting.ViewImageConfig
  public static func iPhoneXsMax(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  @available(iOS 11.0, *)
  public static let iPhoneXr: SnapshotTesting.ViewImageConfig
  @available(iOS 11.0, *)
  public static func iPhoneXr(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static let iPhone12: SnapshotTesting.ViewImageConfig
  public static func iPhone12(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static let iPhone12ProMax: SnapshotTesting.ViewImageConfig
  public static func iPhone12ProMax(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static let iPadMini: SnapshotTesting.ViewImageConfig
  public static func iPadMini(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static func iPadMini(_ orientation: SnapshotTesting.ViewImageConfig.TabletOrientation) -> SnapshotTesting.ViewImageConfig
  public static let iPad9_7: SnapshotTesting.ViewImageConfig
  public static func iPad9_7(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static func iPad9_7(_ orientation: SnapshotTesting.ViewImageConfig.TabletOrientation) -> SnapshotTesting.ViewImageConfig
  public static let iPad10_2: SnapshotTesting.ViewImageConfig
  public static func iPad10_2(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static func iPad10_2(_ orientation: SnapshotTesting.ViewImageConfig.TabletOrientation) -> SnapshotTesting.ViewImageConfig
  public static let iPadPro10_5: SnapshotTesting.ViewImageConfig
  public static func iPadPro10_5(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static func iPadPro10_5(_ orientation: SnapshotTesting.ViewImageConfig.TabletOrientation) -> SnapshotTesting.ViewImageConfig
  public static let iPadPro11: SnapshotTesting.ViewImageConfig
  public static func iPadPro11(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static func iPadPro11(_ orientation: SnapshotTesting.ViewImageConfig.TabletOrientation) -> SnapshotTesting.ViewImageConfig
  public static let iPadPro12_9: SnapshotTesting.ViewImageConfig
  public static func iPadPro12_9(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> SnapshotTesting.ViewImageConfig
  public static func iPadPro12_9(_ orientation: SnapshotTesting.ViewImageConfig.TabletOrientation) -> SnapshotTesting.ViewImageConfig
}
extension UITraitCollection {
  public static func iPhoneSe(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> UIKit.UITraitCollection
  public static func iPhone8(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> UIKit.UITraitCollection
  public static func iPhone8Plus(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> UIKit.UITraitCollection
  public static func iPhoneX(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> UIKit.UITraitCollection
  public static func iPhoneXr(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> UIKit.UITraitCollection
  public static func iPhoneXsMax(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> UIKit.UITraitCollection
  public static func iPhone12(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> UIKit.UITraitCollection
  public static func iPhone12ProMax(_ orientation: SnapshotTesting.ViewImageConfig.Orientation) -> UIKit.UITraitCollection
  public static let iPadMini: UIKit.UITraitCollection
  public static let iPadMini_Compact_SplitView: UIKit.UITraitCollection
  public static let iPad9_7: UIKit.UITraitCollection
  public static let iPad9_7_Compact_SplitView: UIKit.UITraitCollection
  public static let iPad10_2: UIKit.UITraitCollection
  public static let iPad10_2_Compact_SplitView: UIKit.UITraitCollection
  public static let iPadPro10_5: UIKit.UITraitCollection
  public static let iPadPro10_5_Compact_SplitView: UIKit.UITraitCollection
  public static let iPadPro11: UIKit.UITraitCollection
  public static let iPadPro11_Compact_SplitView: UIKit.UITraitCollection
  public static let iPadPro12_9: UIKit.UITraitCollection
  public static let iPadPro12_9_Compact_SplitView: UIKit.UITraitCollection
}
extension UIView {
}
extension Snapshotting {
  public static func wait(for duration: Foundation.TimeInterval, on strategy: SnapshotTesting.Snapshotting<Value, Format>) -> SnapshotTesting.Snapshotting<Value, Format>
}
extension SnapshotTesting.ViewImageConfig.Orientation : Swift.Equatable {}
extension SnapshotTesting.ViewImageConfig.Orientation : Swift.Hashable {}
extension SnapshotTesting.ViewImageConfig.TabletOrientation.PortraitSplits : Swift.Equatable {}
extension SnapshotTesting.ViewImageConfig.TabletOrientation.PortraitSplits : Swift.Hashable {}
extension SnapshotTesting.ViewImageConfig.TabletOrientation.LandscapeSplits : Swift.Equatable {}
extension SnapshotTesting.ViewImageConfig.TabletOrientation.LandscapeSplits : Swift.Hashable {}
